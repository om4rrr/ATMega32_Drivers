
ATMega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000061e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000180  00800060  000061e6  0000627a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  008001e0  008001e0  000063fa  2**0
                  ALLOC
  3 .stab         000057fc  00000000  00000000  000063fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002b69  00000000  00000000  0000bbf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  0000e761  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000271  00000000  00000000  0000e981  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002a12  00000000  00000000  0000ebf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001748  00000000  00000000  00011604  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000148a  00000000  00000000  00012d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000240  00000000  00000000  000141d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000327  00000000  00000000  00014418  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000bc2  00000000  00000000  0001473f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00015301  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <__vector_1>
       8:	0c 94 d3 0b 	jmp	0x17a6	; 0x17a6 <__vector_2>
       c:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	f1 e6       	ldi	r31, 0x61	; 97
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3e       	cpi	r26, 0xE0	; 224
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 ee       	ldi	r26, 0xE0	; 224
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3f       	cpi	r26, 0xFF	; 255
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 36 30 	call	0x606c	; 0x606c <main>
      8a:	0c 94 f1 30 	jmp	0x61e2	; 0x61e2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__lshrdi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__lshrdi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__lshrdi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__lshrdi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	4d 81       	ldd	r20, Y+5	; 0x05
      e4:	5e 81       	ldd	r21, Y+6	; 0x06
      e6:	6f 81       	ldd	r22, Y+7	; 0x07
      e8:	78 85       	ldd	r23, Y+8	; 0x08
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__lshrdi3+0x7c>
      ee:	1d 86       	std	Y+13, r1	; 0x0d
      f0:	1e 86       	std	Y+14, r1	; 0x0e
      f2:	1f 86       	std	Y+15, r1	; 0x0f
      f4:	18 8a       	std	Y+16, r1	; 0x10
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__lshrdi3+0x76>
     100:	76 95       	lsr	r23
     102:	67 95       	ror	r22
     104:	57 95       	ror	r21
     106:	47 95       	ror	r20
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__lshrdi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__lshrdi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__lshrdi3+0x94>
     11e:	b6 95       	lsr	r27
     120:	a7 95       	ror	r26
     122:	97 95       	ror	r25
     124:	87 95       	ror	r24
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__lshrdi3+0x8c>
     12a:	8d 87       	std	Y+13, r24	; 0x0d
     12c:	9e 87       	std	Y+14, r25	; 0x0e
     12e:	af 87       	std	Y+15, r26	; 0x0f
     130:	b8 8b       	std	Y+16, r27	; 0x10
     132:	04 c0       	rjmp	.+8      	; 0x13c <__lshrdi3+0xaa>
     134:	44 0f       	add	r20, r20
     136:	55 1f       	adc	r21, r21
     138:	66 1f       	adc	r22, r22
     13a:	77 1f       	adc	r23, r23
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__lshrdi3+0xa2>
     140:	89 81       	ldd	r24, Y+1	; 0x01
     142:	9a 81       	ldd	r25, Y+2	; 0x02
     144:	ab 81       	ldd	r26, Y+3	; 0x03
     146:	bc 81       	ldd	r27, Y+4	; 0x04
     148:	04 c0       	rjmp	.+8      	; 0x152 <__lshrdi3+0xc0>
     14a:	b6 95       	lsr	r27
     14c:	a7 95       	ror	r26
     14e:	97 95       	ror	r25
     150:	87 95       	ror	r24
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__lshrdi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	49 87       	std	Y+9, r20	; 0x09
     160:	5a 87       	std	Y+10, r21	; 0x0a
     162:	6b 87       	std	Y+11, r22	; 0x0b
     164:	7c 87       	std	Y+12, r23	; 0x0c
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__ashldi3>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	df 93       	push	r29
     198:	cf 93       	push	r28
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
     19e:	60 97       	sbiw	r28, 0x10	; 16
     1a0:	0f b6       	in	r0, 0x3f	; 63
     1a2:	f8 94       	cli
     1a4:	de bf       	out	0x3e, r29	; 62
     1a6:	0f be       	out	0x3f, r0	; 63
     1a8:	cd bf       	out	0x3d, r28	; 61
     1aa:	a8 2f       	mov	r26, r24
     1ac:	00 23       	and	r16, r16
     1ae:	09 f4       	brne	.+2      	; 0x1b2 <__ashldi3+0x22>
     1b0:	61 c0       	rjmp	.+194    	; 0x274 <__ashldi3+0xe4>
     1b2:	7e 01       	movw	r14, r28
     1b4:	08 94       	sec
     1b6:	e1 1c       	adc	r14, r1
     1b8:	f1 1c       	adc	r15, r1
     1ba:	88 e0       	ldi	r24, 0x08	; 8
     1bc:	f7 01       	movw	r30, r14
     1be:	11 92       	st	Z+, r1
     1c0:	8a 95       	dec	r24
     1c2:	e9 f7       	brne	.-6      	; 0x1be <__ashldi3+0x2e>
     1c4:	29 83       	std	Y+1, r18	; 0x01
     1c6:	3a 83       	std	Y+2, r19	; 0x02
     1c8:	4b 83       	std	Y+3, r20	; 0x03
     1ca:	5c 83       	std	Y+4, r21	; 0x04
     1cc:	6d 83       	std	Y+5, r22	; 0x05
     1ce:	7e 83       	std	Y+6, r23	; 0x06
     1d0:	af 83       	std	Y+7, r26	; 0x07
     1d2:	98 87       	std	Y+8, r25	; 0x08
     1d4:	80 e2       	ldi	r24, 0x20	; 32
     1d6:	80 1b       	sub	r24, r16
     1d8:	e8 2f       	mov	r30, r24
     1da:	ff 27       	eor	r31, r31
     1dc:	e7 fd       	sbrc	r30, 7
     1de:	f0 95       	com	r31
     1e0:	49 81       	ldd	r20, Y+1	; 0x01
     1e2:	5a 81       	ldd	r21, Y+2	; 0x02
     1e4:	6b 81       	ldd	r22, Y+3	; 0x03
     1e6:	7c 81       	ldd	r23, Y+4	; 0x04
     1e8:	18 16       	cp	r1, r24
     1ea:	84 f0       	brlt	.+32     	; 0x20c <__ashldi3+0x7c>
     1ec:	19 86       	std	Y+9, r1	; 0x09
     1ee:	1a 86       	std	Y+10, r1	; 0x0a
     1f0:	1b 86       	std	Y+11, r1	; 0x0b
     1f2:	1c 86       	std	Y+12, r1	; 0x0c
     1f4:	88 27       	eor	r24, r24
     1f6:	99 27       	eor	r25, r25
     1f8:	8e 1b       	sub	r24, r30
     1fa:	9f 0b       	sbc	r25, r31
     1fc:	04 c0       	rjmp	.+8      	; 0x206 <__ashldi3+0x76>
     1fe:	44 0f       	add	r20, r20
     200:	55 1f       	adc	r21, r21
     202:	66 1f       	adc	r22, r22
     204:	77 1f       	adc	r23, r23
     206:	8a 95       	dec	r24
     208:	d2 f7       	brpl	.-12     	; 0x1fe <__ashldi3+0x6e>
     20a:	28 c0       	rjmp	.+80     	; 0x25c <__ashldi3+0xcc>
     20c:	20 2f       	mov	r18, r16
     20e:	33 27       	eor	r19, r19
     210:	27 fd       	sbrc	r18, 7
     212:	30 95       	com	r19
     214:	db 01       	movw	r26, r22
     216:	ca 01       	movw	r24, r20
     218:	02 2e       	mov	r0, r18
     21a:	04 c0       	rjmp	.+8      	; 0x224 <__ashldi3+0x94>
     21c:	88 0f       	add	r24, r24
     21e:	99 1f       	adc	r25, r25
     220:	aa 1f       	adc	r26, r26
     222:	bb 1f       	adc	r27, r27
     224:	0a 94       	dec	r0
     226:	d2 f7       	brpl	.-12     	; 0x21c <__ashldi3+0x8c>
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	9a 87       	std	Y+10, r25	; 0x0a
     22c:	ab 87       	std	Y+11, r26	; 0x0b
     22e:	bc 87       	std	Y+12, r27	; 0x0c
     230:	04 c0       	rjmp	.+8      	; 0x23a <__ashldi3+0xaa>
     232:	76 95       	lsr	r23
     234:	67 95       	ror	r22
     236:	57 95       	ror	r21
     238:	47 95       	ror	r20
     23a:	ea 95       	dec	r30
     23c:	d2 f7       	brpl	.-12     	; 0x232 <__ashldi3+0xa2>
     23e:	8d 81       	ldd	r24, Y+5	; 0x05
     240:	9e 81       	ldd	r25, Y+6	; 0x06
     242:	af 81       	ldd	r26, Y+7	; 0x07
     244:	b8 85       	ldd	r27, Y+8	; 0x08
     246:	04 c0       	rjmp	.+8      	; 0x250 <__ashldi3+0xc0>
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	aa 1f       	adc	r26, r26
     24e:	bb 1f       	adc	r27, r27
     250:	2a 95       	dec	r18
     252:	d2 f7       	brpl	.-12     	; 0x248 <__ashldi3+0xb8>
     254:	48 2b       	or	r20, r24
     256:	59 2b       	or	r21, r25
     258:	6a 2b       	or	r22, r26
     25a:	7b 2b       	or	r23, r27
     25c:	4d 87       	std	Y+13, r20	; 0x0d
     25e:	5e 87       	std	Y+14, r21	; 0x0e
     260:	6f 87       	std	Y+15, r22	; 0x0f
     262:	78 8b       	std	Y+16, r23	; 0x10
     264:	29 85       	ldd	r18, Y+9	; 0x09
     266:	3a 85       	ldd	r19, Y+10	; 0x0a
     268:	4b 85       	ldd	r20, Y+11	; 0x0b
     26a:	5c 85       	ldd	r21, Y+12	; 0x0c
     26c:	6d 85       	ldd	r22, Y+13	; 0x0d
     26e:	7e 85       	ldd	r23, Y+14	; 0x0e
     270:	af 85       	ldd	r26, Y+15	; 0x0f
     272:	98 89       	ldd	r25, Y+16	; 0x10
     274:	8a 2f       	mov	r24, r26
     276:	60 96       	adiw	r28, 0x10	; 16
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	f8 94       	cli
     27c:	de bf       	out	0x3e, r29	; 62
     27e:	0f be       	out	0x3f, r0	; 63
     280:	cd bf       	out	0x3d, r28	; 61
     282:	cf 91       	pop	r28
     284:	df 91       	pop	r29
     286:	0f 91       	pop	r16
     288:	ff 90       	pop	r15
     28a:	ef 90       	pop	r14
     28c:	08 95       	ret

0000028e <__fixunssfsi>:
     28e:	ef 92       	push	r14
     290:	ff 92       	push	r15
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	7b 01       	movw	r14, r22
     298:	8c 01       	movw	r16, r24
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	40 e0       	ldi	r20, 0x00	; 0
     2a0:	5f e4       	ldi	r21, 0x4F	; 79
     2a2:	0e 94 a7 04 	call	0x94e	; 0x94e <__gesf2>
     2a6:	88 23       	and	r24, r24
     2a8:	8c f0       	brlt	.+34     	; 0x2cc <__fixunssfsi+0x3e>
     2aa:	c8 01       	movw	r24, r16
     2ac:	b7 01       	movw	r22, r14
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	40 e0       	ldi	r20, 0x00	; 0
     2b4:	5f e4       	ldi	r21, 0x4F	; 79
     2b6:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
     2ba:	0e 94 65 05 	call	0xaca	; 0xaca <__fixsfsi>
     2be:	9b 01       	movw	r18, r22
     2c0:	ac 01       	movw	r20, r24
     2c2:	20 50       	subi	r18, 0x00	; 0
     2c4:	30 40       	sbci	r19, 0x00	; 0
     2c6:	40 40       	sbci	r20, 0x00	; 0
     2c8:	50 48       	sbci	r21, 0x80	; 128
     2ca:	06 c0       	rjmp	.+12     	; 0x2d8 <__fixunssfsi+0x4a>
     2cc:	c8 01       	movw	r24, r16
     2ce:	b7 01       	movw	r22, r14
     2d0:	0e 94 65 05 	call	0xaca	; 0xaca <__fixsfsi>
     2d4:	9b 01       	movw	r18, r22
     2d6:	ac 01       	movw	r20, r24
     2d8:	b9 01       	movw	r22, r18
     2da:	ca 01       	movw	r24, r20
     2dc:	1f 91       	pop	r17
     2de:	0f 91       	pop	r16
     2e0:	ff 90       	pop	r15
     2e2:	ef 90       	pop	r14
     2e4:	08 95       	ret

000002e6 <_fpadd_parts>:
     2e6:	a0 e0       	ldi	r26, 0x00	; 0
     2e8:	b0 e0       	ldi	r27, 0x00	; 0
     2ea:	e9 e7       	ldi	r30, 0x79	; 121
     2ec:	f1 e0       	ldi	r31, 0x01	; 1
     2ee:	0c 94 b1 30 	jmp	0x6162	; 0x6162 <__prologue_saves__>
     2f2:	dc 01       	movw	r26, r24
     2f4:	2b 01       	movw	r4, r22
     2f6:	fa 01       	movw	r30, r20
     2f8:	9c 91       	ld	r25, X
     2fa:	92 30       	cpi	r25, 0x02	; 2
     2fc:	08 f4       	brcc	.+2      	; 0x300 <_fpadd_parts+0x1a>
     2fe:	39 c1       	rjmp	.+626    	; 0x572 <_fpadd_parts+0x28c>
     300:	eb 01       	movw	r28, r22
     302:	88 81       	ld	r24, Y
     304:	82 30       	cpi	r24, 0x02	; 2
     306:	08 f4       	brcc	.+2      	; 0x30a <_fpadd_parts+0x24>
     308:	33 c1       	rjmp	.+614    	; 0x570 <_fpadd_parts+0x28a>
     30a:	94 30       	cpi	r25, 0x04	; 4
     30c:	69 f4       	brne	.+26     	; 0x328 <_fpadd_parts+0x42>
     30e:	84 30       	cpi	r24, 0x04	; 4
     310:	09 f0       	breq	.+2      	; 0x314 <_fpadd_parts+0x2e>
     312:	2f c1       	rjmp	.+606    	; 0x572 <_fpadd_parts+0x28c>
     314:	11 96       	adiw	r26, 0x01	; 1
     316:	9c 91       	ld	r25, X
     318:	11 97       	sbiw	r26, 0x01	; 1
     31a:	89 81       	ldd	r24, Y+1	; 0x01
     31c:	98 17       	cp	r25, r24
     31e:	09 f4       	brne	.+2      	; 0x322 <_fpadd_parts+0x3c>
     320:	28 c1       	rjmp	.+592    	; 0x572 <_fpadd_parts+0x28c>
     322:	a0 e6       	ldi	r26, 0x60	; 96
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	25 c1       	rjmp	.+586    	; 0x572 <_fpadd_parts+0x28c>
     328:	84 30       	cpi	r24, 0x04	; 4
     32a:	09 f4       	brne	.+2      	; 0x32e <_fpadd_parts+0x48>
     32c:	21 c1       	rjmp	.+578    	; 0x570 <_fpadd_parts+0x28a>
     32e:	82 30       	cpi	r24, 0x02	; 2
     330:	a9 f4       	brne	.+42     	; 0x35c <_fpadd_parts+0x76>
     332:	92 30       	cpi	r25, 0x02	; 2
     334:	09 f0       	breq	.+2      	; 0x338 <_fpadd_parts+0x52>
     336:	1d c1       	rjmp	.+570    	; 0x572 <_fpadd_parts+0x28c>
     338:	9a 01       	movw	r18, r20
     33a:	ad 01       	movw	r20, r26
     33c:	88 e0       	ldi	r24, 0x08	; 8
     33e:	ea 01       	movw	r28, r20
     340:	09 90       	ld	r0, Y+
     342:	ae 01       	movw	r20, r28
     344:	e9 01       	movw	r28, r18
     346:	09 92       	st	Y+, r0
     348:	9e 01       	movw	r18, r28
     34a:	81 50       	subi	r24, 0x01	; 1
     34c:	c1 f7       	brne	.-16     	; 0x33e <_fpadd_parts+0x58>
     34e:	e2 01       	movw	r28, r4
     350:	89 81       	ldd	r24, Y+1	; 0x01
     352:	11 96       	adiw	r26, 0x01	; 1
     354:	9c 91       	ld	r25, X
     356:	89 23       	and	r24, r25
     358:	81 83       	std	Z+1, r24	; 0x01
     35a:	08 c1       	rjmp	.+528    	; 0x56c <_fpadd_parts+0x286>
     35c:	92 30       	cpi	r25, 0x02	; 2
     35e:	09 f4       	brne	.+2      	; 0x362 <_fpadd_parts+0x7c>
     360:	07 c1       	rjmp	.+526    	; 0x570 <_fpadd_parts+0x28a>
     362:	12 96       	adiw	r26, 0x02	; 2
     364:	2d 90       	ld	r2, X+
     366:	3c 90       	ld	r3, X
     368:	13 97       	sbiw	r26, 0x03	; 3
     36a:	eb 01       	movw	r28, r22
     36c:	8a 81       	ldd	r24, Y+2	; 0x02
     36e:	9b 81       	ldd	r25, Y+3	; 0x03
     370:	14 96       	adiw	r26, 0x04	; 4
     372:	ad 90       	ld	r10, X+
     374:	bd 90       	ld	r11, X+
     376:	cd 90       	ld	r12, X+
     378:	dc 90       	ld	r13, X
     37a:	17 97       	sbiw	r26, 0x07	; 7
     37c:	ec 80       	ldd	r14, Y+4	; 0x04
     37e:	fd 80       	ldd	r15, Y+5	; 0x05
     380:	0e 81       	ldd	r16, Y+6	; 0x06
     382:	1f 81       	ldd	r17, Y+7	; 0x07
     384:	91 01       	movw	r18, r2
     386:	28 1b       	sub	r18, r24
     388:	39 0b       	sbc	r19, r25
     38a:	b9 01       	movw	r22, r18
     38c:	37 ff       	sbrs	r19, 7
     38e:	04 c0       	rjmp	.+8      	; 0x398 <_fpadd_parts+0xb2>
     390:	66 27       	eor	r22, r22
     392:	77 27       	eor	r23, r23
     394:	62 1b       	sub	r22, r18
     396:	73 0b       	sbc	r23, r19
     398:	60 32       	cpi	r22, 0x20	; 32
     39a:	71 05       	cpc	r23, r1
     39c:	0c f0       	brlt	.+2      	; 0x3a0 <_fpadd_parts+0xba>
     39e:	61 c0       	rjmp	.+194    	; 0x462 <_fpadd_parts+0x17c>
     3a0:	12 16       	cp	r1, r18
     3a2:	13 06       	cpc	r1, r19
     3a4:	6c f5       	brge	.+90     	; 0x400 <_fpadd_parts+0x11a>
     3a6:	37 01       	movw	r6, r14
     3a8:	48 01       	movw	r8, r16
     3aa:	06 2e       	mov	r0, r22
     3ac:	04 c0       	rjmp	.+8      	; 0x3b6 <_fpadd_parts+0xd0>
     3ae:	96 94       	lsr	r9
     3b0:	87 94       	ror	r8
     3b2:	77 94       	ror	r7
     3b4:	67 94       	ror	r6
     3b6:	0a 94       	dec	r0
     3b8:	d2 f7       	brpl	.-12     	; 0x3ae <_fpadd_parts+0xc8>
     3ba:	21 e0       	ldi	r18, 0x01	; 1
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	40 e0       	ldi	r20, 0x00	; 0
     3c0:	50 e0       	ldi	r21, 0x00	; 0
     3c2:	04 c0       	rjmp	.+8      	; 0x3cc <_fpadd_parts+0xe6>
     3c4:	22 0f       	add	r18, r18
     3c6:	33 1f       	adc	r19, r19
     3c8:	44 1f       	adc	r20, r20
     3ca:	55 1f       	adc	r21, r21
     3cc:	6a 95       	dec	r22
     3ce:	d2 f7       	brpl	.-12     	; 0x3c4 <_fpadd_parts+0xde>
     3d0:	21 50       	subi	r18, 0x01	; 1
     3d2:	30 40       	sbci	r19, 0x00	; 0
     3d4:	40 40       	sbci	r20, 0x00	; 0
     3d6:	50 40       	sbci	r21, 0x00	; 0
     3d8:	2e 21       	and	r18, r14
     3da:	3f 21       	and	r19, r15
     3dc:	40 23       	and	r20, r16
     3de:	51 23       	and	r21, r17
     3e0:	21 15       	cp	r18, r1
     3e2:	31 05       	cpc	r19, r1
     3e4:	41 05       	cpc	r20, r1
     3e6:	51 05       	cpc	r21, r1
     3e8:	21 f0       	breq	.+8      	; 0x3f2 <_fpadd_parts+0x10c>
     3ea:	21 e0       	ldi	r18, 0x01	; 1
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	40 e0       	ldi	r20, 0x00	; 0
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	79 01       	movw	r14, r18
     3f4:	8a 01       	movw	r16, r20
     3f6:	e6 28       	or	r14, r6
     3f8:	f7 28       	or	r15, r7
     3fa:	08 29       	or	r16, r8
     3fc:	19 29       	or	r17, r9
     3fe:	3c c0       	rjmp	.+120    	; 0x478 <_fpadd_parts+0x192>
     400:	23 2b       	or	r18, r19
     402:	d1 f1       	breq	.+116    	; 0x478 <_fpadd_parts+0x192>
     404:	26 0e       	add	r2, r22
     406:	37 1e       	adc	r3, r23
     408:	35 01       	movw	r6, r10
     40a:	46 01       	movw	r8, r12
     40c:	06 2e       	mov	r0, r22
     40e:	04 c0       	rjmp	.+8      	; 0x418 <_fpadd_parts+0x132>
     410:	96 94       	lsr	r9
     412:	87 94       	ror	r8
     414:	77 94       	ror	r7
     416:	67 94       	ror	r6
     418:	0a 94       	dec	r0
     41a:	d2 f7       	brpl	.-12     	; 0x410 <_fpadd_parts+0x12a>
     41c:	21 e0       	ldi	r18, 0x01	; 1
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	40 e0       	ldi	r20, 0x00	; 0
     422:	50 e0       	ldi	r21, 0x00	; 0
     424:	04 c0       	rjmp	.+8      	; 0x42e <_fpadd_parts+0x148>
     426:	22 0f       	add	r18, r18
     428:	33 1f       	adc	r19, r19
     42a:	44 1f       	adc	r20, r20
     42c:	55 1f       	adc	r21, r21
     42e:	6a 95       	dec	r22
     430:	d2 f7       	brpl	.-12     	; 0x426 <_fpadd_parts+0x140>
     432:	21 50       	subi	r18, 0x01	; 1
     434:	30 40       	sbci	r19, 0x00	; 0
     436:	40 40       	sbci	r20, 0x00	; 0
     438:	50 40       	sbci	r21, 0x00	; 0
     43a:	2a 21       	and	r18, r10
     43c:	3b 21       	and	r19, r11
     43e:	4c 21       	and	r20, r12
     440:	5d 21       	and	r21, r13
     442:	21 15       	cp	r18, r1
     444:	31 05       	cpc	r19, r1
     446:	41 05       	cpc	r20, r1
     448:	51 05       	cpc	r21, r1
     44a:	21 f0       	breq	.+8      	; 0x454 <_fpadd_parts+0x16e>
     44c:	21 e0       	ldi	r18, 0x01	; 1
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	40 e0       	ldi	r20, 0x00	; 0
     452:	50 e0       	ldi	r21, 0x00	; 0
     454:	59 01       	movw	r10, r18
     456:	6a 01       	movw	r12, r20
     458:	a6 28       	or	r10, r6
     45a:	b7 28       	or	r11, r7
     45c:	c8 28       	or	r12, r8
     45e:	d9 28       	or	r13, r9
     460:	0b c0       	rjmp	.+22     	; 0x478 <_fpadd_parts+0x192>
     462:	82 15       	cp	r24, r2
     464:	93 05       	cpc	r25, r3
     466:	2c f0       	brlt	.+10     	; 0x472 <_fpadd_parts+0x18c>
     468:	1c 01       	movw	r2, r24
     46a:	aa 24       	eor	r10, r10
     46c:	bb 24       	eor	r11, r11
     46e:	65 01       	movw	r12, r10
     470:	03 c0       	rjmp	.+6      	; 0x478 <_fpadd_parts+0x192>
     472:	ee 24       	eor	r14, r14
     474:	ff 24       	eor	r15, r15
     476:	87 01       	movw	r16, r14
     478:	11 96       	adiw	r26, 0x01	; 1
     47a:	9c 91       	ld	r25, X
     47c:	d2 01       	movw	r26, r4
     47e:	11 96       	adiw	r26, 0x01	; 1
     480:	8c 91       	ld	r24, X
     482:	98 17       	cp	r25, r24
     484:	09 f4       	brne	.+2      	; 0x488 <_fpadd_parts+0x1a2>
     486:	45 c0       	rjmp	.+138    	; 0x512 <_fpadd_parts+0x22c>
     488:	99 23       	and	r25, r25
     48a:	39 f0       	breq	.+14     	; 0x49a <_fpadd_parts+0x1b4>
     48c:	a8 01       	movw	r20, r16
     48e:	97 01       	movw	r18, r14
     490:	2a 19       	sub	r18, r10
     492:	3b 09       	sbc	r19, r11
     494:	4c 09       	sbc	r20, r12
     496:	5d 09       	sbc	r21, r13
     498:	06 c0       	rjmp	.+12     	; 0x4a6 <_fpadd_parts+0x1c0>
     49a:	a6 01       	movw	r20, r12
     49c:	95 01       	movw	r18, r10
     49e:	2e 19       	sub	r18, r14
     4a0:	3f 09       	sbc	r19, r15
     4a2:	40 0b       	sbc	r20, r16
     4a4:	51 0b       	sbc	r21, r17
     4a6:	57 fd       	sbrc	r21, 7
     4a8:	08 c0       	rjmp	.+16     	; 0x4ba <_fpadd_parts+0x1d4>
     4aa:	11 82       	std	Z+1, r1	; 0x01
     4ac:	33 82       	std	Z+3, r3	; 0x03
     4ae:	22 82       	std	Z+2, r2	; 0x02
     4b0:	24 83       	std	Z+4, r18	; 0x04
     4b2:	35 83       	std	Z+5, r19	; 0x05
     4b4:	46 83       	std	Z+6, r20	; 0x06
     4b6:	57 83       	std	Z+7, r21	; 0x07
     4b8:	1d c0       	rjmp	.+58     	; 0x4f4 <_fpadd_parts+0x20e>
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	81 83       	std	Z+1, r24	; 0x01
     4be:	33 82       	std	Z+3, r3	; 0x03
     4c0:	22 82       	std	Z+2, r2	; 0x02
     4c2:	88 27       	eor	r24, r24
     4c4:	99 27       	eor	r25, r25
     4c6:	dc 01       	movw	r26, r24
     4c8:	82 1b       	sub	r24, r18
     4ca:	93 0b       	sbc	r25, r19
     4cc:	a4 0b       	sbc	r26, r20
     4ce:	b5 0b       	sbc	r27, r21
     4d0:	84 83       	std	Z+4, r24	; 0x04
     4d2:	95 83       	std	Z+5, r25	; 0x05
     4d4:	a6 83       	std	Z+6, r26	; 0x06
     4d6:	b7 83       	std	Z+7, r27	; 0x07
     4d8:	0d c0       	rjmp	.+26     	; 0x4f4 <_fpadd_parts+0x20e>
     4da:	22 0f       	add	r18, r18
     4dc:	33 1f       	adc	r19, r19
     4de:	44 1f       	adc	r20, r20
     4e0:	55 1f       	adc	r21, r21
     4e2:	24 83       	std	Z+4, r18	; 0x04
     4e4:	35 83       	std	Z+5, r19	; 0x05
     4e6:	46 83       	std	Z+6, r20	; 0x06
     4e8:	57 83       	std	Z+7, r21	; 0x07
     4ea:	82 81       	ldd	r24, Z+2	; 0x02
     4ec:	93 81       	ldd	r25, Z+3	; 0x03
     4ee:	01 97       	sbiw	r24, 0x01	; 1
     4f0:	93 83       	std	Z+3, r25	; 0x03
     4f2:	82 83       	std	Z+2, r24	; 0x02
     4f4:	24 81       	ldd	r18, Z+4	; 0x04
     4f6:	35 81       	ldd	r19, Z+5	; 0x05
     4f8:	46 81       	ldd	r20, Z+6	; 0x06
     4fa:	57 81       	ldd	r21, Z+7	; 0x07
     4fc:	da 01       	movw	r26, r20
     4fe:	c9 01       	movw	r24, r18
     500:	01 97       	sbiw	r24, 0x01	; 1
     502:	a1 09       	sbc	r26, r1
     504:	b1 09       	sbc	r27, r1
     506:	8f 5f       	subi	r24, 0xFF	; 255
     508:	9f 4f       	sbci	r25, 0xFF	; 255
     50a:	af 4f       	sbci	r26, 0xFF	; 255
     50c:	bf 43       	sbci	r27, 0x3F	; 63
     50e:	28 f3       	brcs	.-54     	; 0x4da <_fpadd_parts+0x1f4>
     510:	0b c0       	rjmp	.+22     	; 0x528 <_fpadd_parts+0x242>
     512:	91 83       	std	Z+1, r25	; 0x01
     514:	33 82       	std	Z+3, r3	; 0x03
     516:	22 82       	std	Z+2, r2	; 0x02
     518:	ea 0c       	add	r14, r10
     51a:	fb 1c       	adc	r15, r11
     51c:	0c 1d       	adc	r16, r12
     51e:	1d 1d       	adc	r17, r13
     520:	e4 82       	std	Z+4, r14	; 0x04
     522:	f5 82       	std	Z+5, r15	; 0x05
     524:	06 83       	std	Z+6, r16	; 0x06
     526:	17 83       	std	Z+7, r17	; 0x07
     528:	83 e0       	ldi	r24, 0x03	; 3
     52a:	80 83       	st	Z, r24
     52c:	24 81       	ldd	r18, Z+4	; 0x04
     52e:	35 81       	ldd	r19, Z+5	; 0x05
     530:	46 81       	ldd	r20, Z+6	; 0x06
     532:	57 81       	ldd	r21, Z+7	; 0x07
     534:	57 ff       	sbrs	r21, 7
     536:	1a c0       	rjmp	.+52     	; 0x56c <_fpadd_parts+0x286>
     538:	c9 01       	movw	r24, r18
     53a:	aa 27       	eor	r26, r26
     53c:	97 fd       	sbrc	r25, 7
     53e:	a0 95       	com	r26
     540:	ba 2f       	mov	r27, r26
     542:	81 70       	andi	r24, 0x01	; 1
     544:	90 70       	andi	r25, 0x00	; 0
     546:	a0 70       	andi	r26, 0x00	; 0
     548:	b0 70       	andi	r27, 0x00	; 0
     54a:	56 95       	lsr	r21
     54c:	47 95       	ror	r20
     54e:	37 95       	ror	r19
     550:	27 95       	ror	r18
     552:	82 2b       	or	r24, r18
     554:	93 2b       	or	r25, r19
     556:	a4 2b       	or	r26, r20
     558:	b5 2b       	or	r27, r21
     55a:	84 83       	std	Z+4, r24	; 0x04
     55c:	95 83       	std	Z+5, r25	; 0x05
     55e:	a6 83       	std	Z+6, r26	; 0x06
     560:	b7 83       	std	Z+7, r27	; 0x07
     562:	82 81       	ldd	r24, Z+2	; 0x02
     564:	93 81       	ldd	r25, Z+3	; 0x03
     566:	01 96       	adiw	r24, 0x01	; 1
     568:	93 83       	std	Z+3, r25	; 0x03
     56a:	82 83       	std	Z+2, r24	; 0x02
     56c:	df 01       	movw	r26, r30
     56e:	01 c0       	rjmp	.+2      	; 0x572 <_fpadd_parts+0x28c>
     570:	d2 01       	movw	r26, r4
     572:	cd 01       	movw	r24, r26
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
     578:	e2 e1       	ldi	r30, 0x12	; 18
     57a:	0c 94 cd 30 	jmp	0x619a	; 0x619a <__epilogue_restores__>

0000057e <__subsf3>:
     57e:	a0 e2       	ldi	r26, 0x20	; 32
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	e5 ec       	ldi	r30, 0xC5	; 197
     584:	f2 e0       	ldi	r31, 0x02	; 2
     586:	0c 94 bd 30 	jmp	0x617a	; 0x617a <__prologue_saves__+0x18>
     58a:	69 83       	std	Y+1, r22	; 0x01
     58c:	7a 83       	std	Y+2, r23	; 0x02
     58e:	8b 83       	std	Y+3, r24	; 0x03
     590:	9c 83       	std	Y+4, r25	; 0x04
     592:	2d 83       	std	Y+5, r18	; 0x05
     594:	3e 83       	std	Y+6, r19	; 0x06
     596:	4f 83       	std	Y+7, r20	; 0x07
     598:	58 87       	std	Y+8, r21	; 0x08
     59a:	e9 e0       	ldi	r30, 0x09	; 9
     59c:	ee 2e       	mov	r14, r30
     59e:	f1 2c       	mov	r15, r1
     5a0:	ec 0e       	add	r14, r28
     5a2:	fd 1e       	adc	r15, r29
     5a4:	ce 01       	movw	r24, r28
     5a6:	01 96       	adiw	r24, 0x01	; 1
     5a8:	b7 01       	movw	r22, r14
     5aa:	0e 94 56 07 	call	0xeac	; 0xeac <__unpack_f>
     5ae:	8e 01       	movw	r16, r28
     5b0:	0f 5e       	subi	r16, 0xEF	; 239
     5b2:	1f 4f       	sbci	r17, 0xFF	; 255
     5b4:	ce 01       	movw	r24, r28
     5b6:	05 96       	adiw	r24, 0x05	; 5
     5b8:	b8 01       	movw	r22, r16
     5ba:	0e 94 56 07 	call	0xeac	; 0xeac <__unpack_f>
     5be:	8a 89       	ldd	r24, Y+18	; 0x12
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	89 27       	eor	r24, r25
     5c4:	8a 8b       	std	Y+18, r24	; 0x12
     5c6:	c7 01       	movw	r24, r14
     5c8:	b8 01       	movw	r22, r16
     5ca:	ae 01       	movw	r20, r28
     5cc:	47 5e       	subi	r20, 0xE7	; 231
     5ce:	5f 4f       	sbci	r21, 0xFF	; 255
     5d0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <_fpadd_parts>
     5d4:	0e 94 81 06 	call	0xd02	; 0xd02 <__pack_f>
     5d8:	a0 96       	adiw	r28, 0x20	; 32
     5da:	e6 e0       	ldi	r30, 0x06	; 6
     5dc:	0c 94 d9 30 	jmp	0x61b2	; 0x61b2 <__epilogue_restores__+0x18>

000005e0 <__addsf3>:
     5e0:	a0 e2       	ldi	r26, 0x20	; 32
     5e2:	b0 e0       	ldi	r27, 0x00	; 0
     5e4:	e6 ef       	ldi	r30, 0xF6	; 246
     5e6:	f2 e0       	ldi	r31, 0x02	; 2
     5e8:	0c 94 bd 30 	jmp	0x617a	; 0x617a <__prologue_saves__+0x18>
     5ec:	69 83       	std	Y+1, r22	; 0x01
     5ee:	7a 83       	std	Y+2, r23	; 0x02
     5f0:	8b 83       	std	Y+3, r24	; 0x03
     5f2:	9c 83       	std	Y+4, r25	; 0x04
     5f4:	2d 83       	std	Y+5, r18	; 0x05
     5f6:	3e 83       	std	Y+6, r19	; 0x06
     5f8:	4f 83       	std	Y+7, r20	; 0x07
     5fa:	58 87       	std	Y+8, r21	; 0x08
     5fc:	f9 e0       	ldi	r31, 0x09	; 9
     5fe:	ef 2e       	mov	r14, r31
     600:	f1 2c       	mov	r15, r1
     602:	ec 0e       	add	r14, r28
     604:	fd 1e       	adc	r15, r29
     606:	ce 01       	movw	r24, r28
     608:	01 96       	adiw	r24, 0x01	; 1
     60a:	b7 01       	movw	r22, r14
     60c:	0e 94 56 07 	call	0xeac	; 0xeac <__unpack_f>
     610:	8e 01       	movw	r16, r28
     612:	0f 5e       	subi	r16, 0xEF	; 239
     614:	1f 4f       	sbci	r17, 0xFF	; 255
     616:	ce 01       	movw	r24, r28
     618:	05 96       	adiw	r24, 0x05	; 5
     61a:	b8 01       	movw	r22, r16
     61c:	0e 94 56 07 	call	0xeac	; 0xeac <__unpack_f>
     620:	c7 01       	movw	r24, r14
     622:	b8 01       	movw	r22, r16
     624:	ae 01       	movw	r20, r28
     626:	47 5e       	subi	r20, 0xE7	; 231
     628:	5f 4f       	sbci	r21, 0xFF	; 255
     62a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <_fpadd_parts>
     62e:	0e 94 81 06 	call	0xd02	; 0xd02 <__pack_f>
     632:	a0 96       	adiw	r28, 0x20	; 32
     634:	e6 e0       	ldi	r30, 0x06	; 6
     636:	0c 94 d9 30 	jmp	0x61b2	; 0x61b2 <__epilogue_restores__+0x18>

0000063a <__mulsf3>:
     63a:	a0 e2       	ldi	r26, 0x20	; 32
     63c:	b0 e0       	ldi	r27, 0x00	; 0
     63e:	e3 e2       	ldi	r30, 0x23	; 35
     640:	f3 e0       	ldi	r31, 0x03	; 3
     642:	0c 94 b1 30 	jmp	0x6162	; 0x6162 <__prologue_saves__>
     646:	69 83       	std	Y+1, r22	; 0x01
     648:	7a 83       	std	Y+2, r23	; 0x02
     64a:	8b 83       	std	Y+3, r24	; 0x03
     64c:	9c 83       	std	Y+4, r25	; 0x04
     64e:	2d 83       	std	Y+5, r18	; 0x05
     650:	3e 83       	std	Y+6, r19	; 0x06
     652:	4f 83       	std	Y+7, r20	; 0x07
     654:	58 87       	std	Y+8, r21	; 0x08
     656:	ce 01       	movw	r24, r28
     658:	01 96       	adiw	r24, 0x01	; 1
     65a:	be 01       	movw	r22, r28
     65c:	67 5f       	subi	r22, 0xF7	; 247
     65e:	7f 4f       	sbci	r23, 0xFF	; 255
     660:	0e 94 56 07 	call	0xeac	; 0xeac <__unpack_f>
     664:	ce 01       	movw	r24, r28
     666:	05 96       	adiw	r24, 0x05	; 5
     668:	be 01       	movw	r22, r28
     66a:	6f 5e       	subi	r22, 0xEF	; 239
     66c:	7f 4f       	sbci	r23, 0xFF	; 255
     66e:	0e 94 56 07 	call	0xeac	; 0xeac <__unpack_f>
     672:	99 85       	ldd	r25, Y+9	; 0x09
     674:	92 30       	cpi	r25, 0x02	; 2
     676:	88 f0       	brcs	.+34     	; 0x69a <__mulsf3+0x60>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	c8 f0       	brcs	.+50     	; 0x6b0 <__mulsf3+0x76>
     67e:	94 30       	cpi	r25, 0x04	; 4
     680:	19 f4       	brne	.+6      	; 0x688 <__mulsf3+0x4e>
     682:	82 30       	cpi	r24, 0x02	; 2
     684:	51 f4       	brne	.+20     	; 0x69a <__mulsf3+0x60>
     686:	04 c0       	rjmp	.+8      	; 0x690 <__mulsf3+0x56>
     688:	84 30       	cpi	r24, 0x04	; 4
     68a:	29 f4       	brne	.+10     	; 0x696 <__mulsf3+0x5c>
     68c:	92 30       	cpi	r25, 0x02	; 2
     68e:	81 f4       	brne	.+32     	; 0x6b0 <__mulsf3+0x76>
     690:	80 e6       	ldi	r24, 0x60	; 96
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	c6 c0       	rjmp	.+396    	; 0x822 <__mulsf3+0x1e8>
     696:	92 30       	cpi	r25, 0x02	; 2
     698:	49 f4       	brne	.+18     	; 0x6ac <__mulsf3+0x72>
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	9a 85       	ldd	r25, Y+10	; 0x0a
     69e:	8a 89       	ldd	r24, Y+18	; 0x12
     6a0:	98 13       	cpse	r25, r24
     6a2:	21 e0       	ldi	r18, 0x01	; 1
     6a4:	2a 87       	std	Y+10, r18	; 0x0a
     6a6:	ce 01       	movw	r24, r28
     6a8:	09 96       	adiw	r24, 0x09	; 9
     6aa:	bb c0       	rjmp	.+374    	; 0x822 <__mulsf3+0x1e8>
     6ac:	82 30       	cpi	r24, 0x02	; 2
     6ae:	49 f4       	brne	.+18     	; 0x6c2 <__mulsf3+0x88>
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     6b4:	8a 89       	ldd	r24, Y+18	; 0x12
     6b6:	98 13       	cpse	r25, r24
     6b8:	21 e0       	ldi	r18, 0x01	; 1
     6ba:	2a 8b       	std	Y+18, r18	; 0x12
     6bc:	ce 01       	movw	r24, r28
     6be:	41 96       	adiw	r24, 0x11	; 17
     6c0:	b0 c0       	rjmp	.+352    	; 0x822 <__mulsf3+0x1e8>
     6c2:	2d 84       	ldd	r2, Y+13	; 0x0d
     6c4:	3e 84       	ldd	r3, Y+14	; 0x0e
     6c6:	4f 84       	ldd	r4, Y+15	; 0x0f
     6c8:	58 88       	ldd	r5, Y+16	; 0x10
     6ca:	6d 88       	ldd	r6, Y+21	; 0x15
     6cc:	7e 88       	ldd	r7, Y+22	; 0x16
     6ce:	8f 88       	ldd	r8, Y+23	; 0x17
     6d0:	98 8c       	ldd	r9, Y+24	; 0x18
     6d2:	ee 24       	eor	r14, r14
     6d4:	ff 24       	eor	r15, r15
     6d6:	87 01       	movw	r16, r14
     6d8:	aa 24       	eor	r10, r10
     6da:	bb 24       	eor	r11, r11
     6dc:	65 01       	movw	r12, r10
     6de:	40 e0       	ldi	r20, 0x00	; 0
     6e0:	50 e0       	ldi	r21, 0x00	; 0
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	e0 e0       	ldi	r30, 0x00	; 0
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	c1 01       	movw	r24, r2
     6ec:	81 70       	andi	r24, 0x01	; 1
     6ee:	90 70       	andi	r25, 0x00	; 0
     6f0:	89 2b       	or	r24, r25
     6f2:	e9 f0       	breq	.+58     	; 0x72e <__mulsf3+0xf4>
     6f4:	e6 0c       	add	r14, r6
     6f6:	f7 1c       	adc	r15, r7
     6f8:	08 1d       	adc	r16, r8
     6fa:	19 1d       	adc	r17, r9
     6fc:	9a 01       	movw	r18, r20
     6fe:	ab 01       	movw	r20, r22
     700:	2a 0d       	add	r18, r10
     702:	3b 1d       	adc	r19, r11
     704:	4c 1d       	adc	r20, r12
     706:	5d 1d       	adc	r21, r13
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	a0 e0       	ldi	r26, 0x00	; 0
     70e:	b0 e0       	ldi	r27, 0x00	; 0
     710:	e6 14       	cp	r14, r6
     712:	f7 04       	cpc	r15, r7
     714:	08 05       	cpc	r16, r8
     716:	19 05       	cpc	r17, r9
     718:	20 f4       	brcc	.+8      	; 0x722 <__mulsf3+0xe8>
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	a0 e0       	ldi	r26, 0x00	; 0
     720:	b0 e0       	ldi	r27, 0x00	; 0
     722:	ba 01       	movw	r22, r20
     724:	a9 01       	movw	r20, r18
     726:	48 0f       	add	r20, r24
     728:	59 1f       	adc	r21, r25
     72a:	6a 1f       	adc	r22, r26
     72c:	7b 1f       	adc	r23, r27
     72e:	aa 0c       	add	r10, r10
     730:	bb 1c       	adc	r11, r11
     732:	cc 1c       	adc	r12, r12
     734:	dd 1c       	adc	r13, r13
     736:	97 fe       	sbrs	r9, 7
     738:	08 c0       	rjmp	.+16     	; 0x74a <__mulsf3+0x110>
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	a0 e0       	ldi	r26, 0x00	; 0
     740:	b0 e0       	ldi	r27, 0x00	; 0
     742:	a8 2a       	or	r10, r24
     744:	b9 2a       	or	r11, r25
     746:	ca 2a       	or	r12, r26
     748:	db 2a       	or	r13, r27
     74a:	31 96       	adiw	r30, 0x01	; 1
     74c:	e0 32       	cpi	r30, 0x20	; 32
     74e:	f1 05       	cpc	r31, r1
     750:	49 f0       	breq	.+18     	; 0x764 <__mulsf3+0x12a>
     752:	66 0c       	add	r6, r6
     754:	77 1c       	adc	r7, r7
     756:	88 1c       	adc	r8, r8
     758:	99 1c       	adc	r9, r9
     75a:	56 94       	lsr	r5
     75c:	47 94       	ror	r4
     75e:	37 94       	ror	r3
     760:	27 94       	ror	r2
     762:	c3 cf       	rjmp	.-122    	; 0x6ea <__mulsf3+0xb0>
     764:	fa 85       	ldd	r31, Y+10	; 0x0a
     766:	ea 89       	ldd	r30, Y+18	; 0x12
     768:	2b 89       	ldd	r18, Y+19	; 0x13
     76a:	3c 89       	ldd	r19, Y+20	; 0x14
     76c:	8b 85       	ldd	r24, Y+11	; 0x0b
     76e:	9c 85       	ldd	r25, Y+12	; 0x0c
     770:	28 0f       	add	r18, r24
     772:	39 1f       	adc	r19, r25
     774:	2e 5f       	subi	r18, 0xFE	; 254
     776:	3f 4f       	sbci	r19, 0xFF	; 255
     778:	17 c0       	rjmp	.+46     	; 0x7a8 <__mulsf3+0x16e>
     77a:	ca 01       	movw	r24, r20
     77c:	81 70       	andi	r24, 0x01	; 1
     77e:	90 70       	andi	r25, 0x00	; 0
     780:	89 2b       	or	r24, r25
     782:	61 f0       	breq	.+24     	; 0x79c <__mulsf3+0x162>
     784:	16 95       	lsr	r17
     786:	07 95       	ror	r16
     788:	f7 94       	ror	r15
     78a:	e7 94       	ror	r14
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	a0 e0       	ldi	r26, 0x00	; 0
     792:	b0 e8       	ldi	r27, 0x80	; 128
     794:	e8 2a       	or	r14, r24
     796:	f9 2a       	or	r15, r25
     798:	0a 2b       	or	r16, r26
     79a:	1b 2b       	or	r17, r27
     79c:	76 95       	lsr	r23
     79e:	67 95       	ror	r22
     7a0:	57 95       	ror	r21
     7a2:	47 95       	ror	r20
     7a4:	2f 5f       	subi	r18, 0xFF	; 255
     7a6:	3f 4f       	sbci	r19, 0xFF	; 255
     7a8:	77 fd       	sbrc	r23, 7
     7aa:	e7 cf       	rjmp	.-50     	; 0x77a <__mulsf3+0x140>
     7ac:	0c c0       	rjmp	.+24     	; 0x7c6 <__mulsf3+0x18c>
     7ae:	44 0f       	add	r20, r20
     7b0:	55 1f       	adc	r21, r21
     7b2:	66 1f       	adc	r22, r22
     7b4:	77 1f       	adc	r23, r23
     7b6:	17 fd       	sbrc	r17, 7
     7b8:	41 60       	ori	r20, 0x01	; 1
     7ba:	ee 0c       	add	r14, r14
     7bc:	ff 1c       	adc	r15, r15
     7be:	00 1f       	adc	r16, r16
     7c0:	11 1f       	adc	r17, r17
     7c2:	21 50       	subi	r18, 0x01	; 1
     7c4:	30 40       	sbci	r19, 0x00	; 0
     7c6:	40 30       	cpi	r20, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	59 07       	cpc	r21, r25
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	69 07       	cpc	r22, r25
     7d0:	90 e4       	ldi	r25, 0x40	; 64
     7d2:	79 07       	cpc	r23, r25
     7d4:	60 f3       	brcs	.-40     	; 0x7ae <__mulsf3+0x174>
     7d6:	2b 8f       	std	Y+27, r18	; 0x1b
     7d8:	3c 8f       	std	Y+28, r19	; 0x1c
     7da:	db 01       	movw	r26, r22
     7dc:	ca 01       	movw	r24, r20
     7de:	8f 77       	andi	r24, 0x7F	; 127
     7e0:	90 70       	andi	r25, 0x00	; 0
     7e2:	a0 70       	andi	r26, 0x00	; 0
     7e4:	b0 70       	andi	r27, 0x00	; 0
     7e6:	80 34       	cpi	r24, 0x40	; 64
     7e8:	91 05       	cpc	r25, r1
     7ea:	a1 05       	cpc	r26, r1
     7ec:	b1 05       	cpc	r27, r1
     7ee:	61 f4       	brne	.+24     	; 0x808 <__mulsf3+0x1ce>
     7f0:	47 fd       	sbrc	r20, 7
     7f2:	0a c0       	rjmp	.+20     	; 0x808 <__mulsf3+0x1ce>
     7f4:	e1 14       	cp	r14, r1
     7f6:	f1 04       	cpc	r15, r1
     7f8:	01 05       	cpc	r16, r1
     7fa:	11 05       	cpc	r17, r1
     7fc:	29 f0       	breq	.+10     	; 0x808 <__mulsf3+0x1ce>
     7fe:	40 5c       	subi	r20, 0xC0	; 192
     800:	5f 4f       	sbci	r21, 0xFF	; 255
     802:	6f 4f       	sbci	r22, 0xFF	; 255
     804:	7f 4f       	sbci	r23, 0xFF	; 255
     806:	40 78       	andi	r20, 0x80	; 128
     808:	1a 8e       	std	Y+26, r1	; 0x1a
     80a:	fe 17       	cp	r31, r30
     80c:	11 f0       	breq	.+4      	; 0x812 <__mulsf3+0x1d8>
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	8a 8f       	std	Y+26, r24	; 0x1a
     812:	4d 8f       	std	Y+29, r20	; 0x1d
     814:	5e 8f       	std	Y+30, r21	; 0x1e
     816:	6f 8f       	std	Y+31, r22	; 0x1f
     818:	78 a3       	std	Y+32, r23	; 0x20
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 8f       	std	Y+25, r24	; 0x19
     81e:	ce 01       	movw	r24, r28
     820:	49 96       	adiw	r24, 0x19	; 25
     822:	0e 94 81 06 	call	0xd02	; 0xd02 <__pack_f>
     826:	a0 96       	adiw	r28, 0x20	; 32
     828:	e2 e1       	ldi	r30, 0x12	; 18
     82a:	0c 94 cd 30 	jmp	0x619a	; 0x619a <__epilogue_restores__>

0000082e <__eqsf2>:
     82e:	a8 e1       	ldi	r26, 0x18	; 24
     830:	b0 e0       	ldi	r27, 0x00	; 0
     832:	ed e1       	ldi	r30, 0x1D	; 29
     834:	f4 e0       	ldi	r31, 0x04	; 4
     836:	0c 94 bd 30 	jmp	0x617a	; 0x617a <__prologue_saves__+0x18>
     83a:	69 83       	std	Y+1, r22	; 0x01
     83c:	7a 83       	std	Y+2, r23	; 0x02
     83e:	8b 83       	std	Y+3, r24	; 0x03
     840:	9c 83       	std	Y+4, r25	; 0x04
     842:	2d 83       	std	Y+5, r18	; 0x05
     844:	3e 83       	std	Y+6, r19	; 0x06
     846:	4f 83       	std	Y+7, r20	; 0x07
     848:	58 87       	std	Y+8, r21	; 0x08
     84a:	89 e0       	ldi	r24, 0x09	; 9
     84c:	e8 2e       	mov	r14, r24
     84e:	f1 2c       	mov	r15, r1
     850:	ec 0e       	add	r14, r28
     852:	fd 1e       	adc	r15, r29
     854:	ce 01       	movw	r24, r28
     856:	01 96       	adiw	r24, 0x01	; 1
     858:	b7 01       	movw	r22, r14
     85a:	0e 94 56 07 	call	0xeac	; 0xeac <__unpack_f>
     85e:	8e 01       	movw	r16, r28
     860:	0f 5e       	subi	r16, 0xEF	; 239
     862:	1f 4f       	sbci	r17, 0xFF	; 255
     864:	ce 01       	movw	r24, r28
     866:	05 96       	adiw	r24, 0x05	; 5
     868:	b8 01       	movw	r22, r16
     86a:	0e 94 56 07 	call	0xeac	; 0xeac <__unpack_f>
     86e:	89 85       	ldd	r24, Y+9	; 0x09
     870:	82 30       	cpi	r24, 0x02	; 2
     872:	40 f0       	brcs	.+16     	; 0x884 <__stack+0x25>
     874:	89 89       	ldd	r24, Y+17	; 0x11
     876:	82 30       	cpi	r24, 0x02	; 2
     878:	28 f0       	brcs	.+10     	; 0x884 <__stack+0x25>
     87a:	c7 01       	movw	r24, r14
     87c:	b8 01       	movw	r22, r16
     87e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__fpcmp_parts_f>
     882:	01 c0       	rjmp	.+2      	; 0x886 <__stack+0x27>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	68 96       	adiw	r28, 0x18	; 24
     888:	e6 e0       	ldi	r30, 0x06	; 6
     88a:	0c 94 d9 30 	jmp	0x61b2	; 0x61b2 <__epilogue_restores__+0x18>

0000088e <__nesf2>:
     88e:	a8 e1       	ldi	r26, 0x18	; 24
     890:	b0 e0       	ldi	r27, 0x00	; 0
     892:	ed e4       	ldi	r30, 0x4D	; 77
     894:	f4 e0       	ldi	r31, 0x04	; 4
     896:	0c 94 bd 30 	jmp	0x617a	; 0x617a <__prologue_saves__+0x18>
     89a:	69 83       	std	Y+1, r22	; 0x01
     89c:	7a 83       	std	Y+2, r23	; 0x02
     89e:	8b 83       	std	Y+3, r24	; 0x03
     8a0:	9c 83       	std	Y+4, r25	; 0x04
     8a2:	2d 83       	std	Y+5, r18	; 0x05
     8a4:	3e 83       	std	Y+6, r19	; 0x06
     8a6:	4f 83       	std	Y+7, r20	; 0x07
     8a8:	58 87       	std	Y+8, r21	; 0x08
     8aa:	89 e0       	ldi	r24, 0x09	; 9
     8ac:	e8 2e       	mov	r14, r24
     8ae:	f1 2c       	mov	r15, r1
     8b0:	ec 0e       	add	r14, r28
     8b2:	fd 1e       	adc	r15, r29
     8b4:	ce 01       	movw	r24, r28
     8b6:	01 96       	adiw	r24, 0x01	; 1
     8b8:	b7 01       	movw	r22, r14
     8ba:	0e 94 56 07 	call	0xeac	; 0xeac <__unpack_f>
     8be:	8e 01       	movw	r16, r28
     8c0:	0f 5e       	subi	r16, 0xEF	; 239
     8c2:	1f 4f       	sbci	r17, 0xFF	; 255
     8c4:	ce 01       	movw	r24, r28
     8c6:	05 96       	adiw	r24, 0x05	; 5
     8c8:	b8 01       	movw	r22, r16
     8ca:	0e 94 56 07 	call	0xeac	; 0xeac <__unpack_f>
     8ce:	89 85       	ldd	r24, Y+9	; 0x09
     8d0:	82 30       	cpi	r24, 0x02	; 2
     8d2:	40 f0       	brcs	.+16     	; 0x8e4 <__nesf2+0x56>
     8d4:	89 89       	ldd	r24, Y+17	; 0x11
     8d6:	82 30       	cpi	r24, 0x02	; 2
     8d8:	28 f0       	brcs	.+10     	; 0x8e4 <__nesf2+0x56>
     8da:	c7 01       	movw	r24, r14
     8dc:	b8 01       	movw	r22, r16
     8de:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__fpcmp_parts_f>
     8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <__nesf2+0x58>
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	68 96       	adiw	r28, 0x18	; 24
     8e8:	e6 e0       	ldi	r30, 0x06	; 6
     8ea:	0c 94 d9 30 	jmp	0x61b2	; 0x61b2 <__epilogue_restores__+0x18>

000008ee <__gtsf2>:
     8ee:	a8 e1       	ldi	r26, 0x18	; 24
     8f0:	b0 e0       	ldi	r27, 0x00	; 0
     8f2:	ed e7       	ldi	r30, 0x7D	; 125
     8f4:	f4 e0       	ldi	r31, 0x04	; 4
     8f6:	0c 94 bd 30 	jmp	0x617a	; 0x617a <__prologue_saves__+0x18>
     8fa:	69 83       	std	Y+1, r22	; 0x01
     8fc:	7a 83       	std	Y+2, r23	; 0x02
     8fe:	8b 83       	std	Y+3, r24	; 0x03
     900:	9c 83       	std	Y+4, r25	; 0x04
     902:	2d 83       	std	Y+5, r18	; 0x05
     904:	3e 83       	std	Y+6, r19	; 0x06
     906:	4f 83       	std	Y+7, r20	; 0x07
     908:	58 87       	std	Y+8, r21	; 0x08
     90a:	89 e0       	ldi	r24, 0x09	; 9
     90c:	e8 2e       	mov	r14, r24
     90e:	f1 2c       	mov	r15, r1
     910:	ec 0e       	add	r14, r28
     912:	fd 1e       	adc	r15, r29
     914:	ce 01       	movw	r24, r28
     916:	01 96       	adiw	r24, 0x01	; 1
     918:	b7 01       	movw	r22, r14
     91a:	0e 94 56 07 	call	0xeac	; 0xeac <__unpack_f>
     91e:	8e 01       	movw	r16, r28
     920:	0f 5e       	subi	r16, 0xEF	; 239
     922:	1f 4f       	sbci	r17, 0xFF	; 255
     924:	ce 01       	movw	r24, r28
     926:	05 96       	adiw	r24, 0x05	; 5
     928:	b8 01       	movw	r22, r16
     92a:	0e 94 56 07 	call	0xeac	; 0xeac <__unpack_f>
     92e:	89 85       	ldd	r24, Y+9	; 0x09
     930:	82 30       	cpi	r24, 0x02	; 2
     932:	40 f0       	brcs	.+16     	; 0x944 <__gtsf2+0x56>
     934:	89 89       	ldd	r24, Y+17	; 0x11
     936:	82 30       	cpi	r24, 0x02	; 2
     938:	28 f0       	brcs	.+10     	; 0x944 <__gtsf2+0x56>
     93a:	c7 01       	movw	r24, r14
     93c:	b8 01       	movw	r22, r16
     93e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__fpcmp_parts_f>
     942:	01 c0       	rjmp	.+2      	; 0x946 <__gtsf2+0x58>
     944:	8f ef       	ldi	r24, 0xFF	; 255
     946:	68 96       	adiw	r28, 0x18	; 24
     948:	e6 e0       	ldi	r30, 0x06	; 6
     94a:	0c 94 d9 30 	jmp	0x61b2	; 0x61b2 <__epilogue_restores__+0x18>

0000094e <__gesf2>:
     94e:	a8 e1       	ldi	r26, 0x18	; 24
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	ed ea       	ldi	r30, 0xAD	; 173
     954:	f4 e0       	ldi	r31, 0x04	; 4
     956:	0c 94 bd 30 	jmp	0x617a	; 0x617a <__prologue_saves__+0x18>
     95a:	69 83       	std	Y+1, r22	; 0x01
     95c:	7a 83       	std	Y+2, r23	; 0x02
     95e:	8b 83       	std	Y+3, r24	; 0x03
     960:	9c 83       	std	Y+4, r25	; 0x04
     962:	2d 83       	std	Y+5, r18	; 0x05
     964:	3e 83       	std	Y+6, r19	; 0x06
     966:	4f 83       	std	Y+7, r20	; 0x07
     968:	58 87       	std	Y+8, r21	; 0x08
     96a:	89 e0       	ldi	r24, 0x09	; 9
     96c:	e8 2e       	mov	r14, r24
     96e:	f1 2c       	mov	r15, r1
     970:	ec 0e       	add	r14, r28
     972:	fd 1e       	adc	r15, r29
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	b7 01       	movw	r22, r14
     97a:	0e 94 56 07 	call	0xeac	; 0xeac <__unpack_f>
     97e:	8e 01       	movw	r16, r28
     980:	0f 5e       	subi	r16, 0xEF	; 239
     982:	1f 4f       	sbci	r17, 0xFF	; 255
     984:	ce 01       	movw	r24, r28
     986:	05 96       	adiw	r24, 0x05	; 5
     988:	b8 01       	movw	r22, r16
     98a:	0e 94 56 07 	call	0xeac	; 0xeac <__unpack_f>
     98e:	89 85       	ldd	r24, Y+9	; 0x09
     990:	82 30       	cpi	r24, 0x02	; 2
     992:	40 f0       	brcs	.+16     	; 0x9a4 <__gesf2+0x56>
     994:	89 89       	ldd	r24, Y+17	; 0x11
     996:	82 30       	cpi	r24, 0x02	; 2
     998:	28 f0       	brcs	.+10     	; 0x9a4 <__gesf2+0x56>
     99a:	c7 01       	movw	r24, r14
     99c:	b8 01       	movw	r22, r16
     99e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__fpcmp_parts_f>
     9a2:	01 c0       	rjmp	.+2      	; 0x9a6 <__gesf2+0x58>
     9a4:	8f ef       	ldi	r24, 0xFF	; 255
     9a6:	68 96       	adiw	r28, 0x18	; 24
     9a8:	e6 e0       	ldi	r30, 0x06	; 6
     9aa:	0c 94 d9 30 	jmp	0x61b2	; 0x61b2 <__epilogue_restores__+0x18>

000009ae <__ltsf2>:
     9ae:	a8 e1       	ldi	r26, 0x18	; 24
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	ed ed       	ldi	r30, 0xDD	; 221
     9b4:	f4 e0       	ldi	r31, 0x04	; 4
     9b6:	0c 94 bd 30 	jmp	0x617a	; 0x617a <__prologue_saves__+0x18>
     9ba:	69 83       	std	Y+1, r22	; 0x01
     9bc:	7a 83       	std	Y+2, r23	; 0x02
     9be:	8b 83       	std	Y+3, r24	; 0x03
     9c0:	9c 83       	std	Y+4, r25	; 0x04
     9c2:	2d 83       	std	Y+5, r18	; 0x05
     9c4:	3e 83       	std	Y+6, r19	; 0x06
     9c6:	4f 83       	std	Y+7, r20	; 0x07
     9c8:	58 87       	std	Y+8, r21	; 0x08
     9ca:	89 e0       	ldi	r24, 0x09	; 9
     9cc:	e8 2e       	mov	r14, r24
     9ce:	f1 2c       	mov	r15, r1
     9d0:	ec 0e       	add	r14, r28
     9d2:	fd 1e       	adc	r15, r29
     9d4:	ce 01       	movw	r24, r28
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	b7 01       	movw	r22, r14
     9da:	0e 94 56 07 	call	0xeac	; 0xeac <__unpack_f>
     9de:	8e 01       	movw	r16, r28
     9e0:	0f 5e       	subi	r16, 0xEF	; 239
     9e2:	1f 4f       	sbci	r17, 0xFF	; 255
     9e4:	ce 01       	movw	r24, r28
     9e6:	05 96       	adiw	r24, 0x05	; 5
     9e8:	b8 01       	movw	r22, r16
     9ea:	0e 94 56 07 	call	0xeac	; 0xeac <__unpack_f>
     9ee:	89 85       	ldd	r24, Y+9	; 0x09
     9f0:	82 30       	cpi	r24, 0x02	; 2
     9f2:	40 f0       	brcs	.+16     	; 0xa04 <__ltsf2+0x56>
     9f4:	89 89       	ldd	r24, Y+17	; 0x11
     9f6:	82 30       	cpi	r24, 0x02	; 2
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__ltsf2+0x56>
     9fa:	c7 01       	movw	r24, r14
     9fc:	b8 01       	movw	r22, r16
     9fe:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__fpcmp_parts_f>
     a02:	01 c0       	rjmp	.+2      	; 0xa06 <__ltsf2+0x58>
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	68 96       	adiw	r28, 0x18	; 24
     a08:	e6 e0       	ldi	r30, 0x06	; 6
     a0a:	0c 94 d9 30 	jmp	0x61b2	; 0x61b2 <__epilogue_restores__+0x18>

00000a0e <__floatsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 ba 30 	jmp	0x6174	; 0x6174 <__prologue_saves__+0x12>
     a1a:	9b 01       	movw	r18, r22
     a1c:	ac 01       	movw	r20, r24
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	89 83       	std	Y+1, r24	; 0x01
     a22:	da 01       	movw	r26, r20
     a24:	c9 01       	movw	r24, r18
     a26:	88 27       	eor	r24, r24
     a28:	b7 fd       	sbrc	r27, 7
     a2a:	83 95       	inc	r24
     a2c:	99 27       	eor	r25, r25
     a2e:	aa 27       	eor	r26, r26
     a30:	bb 27       	eor	r27, r27
     a32:	b8 2e       	mov	r11, r24
     a34:	21 15       	cp	r18, r1
     a36:	31 05       	cpc	r19, r1
     a38:	41 05       	cpc	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	19 f4       	brne	.+6      	; 0xa44 <__floatsisf+0x36>
     a3e:	82 e0       	ldi	r24, 0x02	; 2
     a40:	89 83       	std	Y+1, r24	; 0x01
     a42:	3a c0       	rjmp	.+116    	; 0xab8 <__floatsisf+0xaa>
     a44:	88 23       	and	r24, r24
     a46:	a9 f0       	breq	.+42     	; 0xa72 <__floatsisf+0x64>
     a48:	20 30       	cpi	r18, 0x00	; 0
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	38 07       	cpc	r19, r24
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	48 07       	cpc	r20, r24
     a52:	80 e8       	ldi	r24, 0x80	; 128
     a54:	58 07       	cpc	r21, r24
     a56:	29 f4       	brne	.+10     	; 0xa62 <__floatsisf+0x54>
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	9f ec       	ldi	r25, 0xCF	; 207
     a60:	30 c0       	rjmp	.+96     	; 0xac2 <__floatsisf+0xb4>
     a62:	ee 24       	eor	r14, r14
     a64:	ff 24       	eor	r15, r15
     a66:	87 01       	movw	r16, r14
     a68:	e2 1a       	sub	r14, r18
     a6a:	f3 0a       	sbc	r15, r19
     a6c:	04 0b       	sbc	r16, r20
     a6e:	15 0b       	sbc	r17, r21
     a70:	02 c0       	rjmp	.+4      	; 0xa76 <__floatsisf+0x68>
     a72:	79 01       	movw	r14, r18
     a74:	8a 01       	movw	r16, r20
     a76:	8e e1       	ldi	r24, 0x1E	; 30
     a78:	c8 2e       	mov	r12, r24
     a7a:	d1 2c       	mov	r13, r1
     a7c:	dc 82       	std	Y+4, r13	; 0x04
     a7e:	cb 82       	std	Y+3, r12	; 0x03
     a80:	ed 82       	std	Y+5, r14	; 0x05
     a82:	fe 82       	std	Y+6, r15	; 0x06
     a84:	0f 83       	std	Y+7, r16	; 0x07
     a86:	18 87       	std	Y+8, r17	; 0x08
     a88:	c8 01       	movw	r24, r16
     a8a:	b7 01       	movw	r22, r14
     a8c:	0e 94 32 06 	call	0xc64	; 0xc64 <__clzsi2>
     a90:	01 97       	sbiw	r24, 0x01	; 1
     a92:	18 16       	cp	r1, r24
     a94:	19 06       	cpc	r1, r25
     a96:	84 f4       	brge	.+32     	; 0xab8 <__floatsisf+0xaa>
     a98:	08 2e       	mov	r0, r24
     a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <__floatsisf+0x96>
     a9c:	ee 0c       	add	r14, r14
     a9e:	ff 1c       	adc	r15, r15
     aa0:	00 1f       	adc	r16, r16
     aa2:	11 1f       	adc	r17, r17
     aa4:	0a 94       	dec	r0
     aa6:	d2 f7       	brpl	.-12     	; 0xa9c <__floatsisf+0x8e>
     aa8:	ed 82       	std	Y+5, r14	; 0x05
     aaa:	fe 82       	std	Y+6, r15	; 0x06
     aac:	0f 83       	std	Y+7, r16	; 0x07
     aae:	18 87       	std	Y+8, r17	; 0x08
     ab0:	c8 1a       	sub	r12, r24
     ab2:	d9 0a       	sbc	r13, r25
     ab4:	dc 82       	std	Y+4, r13	; 0x04
     ab6:	cb 82       	std	Y+3, r12	; 0x03
     ab8:	ba 82       	std	Y+2, r11	; 0x02
     aba:	ce 01       	movw	r24, r28
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	0e 94 81 06 	call	0xd02	; 0xd02 <__pack_f>
     ac2:	28 96       	adiw	r28, 0x08	; 8
     ac4:	e9 e0       	ldi	r30, 0x09	; 9
     ac6:	0c 94 d6 30 	jmp	0x61ac	; 0x61ac <__epilogue_restores__+0x12>

00000aca <__fixsfsi>:
     aca:	ac e0       	ldi	r26, 0x0C	; 12
     acc:	b0 e0       	ldi	r27, 0x00	; 0
     ace:	eb e6       	ldi	r30, 0x6B	; 107
     ad0:	f5 e0       	ldi	r31, 0x05	; 5
     ad2:	0c 94 c1 30 	jmp	0x6182	; 0x6182 <__prologue_saves__+0x20>
     ad6:	69 83       	std	Y+1, r22	; 0x01
     ad8:	7a 83       	std	Y+2, r23	; 0x02
     ada:	8b 83       	std	Y+3, r24	; 0x03
     adc:	9c 83       	std	Y+4, r25	; 0x04
     ade:	ce 01       	movw	r24, r28
     ae0:	01 96       	adiw	r24, 0x01	; 1
     ae2:	be 01       	movw	r22, r28
     ae4:	6b 5f       	subi	r22, 0xFB	; 251
     ae6:	7f 4f       	sbci	r23, 0xFF	; 255
     ae8:	0e 94 56 07 	call	0xeac	; 0xeac <__unpack_f>
     aec:	8d 81       	ldd	r24, Y+5	; 0x05
     aee:	82 30       	cpi	r24, 0x02	; 2
     af0:	61 f1       	breq	.+88     	; 0xb4a <__fixsfsi+0x80>
     af2:	82 30       	cpi	r24, 0x02	; 2
     af4:	50 f1       	brcs	.+84     	; 0xb4a <__fixsfsi+0x80>
     af6:	84 30       	cpi	r24, 0x04	; 4
     af8:	21 f4       	brne	.+8      	; 0xb02 <__fixsfsi+0x38>
     afa:	8e 81       	ldd	r24, Y+6	; 0x06
     afc:	88 23       	and	r24, r24
     afe:	51 f1       	breq	.+84     	; 0xb54 <__fixsfsi+0x8a>
     b00:	2e c0       	rjmp	.+92     	; 0xb5e <__fixsfsi+0x94>
     b02:	2f 81       	ldd	r18, Y+7	; 0x07
     b04:	38 85       	ldd	r19, Y+8	; 0x08
     b06:	37 fd       	sbrc	r19, 7
     b08:	20 c0       	rjmp	.+64     	; 0xb4a <__fixsfsi+0x80>
     b0a:	6e 81       	ldd	r22, Y+6	; 0x06
     b0c:	2f 31       	cpi	r18, 0x1F	; 31
     b0e:	31 05       	cpc	r19, r1
     b10:	1c f0       	brlt	.+6      	; 0xb18 <__fixsfsi+0x4e>
     b12:	66 23       	and	r22, r22
     b14:	f9 f0       	breq	.+62     	; 0xb54 <__fixsfsi+0x8a>
     b16:	23 c0       	rjmp	.+70     	; 0xb5e <__fixsfsi+0x94>
     b18:	8e e1       	ldi	r24, 0x1E	; 30
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	82 1b       	sub	r24, r18
     b1e:	93 0b       	sbc	r25, r19
     b20:	29 85       	ldd	r18, Y+9	; 0x09
     b22:	3a 85       	ldd	r19, Y+10	; 0x0a
     b24:	4b 85       	ldd	r20, Y+11	; 0x0b
     b26:	5c 85       	ldd	r21, Y+12	; 0x0c
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__fixsfsi+0x68>
     b2a:	56 95       	lsr	r21
     b2c:	47 95       	ror	r20
     b2e:	37 95       	ror	r19
     b30:	27 95       	ror	r18
     b32:	8a 95       	dec	r24
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__fixsfsi+0x60>
     b36:	66 23       	and	r22, r22
     b38:	b1 f0       	breq	.+44     	; 0xb66 <__fixsfsi+0x9c>
     b3a:	50 95       	com	r21
     b3c:	40 95       	com	r20
     b3e:	30 95       	com	r19
     b40:	21 95       	neg	r18
     b42:	3f 4f       	sbci	r19, 0xFF	; 255
     b44:	4f 4f       	sbci	r20, 0xFF	; 255
     b46:	5f 4f       	sbci	r21, 0xFF	; 255
     b48:	0e c0       	rjmp	.+28     	; 0xb66 <__fixsfsi+0x9c>
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	09 c0       	rjmp	.+18     	; 0xb66 <__fixsfsi+0x9c>
     b54:	2f ef       	ldi	r18, 0xFF	; 255
     b56:	3f ef       	ldi	r19, 0xFF	; 255
     b58:	4f ef       	ldi	r20, 0xFF	; 255
     b5a:	5f e7       	ldi	r21, 0x7F	; 127
     b5c:	04 c0       	rjmp	.+8      	; 0xb66 <__fixsfsi+0x9c>
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	40 e0       	ldi	r20, 0x00	; 0
     b64:	50 e8       	ldi	r21, 0x80	; 128
     b66:	b9 01       	movw	r22, r18
     b68:	ca 01       	movw	r24, r20
     b6a:	2c 96       	adiw	r28, 0x0c	; 12
     b6c:	e2 e0       	ldi	r30, 0x02	; 2
     b6e:	0c 94 dd 30 	jmp	0x61ba	; 0x61ba <__epilogue_restores__+0x20>

00000b72 <__floatunsisf>:
     b72:	a8 e0       	ldi	r26, 0x08	; 8
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	ef eb       	ldi	r30, 0xBF	; 191
     b78:	f5 e0       	ldi	r31, 0x05	; 5
     b7a:	0c 94 b9 30 	jmp	0x6172	; 0x6172 <__prologue_saves__+0x10>
     b7e:	7b 01       	movw	r14, r22
     b80:	8c 01       	movw	r16, r24
     b82:	61 15       	cp	r22, r1
     b84:	71 05       	cpc	r23, r1
     b86:	81 05       	cpc	r24, r1
     b88:	91 05       	cpc	r25, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__floatunsisf+0x20>
     b8c:	82 e0       	ldi	r24, 0x02	; 2
     b8e:	89 83       	std	Y+1, r24	; 0x01
     b90:	60 c0       	rjmp	.+192    	; 0xc52 <__floatunsisf+0xe0>
     b92:	83 e0       	ldi	r24, 0x03	; 3
     b94:	89 83       	std	Y+1, r24	; 0x01
     b96:	8e e1       	ldi	r24, 0x1E	; 30
     b98:	c8 2e       	mov	r12, r24
     b9a:	d1 2c       	mov	r13, r1
     b9c:	dc 82       	std	Y+4, r13	; 0x04
     b9e:	cb 82       	std	Y+3, r12	; 0x03
     ba0:	ed 82       	std	Y+5, r14	; 0x05
     ba2:	fe 82       	std	Y+6, r15	; 0x06
     ba4:	0f 83       	std	Y+7, r16	; 0x07
     ba6:	18 87       	std	Y+8, r17	; 0x08
     ba8:	c8 01       	movw	r24, r16
     baa:	b7 01       	movw	r22, r14
     bac:	0e 94 32 06 	call	0xc64	; 0xc64 <__clzsi2>
     bb0:	fc 01       	movw	r30, r24
     bb2:	31 97       	sbiw	r30, 0x01	; 1
     bb4:	f7 ff       	sbrs	r31, 7
     bb6:	3b c0       	rjmp	.+118    	; 0xc2e <__floatunsisf+0xbc>
     bb8:	22 27       	eor	r18, r18
     bba:	33 27       	eor	r19, r19
     bbc:	2e 1b       	sub	r18, r30
     bbe:	3f 0b       	sbc	r19, r31
     bc0:	57 01       	movw	r10, r14
     bc2:	68 01       	movw	r12, r16
     bc4:	02 2e       	mov	r0, r18
     bc6:	04 c0       	rjmp	.+8      	; 0xbd0 <__floatunsisf+0x5e>
     bc8:	d6 94       	lsr	r13
     bca:	c7 94       	ror	r12
     bcc:	b7 94       	ror	r11
     bce:	a7 94       	ror	r10
     bd0:	0a 94       	dec	r0
     bd2:	d2 f7       	brpl	.-12     	; 0xbc8 <__floatunsisf+0x56>
     bd4:	40 e0       	ldi	r20, 0x00	; 0
     bd6:	50 e0       	ldi	r21, 0x00	; 0
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	a0 e0       	ldi	r26, 0x00	; 0
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	04 c0       	rjmp	.+8      	; 0xbee <__floatunsisf+0x7c>
     be6:	88 0f       	add	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	aa 1f       	adc	r26, r26
     bec:	bb 1f       	adc	r27, r27
     bee:	2a 95       	dec	r18
     bf0:	d2 f7       	brpl	.-12     	; 0xbe6 <__floatunsisf+0x74>
     bf2:	01 97       	sbiw	r24, 0x01	; 1
     bf4:	a1 09       	sbc	r26, r1
     bf6:	b1 09       	sbc	r27, r1
     bf8:	8e 21       	and	r24, r14
     bfa:	9f 21       	and	r25, r15
     bfc:	a0 23       	and	r26, r16
     bfe:	b1 23       	and	r27, r17
     c00:	00 97       	sbiw	r24, 0x00	; 0
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	21 f0       	breq	.+8      	; 0xc10 <__floatunsisf+0x9e>
     c08:	41 e0       	ldi	r20, 0x01	; 1
     c0a:	50 e0       	ldi	r21, 0x00	; 0
     c0c:	60 e0       	ldi	r22, 0x00	; 0
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	4a 29       	or	r20, r10
     c12:	5b 29       	or	r21, r11
     c14:	6c 29       	or	r22, r12
     c16:	7d 29       	or	r23, r13
     c18:	4d 83       	std	Y+5, r20	; 0x05
     c1a:	5e 83       	std	Y+6, r21	; 0x06
     c1c:	6f 83       	std	Y+7, r22	; 0x07
     c1e:	78 87       	std	Y+8, r23	; 0x08
     c20:	8e e1       	ldi	r24, 0x1E	; 30
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	8e 1b       	sub	r24, r30
     c26:	9f 0b       	sbc	r25, r31
     c28:	9c 83       	std	Y+4, r25	; 0x04
     c2a:	8b 83       	std	Y+3, r24	; 0x03
     c2c:	12 c0       	rjmp	.+36     	; 0xc52 <__floatunsisf+0xe0>
     c2e:	30 97       	sbiw	r30, 0x00	; 0
     c30:	81 f0       	breq	.+32     	; 0xc52 <__floatunsisf+0xe0>
     c32:	0e 2e       	mov	r0, r30
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <__floatunsisf+0xcc>
     c36:	ee 0c       	add	r14, r14
     c38:	ff 1c       	adc	r15, r15
     c3a:	00 1f       	adc	r16, r16
     c3c:	11 1f       	adc	r17, r17
     c3e:	0a 94       	dec	r0
     c40:	d2 f7       	brpl	.-12     	; 0xc36 <__floatunsisf+0xc4>
     c42:	ed 82       	std	Y+5, r14	; 0x05
     c44:	fe 82       	std	Y+6, r15	; 0x06
     c46:	0f 83       	std	Y+7, r16	; 0x07
     c48:	18 87       	std	Y+8, r17	; 0x08
     c4a:	ce 1a       	sub	r12, r30
     c4c:	df 0a       	sbc	r13, r31
     c4e:	dc 82       	std	Y+4, r13	; 0x04
     c50:	cb 82       	std	Y+3, r12	; 0x03
     c52:	1a 82       	std	Y+2, r1	; 0x02
     c54:	ce 01       	movw	r24, r28
     c56:	01 96       	adiw	r24, 0x01	; 1
     c58:	0e 94 81 06 	call	0xd02	; 0xd02 <__pack_f>
     c5c:	28 96       	adiw	r28, 0x08	; 8
     c5e:	ea e0       	ldi	r30, 0x0A	; 10
     c60:	0c 94 d5 30 	jmp	0x61aa	; 0x61aa <__epilogue_restores__+0x10>

00000c64 <__clzsi2>:
     c64:	ef 92       	push	r14
     c66:	ff 92       	push	r15
     c68:	0f 93       	push	r16
     c6a:	1f 93       	push	r17
     c6c:	7b 01       	movw	r14, r22
     c6e:	8c 01       	movw	r16, r24
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	e8 16       	cp	r14, r24
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	f8 06       	cpc	r15, r24
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	08 07       	cpc	r16, r24
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	18 07       	cpc	r17, r24
     c80:	88 f4       	brcc	.+34     	; 0xca4 <__clzsi2+0x40>
     c82:	8f ef       	ldi	r24, 0xFF	; 255
     c84:	e8 16       	cp	r14, r24
     c86:	f1 04       	cpc	r15, r1
     c88:	01 05       	cpc	r16, r1
     c8a:	11 05       	cpc	r17, r1
     c8c:	31 f0       	breq	.+12     	; 0xc9a <__clzsi2+0x36>
     c8e:	28 f0       	brcs	.+10     	; 0xc9a <__clzsi2+0x36>
     c90:	88 e0       	ldi	r24, 0x08	; 8
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	a0 e0       	ldi	r26, 0x00	; 0
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	17 c0       	rjmp	.+46     	; 0xcc8 <__clzsi2+0x64>
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	12 c0       	rjmp	.+36     	; 0xcc8 <__clzsi2+0x64>
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	e8 16       	cp	r14, r24
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	f8 06       	cpc	r15, r24
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	08 07       	cpc	r16, r24
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	18 07       	cpc	r17, r24
     cb4:	28 f0       	brcs	.+10     	; 0xcc0 <__clzsi2+0x5c>
     cb6:	88 e1       	ldi	r24, 0x18	; 24
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	a0 e0       	ldi	r26, 0x00	; 0
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	04 c0       	rjmp	.+8      	; 0xcc8 <__clzsi2+0x64>
     cc0:	80 e1       	ldi	r24, 0x10	; 16
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	a0 e0       	ldi	r26, 0x00	; 0
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	20 e2       	ldi	r18, 0x20	; 32
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	40 e0       	ldi	r20, 0x00	; 0
     cce:	50 e0       	ldi	r21, 0x00	; 0
     cd0:	28 1b       	sub	r18, r24
     cd2:	39 0b       	sbc	r19, r25
     cd4:	4a 0b       	sbc	r20, r26
     cd6:	5b 0b       	sbc	r21, r27
     cd8:	04 c0       	rjmp	.+8      	; 0xce2 <__clzsi2+0x7e>
     cda:	16 95       	lsr	r17
     cdc:	07 95       	ror	r16
     cde:	f7 94       	ror	r15
     ce0:	e7 94       	ror	r14
     ce2:	8a 95       	dec	r24
     ce4:	d2 f7       	brpl	.-12     	; 0xcda <__clzsi2+0x76>
     ce6:	f7 01       	movw	r30, r14
     ce8:	e8 59       	subi	r30, 0x98	; 152
     cea:	ff 4f       	sbci	r31, 0xFF	; 255
     cec:	80 81       	ld	r24, Z
     cee:	28 1b       	sub	r18, r24
     cf0:	31 09       	sbc	r19, r1
     cf2:	41 09       	sbc	r20, r1
     cf4:	51 09       	sbc	r21, r1
     cf6:	c9 01       	movw	r24, r18
     cf8:	1f 91       	pop	r17
     cfa:	0f 91       	pop	r16
     cfc:	ff 90       	pop	r15
     cfe:	ef 90       	pop	r14
     d00:	08 95       	ret

00000d02 <__pack_f>:
     d02:	df 92       	push	r13
     d04:	ef 92       	push	r14
     d06:	ff 92       	push	r15
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
     d0c:	fc 01       	movw	r30, r24
     d0e:	e4 80       	ldd	r14, Z+4	; 0x04
     d10:	f5 80       	ldd	r15, Z+5	; 0x05
     d12:	06 81       	ldd	r16, Z+6	; 0x06
     d14:	17 81       	ldd	r17, Z+7	; 0x07
     d16:	d1 80       	ldd	r13, Z+1	; 0x01
     d18:	80 81       	ld	r24, Z
     d1a:	82 30       	cpi	r24, 0x02	; 2
     d1c:	48 f4       	brcc	.+18     	; 0xd30 <__pack_f+0x2e>
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	a0 e1       	ldi	r26, 0x10	; 16
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e8 2a       	or	r14, r24
     d28:	f9 2a       	or	r15, r25
     d2a:	0a 2b       	or	r16, r26
     d2c:	1b 2b       	or	r17, r27
     d2e:	a5 c0       	rjmp	.+330    	; 0xe7a <__pack_f+0x178>
     d30:	84 30       	cpi	r24, 0x04	; 4
     d32:	09 f4       	brne	.+2      	; 0xd36 <__pack_f+0x34>
     d34:	9f c0       	rjmp	.+318    	; 0xe74 <__pack_f+0x172>
     d36:	82 30       	cpi	r24, 0x02	; 2
     d38:	21 f4       	brne	.+8      	; 0xd42 <__pack_f+0x40>
     d3a:	ee 24       	eor	r14, r14
     d3c:	ff 24       	eor	r15, r15
     d3e:	87 01       	movw	r16, r14
     d40:	05 c0       	rjmp	.+10     	; 0xd4c <__pack_f+0x4a>
     d42:	e1 14       	cp	r14, r1
     d44:	f1 04       	cpc	r15, r1
     d46:	01 05       	cpc	r16, r1
     d48:	11 05       	cpc	r17, r1
     d4a:	19 f4       	brne	.+6      	; 0xd52 <__pack_f+0x50>
     d4c:	e0 e0       	ldi	r30, 0x00	; 0
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	96 c0       	rjmp	.+300    	; 0xe7e <__pack_f+0x17c>
     d52:	62 81       	ldd	r22, Z+2	; 0x02
     d54:	73 81       	ldd	r23, Z+3	; 0x03
     d56:	9f ef       	ldi	r25, 0xFF	; 255
     d58:	62 38       	cpi	r22, 0x82	; 130
     d5a:	79 07       	cpc	r23, r25
     d5c:	0c f0       	brlt	.+2      	; 0xd60 <__pack_f+0x5e>
     d5e:	5b c0       	rjmp	.+182    	; 0xe16 <__pack_f+0x114>
     d60:	22 e8       	ldi	r18, 0x82	; 130
     d62:	3f ef       	ldi	r19, 0xFF	; 255
     d64:	26 1b       	sub	r18, r22
     d66:	37 0b       	sbc	r19, r23
     d68:	2a 31       	cpi	r18, 0x1A	; 26
     d6a:	31 05       	cpc	r19, r1
     d6c:	2c f0       	brlt	.+10     	; 0xd78 <__pack_f+0x76>
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	40 e0       	ldi	r20, 0x00	; 0
     d74:	50 e0       	ldi	r21, 0x00	; 0
     d76:	2a c0       	rjmp	.+84     	; 0xdcc <__pack_f+0xca>
     d78:	b8 01       	movw	r22, r16
     d7a:	a7 01       	movw	r20, r14
     d7c:	02 2e       	mov	r0, r18
     d7e:	04 c0       	rjmp	.+8      	; 0xd88 <__pack_f+0x86>
     d80:	76 95       	lsr	r23
     d82:	67 95       	ror	r22
     d84:	57 95       	ror	r21
     d86:	47 95       	ror	r20
     d88:	0a 94       	dec	r0
     d8a:	d2 f7       	brpl	.-12     	; 0xd80 <__pack_f+0x7e>
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	a0 e0       	ldi	r26, 0x00	; 0
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	04 c0       	rjmp	.+8      	; 0xd9e <__pack_f+0x9c>
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	aa 1f       	adc	r26, r26
     d9c:	bb 1f       	adc	r27, r27
     d9e:	2a 95       	dec	r18
     da0:	d2 f7       	brpl	.-12     	; 0xd96 <__pack_f+0x94>
     da2:	01 97       	sbiw	r24, 0x01	; 1
     da4:	a1 09       	sbc	r26, r1
     da6:	b1 09       	sbc	r27, r1
     da8:	8e 21       	and	r24, r14
     daa:	9f 21       	and	r25, r15
     dac:	a0 23       	and	r26, r16
     dae:	b1 23       	and	r27, r17
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	a1 05       	cpc	r26, r1
     db4:	b1 05       	cpc	r27, r1
     db6:	21 f0       	breq	.+8      	; 0xdc0 <__pack_f+0xbe>
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	a0 e0       	ldi	r26, 0x00	; 0
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	9a 01       	movw	r18, r20
     dc2:	ab 01       	movw	r20, r22
     dc4:	28 2b       	or	r18, r24
     dc6:	39 2b       	or	r19, r25
     dc8:	4a 2b       	or	r20, r26
     dca:	5b 2b       	or	r21, r27
     dcc:	da 01       	movw	r26, r20
     dce:	c9 01       	movw	r24, r18
     dd0:	8f 77       	andi	r24, 0x7F	; 127
     dd2:	90 70       	andi	r25, 0x00	; 0
     dd4:	a0 70       	andi	r26, 0x00	; 0
     dd6:	b0 70       	andi	r27, 0x00	; 0
     dd8:	80 34       	cpi	r24, 0x40	; 64
     dda:	91 05       	cpc	r25, r1
     ddc:	a1 05       	cpc	r26, r1
     dde:	b1 05       	cpc	r27, r1
     de0:	39 f4       	brne	.+14     	; 0xdf0 <__pack_f+0xee>
     de2:	27 ff       	sbrs	r18, 7
     de4:	09 c0       	rjmp	.+18     	; 0xdf8 <__pack_f+0xf6>
     de6:	20 5c       	subi	r18, 0xC0	; 192
     de8:	3f 4f       	sbci	r19, 0xFF	; 255
     dea:	4f 4f       	sbci	r20, 0xFF	; 255
     dec:	5f 4f       	sbci	r21, 0xFF	; 255
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <__pack_f+0xf6>
     df0:	21 5c       	subi	r18, 0xC1	; 193
     df2:	3f 4f       	sbci	r19, 0xFF	; 255
     df4:	4f 4f       	sbci	r20, 0xFF	; 255
     df6:	5f 4f       	sbci	r21, 0xFF	; 255
     df8:	e0 e0       	ldi	r30, 0x00	; 0
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	20 30       	cpi	r18, 0x00	; 0
     dfe:	a0 e0       	ldi	r26, 0x00	; 0
     e00:	3a 07       	cpc	r19, r26
     e02:	a0 e0       	ldi	r26, 0x00	; 0
     e04:	4a 07       	cpc	r20, r26
     e06:	a0 e4       	ldi	r26, 0x40	; 64
     e08:	5a 07       	cpc	r21, r26
     e0a:	10 f0       	brcs	.+4      	; 0xe10 <__pack_f+0x10e>
     e0c:	e1 e0       	ldi	r30, 0x01	; 1
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	79 01       	movw	r14, r18
     e12:	8a 01       	movw	r16, r20
     e14:	27 c0       	rjmp	.+78     	; 0xe64 <__pack_f+0x162>
     e16:	60 38       	cpi	r22, 0x80	; 128
     e18:	71 05       	cpc	r23, r1
     e1a:	64 f5       	brge	.+88     	; 0xe74 <__pack_f+0x172>
     e1c:	fb 01       	movw	r30, r22
     e1e:	e1 58       	subi	r30, 0x81	; 129
     e20:	ff 4f       	sbci	r31, 0xFF	; 255
     e22:	d8 01       	movw	r26, r16
     e24:	c7 01       	movw	r24, r14
     e26:	8f 77       	andi	r24, 0x7F	; 127
     e28:	90 70       	andi	r25, 0x00	; 0
     e2a:	a0 70       	andi	r26, 0x00	; 0
     e2c:	b0 70       	andi	r27, 0x00	; 0
     e2e:	80 34       	cpi	r24, 0x40	; 64
     e30:	91 05       	cpc	r25, r1
     e32:	a1 05       	cpc	r26, r1
     e34:	b1 05       	cpc	r27, r1
     e36:	39 f4       	brne	.+14     	; 0xe46 <__pack_f+0x144>
     e38:	e7 fe       	sbrs	r14, 7
     e3a:	0d c0       	rjmp	.+26     	; 0xe56 <__pack_f+0x154>
     e3c:	80 e4       	ldi	r24, 0x40	; 64
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	a0 e0       	ldi	r26, 0x00	; 0
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	04 c0       	rjmp	.+8      	; 0xe4e <__pack_f+0x14c>
     e46:	8f e3       	ldi	r24, 0x3F	; 63
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	a0 e0       	ldi	r26, 0x00	; 0
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e8 0e       	add	r14, r24
     e50:	f9 1e       	adc	r15, r25
     e52:	0a 1f       	adc	r16, r26
     e54:	1b 1f       	adc	r17, r27
     e56:	17 ff       	sbrs	r17, 7
     e58:	05 c0       	rjmp	.+10     	; 0xe64 <__pack_f+0x162>
     e5a:	16 95       	lsr	r17
     e5c:	07 95       	ror	r16
     e5e:	f7 94       	ror	r15
     e60:	e7 94       	ror	r14
     e62:	31 96       	adiw	r30, 0x01	; 1
     e64:	87 e0       	ldi	r24, 0x07	; 7
     e66:	16 95       	lsr	r17
     e68:	07 95       	ror	r16
     e6a:	f7 94       	ror	r15
     e6c:	e7 94       	ror	r14
     e6e:	8a 95       	dec	r24
     e70:	d1 f7       	brne	.-12     	; 0xe66 <__pack_f+0x164>
     e72:	05 c0       	rjmp	.+10     	; 0xe7e <__pack_f+0x17c>
     e74:	ee 24       	eor	r14, r14
     e76:	ff 24       	eor	r15, r15
     e78:	87 01       	movw	r16, r14
     e7a:	ef ef       	ldi	r30, 0xFF	; 255
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	6e 2f       	mov	r22, r30
     e80:	67 95       	ror	r22
     e82:	66 27       	eor	r22, r22
     e84:	67 95       	ror	r22
     e86:	90 2f       	mov	r25, r16
     e88:	9f 77       	andi	r25, 0x7F	; 127
     e8a:	d7 94       	ror	r13
     e8c:	dd 24       	eor	r13, r13
     e8e:	d7 94       	ror	r13
     e90:	8e 2f       	mov	r24, r30
     e92:	86 95       	lsr	r24
     e94:	49 2f       	mov	r20, r25
     e96:	46 2b       	or	r20, r22
     e98:	58 2f       	mov	r21, r24
     e9a:	5d 29       	or	r21, r13
     e9c:	b7 01       	movw	r22, r14
     e9e:	ca 01       	movw	r24, r20
     ea0:	1f 91       	pop	r17
     ea2:	0f 91       	pop	r16
     ea4:	ff 90       	pop	r15
     ea6:	ef 90       	pop	r14
     ea8:	df 90       	pop	r13
     eaa:	08 95       	ret

00000eac <__unpack_f>:
     eac:	fc 01       	movw	r30, r24
     eae:	db 01       	movw	r26, r22
     eb0:	40 81       	ld	r20, Z
     eb2:	51 81       	ldd	r21, Z+1	; 0x01
     eb4:	22 81       	ldd	r18, Z+2	; 0x02
     eb6:	62 2f       	mov	r22, r18
     eb8:	6f 77       	andi	r22, 0x7F	; 127
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	22 1f       	adc	r18, r18
     ebe:	22 27       	eor	r18, r18
     ec0:	22 1f       	adc	r18, r18
     ec2:	93 81       	ldd	r25, Z+3	; 0x03
     ec4:	89 2f       	mov	r24, r25
     ec6:	88 0f       	add	r24, r24
     ec8:	82 2b       	or	r24, r18
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	99 1f       	adc	r25, r25
     ed0:	99 27       	eor	r25, r25
     ed2:	99 1f       	adc	r25, r25
     ed4:	11 96       	adiw	r26, 0x01	; 1
     ed6:	9c 93       	st	X, r25
     ed8:	11 97       	sbiw	r26, 0x01	; 1
     eda:	21 15       	cp	r18, r1
     edc:	31 05       	cpc	r19, r1
     ede:	a9 f5       	brne	.+106    	; 0xf4a <__unpack_f+0x9e>
     ee0:	41 15       	cp	r20, r1
     ee2:	51 05       	cpc	r21, r1
     ee4:	61 05       	cpc	r22, r1
     ee6:	71 05       	cpc	r23, r1
     ee8:	11 f4       	brne	.+4      	; 0xeee <__unpack_f+0x42>
     eea:	82 e0       	ldi	r24, 0x02	; 2
     eec:	37 c0       	rjmp	.+110    	; 0xf5c <__unpack_f+0xb0>
     eee:	82 e8       	ldi	r24, 0x82	; 130
     ef0:	9f ef       	ldi	r25, 0xFF	; 255
     ef2:	13 96       	adiw	r26, 0x03	; 3
     ef4:	9c 93       	st	X, r25
     ef6:	8e 93       	st	-X, r24
     ef8:	12 97       	sbiw	r26, 0x02	; 2
     efa:	9a 01       	movw	r18, r20
     efc:	ab 01       	movw	r20, r22
     efe:	67 e0       	ldi	r22, 0x07	; 7
     f00:	22 0f       	add	r18, r18
     f02:	33 1f       	adc	r19, r19
     f04:	44 1f       	adc	r20, r20
     f06:	55 1f       	adc	r21, r21
     f08:	6a 95       	dec	r22
     f0a:	d1 f7       	brne	.-12     	; 0xf00 <__unpack_f+0x54>
     f0c:	83 e0       	ldi	r24, 0x03	; 3
     f0e:	8c 93       	st	X, r24
     f10:	0d c0       	rjmp	.+26     	; 0xf2c <__unpack_f+0x80>
     f12:	22 0f       	add	r18, r18
     f14:	33 1f       	adc	r19, r19
     f16:	44 1f       	adc	r20, r20
     f18:	55 1f       	adc	r21, r21
     f1a:	12 96       	adiw	r26, 0x02	; 2
     f1c:	8d 91       	ld	r24, X+
     f1e:	9c 91       	ld	r25, X
     f20:	13 97       	sbiw	r26, 0x03	; 3
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	13 96       	adiw	r26, 0x03	; 3
     f26:	9c 93       	st	X, r25
     f28:	8e 93       	st	-X, r24
     f2a:	12 97       	sbiw	r26, 0x02	; 2
     f2c:	20 30       	cpi	r18, 0x00	; 0
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	38 07       	cpc	r19, r24
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	48 07       	cpc	r20, r24
     f36:	80 e4       	ldi	r24, 0x40	; 64
     f38:	58 07       	cpc	r21, r24
     f3a:	58 f3       	brcs	.-42     	; 0xf12 <__unpack_f+0x66>
     f3c:	14 96       	adiw	r26, 0x04	; 4
     f3e:	2d 93       	st	X+, r18
     f40:	3d 93       	st	X+, r19
     f42:	4d 93       	st	X+, r20
     f44:	5c 93       	st	X, r21
     f46:	17 97       	sbiw	r26, 0x07	; 7
     f48:	08 95       	ret
     f4a:	2f 3f       	cpi	r18, 0xFF	; 255
     f4c:	31 05       	cpc	r19, r1
     f4e:	79 f4       	brne	.+30     	; 0xf6e <__unpack_f+0xc2>
     f50:	41 15       	cp	r20, r1
     f52:	51 05       	cpc	r21, r1
     f54:	61 05       	cpc	r22, r1
     f56:	71 05       	cpc	r23, r1
     f58:	19 f4       	brne	.+6      	; 0xf60 <__unpack_f+0xb4>
     f5a:	84 e0       	ldi	r24, 0x04	; 4
     f5c:	8c 93       	st	X, r24
     f5e:	08 95       	ret
     f60:	64 ff       	sbrs	r22, 4
     f62:	03 c0       	rjmp	.+6      	; 0xf6a <__unpack_f+0xbe>
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	8c 93       	st	X, r24
     f68:	12 c0       	rjmp	.+36     	; 0xf8e <__unpack_f+0xe2>
     f6a:	1c 92       	st	X, r1
     f6c:	10 c0       	rjmp	.+32     	; 0xf8e <__unpack_f+0xe2>
     f6e:	2f 57       	subi	r18, 0x7F	; 127
     f70:	30 40       	sbci	r19, 0x00	; 0
     f72:	13 96       	adiw	r26, 0x03	; 3
     f74:	3c 93       	st	X, r19
     f76:	2e 93       	st	-X, r18
     f78:	12 97       	sbiw	r26, 0x02	; 2
     f7a:	83 e0       	ldi	r24, 0x03	; 3
     f7c:	8c 93       	st	X, r24
     f7e:	87 e0       	ldi	r24, 0x07	; 7
     f80:	44 0f       	add	r20, r20
     f82:	55 1f       	adc	r21, r21
     f84:	66 1f       	adc	r22, r22
     f86:	77 1f       	adc	r23, r23
     f88:	8a 95       	dec	r24
     f8a:	d1 f7       	brne	.-12     	; 0xf80 <__unpack_f+0xd4>
     f8c:	70 64       	ori	r23, 0x40	; 64
     f8e:	14 96       	adiw	r26, 0x04	; 4
     f90:	4d 93       	st	X+, r20
     f92:	5d 93       	st	X+, r21
     f94:	6d 93       	st	X+, r22
     f96:	7c 93       	st	X, r23
     f98:	17 97       	sbiw	r26, 0x07	; 7
     f9a:	08 95       	ret

00000f9c <__fpcmp_parts_f>:
     f9c:	1f 93       	push	r17
     f9e:	dc 01       	movw	r26, r24
     fa0:	fb 01       	movw	r30, r22
     fa2:	9c 91       	ld	r25, X
     fa4:	92 30       	cpi	r25, 0x02	; 2
     fa6:	08 f4       	brcc	.+2      	; 0xfaa <__fpcmp_parts_f+0xe>
     fa8:	47 c0       	rjmp	.+142    	; 0x1038 <__fpcmp_parts_f+0x9c>
     faa:	80 81       	ld	r24, Z
     fac:	82 30       	cpi	r24, 0x02	; 2
     fae:	08 f4       	brcc	.+2      	; 0xfb2 <__fpcmp_parts_f+0x16>
     fb0:	43 c0       	rjmp	.+134    	; 0x1038 <__fpcmp_parts_f+0x9c>
     fb2:	94 30       	cpi	r25, 0x04	; 4
     fb4:	51 f4       	brne	.+20     	; 0xfca <__fpcmp_parts_f+0x2e>
     fb6:	11 96       	adiw	r26, 0x01	; 1
     fb8:	1c 91       	ld	r17, X
     fba:	84 30       	cpi	r24, 0x04	; 4
     fbc:	99 f5       	brne	.+102    	; 0x1024 <__fpcmp_parts_f+0x88>
     fbe:	81 81       	ldd	r24, Z+1	; 0x01
     fc0:	68 2f       	mov	r22, r24
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	61 1b       	sub	r22, r17
     fc6:	71 09       	sbc	r23, r1
     fc8:	3f c0       	rjmp	.+126    	; 0x1048 <__fpcmp_parts_f+0xac>
     fca:	84 30       	cpi	r24, 0x04	; 4
     fcc:	21 f0       	breq	.+8      	; 0xfd6 <__fpcmp_parts_f+0x3a>
     fce:	92 30       	cpi	r25, 0x02	; 2
     fd0:	31 f4       	brne	.+12     	; 0xfde <__fpcmp_parts_f+0x42>
     fd2:	82 30       	cpi	r24, 0x02	; 2
     fd4:	b9 f1       	breq	.+110    	; 0x1044 <__fpcmp_parts_f+0xa8>
     fd6:	81 81       	ldd	r24, Z+1	; 0x01
     fd8:	88 23       	and	r24, r24
     fda:	89 f1       	breq	.+98     	; 0x103e <__fpcmp_parts_f+0xa2>
     fdc:	2d c0       	rjmp	.+90     	; 0x1038 <__fpcmp_parts_f+0x9c>
     fde:	11 96       	adiw	r26, 0x01	; 1
     fe0:	1c 91       	ld	r17, X
     fe2:	11 97       	sbiw	r26, 0x01	; 1
     fe4:	82 30       	cpi	r24, 0x02	; 2
     fe6:	f1 f0       	breq	.+60     	; 0x1024 <__fpcmp_parts_f+0x88>
     fe8:	81 81       	ldd	r24, Z+1	; 0x01
     fea:	18 17       	cp	r17, r24
     fec:	d9 f4       	brne	.+54     	; 0x1024 <__fpcmp_parts_f+0x88>
     fee:	12 96       	adiw	r26, 0x02	; 2
     ff0:	2d 91       	ld	r18, X+
     ff2:	3c 91       	ld	r19, X
     ff4:	13 97       	sbiw	r26, 0x03	; 3
     ff6:	82 81       	ldd	r24, Z+2	; 0x02
     ff8:	93 81       	ldd	r25, Z+3	; 0x03
     ffa:	82 17       	cp	r24, r18
     ffc:	93 07       	cpc	r25, r19
     ffe:	94 f0       	brlt	.+36     	; 0x1024 <__fpcmp_parts_f+0x88>
    1000:	28 17       	cp	r18, r24
    1002:	39 07       	cpc	r19, r25
    1004:	bc f0       	brlt	.+46     	; 0x1034 <__fpcmp_parts_f+0x98>
    1006:	14 96       	adiw	r26, 0x04	; 4
    1008:	8d 91       	ld	r24, X+
    100a:	9d 91       	ld	r25, X+
    100c:	0d 90       	ld	r0, X+
    100e:	bc 91       	ld	r27, X
    1010:	a0 2d       	mov	r26, r0
    1012:	24 81       	ldd	r18, Z+4	; 0x04
    1014:	35 81       	ldd	r19, Z+5	; 0x05
    1016:	46 81       	ldd	r20, Z+6	; 0x06
    1018:	57 81       	ldd	r21, Z+7	; 0x07
    101a:	28 17       	cp	r18, r24
    101c:	39 07       	cpc	r19, r25
    101e:	4a 07       	cpc	r20, r26
    1020:	5b 07       	cpc	r21, r27
    1022:	18 f4       	brcc	.+6      	; 0x102a <__fpcmp_parts_f+0x8e>
    1024:	11 23       	and	r17, r17
    1026:	41 f0       	breq	.+16     	; 0x1038 <__fpcmp_parts_f+0x9c>
    1028:	0a c0       	rjmp	.+20     	; 0x103e <__fpcmp_parts_f+0xa2>
    102a:	82 17       	cp	r24, r18
    102c:	93 07       	cpc	r25, r19
    102e:	a4 07       	cpc	r26, r20
    1030:	b5 07       	cpc	r27, r21
    1032:	40 f4       	brcc	.+16     	; 0x1044 <__fpcmp_parts_f+0xa8>
    1034:	11 23       	and	r17, r17
    1036:	19 f0       	breq	.+6      	; 0x103e <__fpcmp_parts_f+0xa2>
    1038:	61 e0       	ldi	r22, 0x01	; 1
    103a:	70 e0       	ldi	r23, 0x00	; 0
    103c:	05 c0       	rjmp	.+10     	; 0x1048 <__fpcmp_parts_f+0xac>
    103e:	6f ef       	ldi	r22, 0xFF	; 255
    1040:	7f ef       	ldi	r23, 0xFF	; 255
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <__fpcmp_parts_f+0xac>
    1044:	60 e0       	ldi	r22, 0x00	; 0
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	cb 01       	movw	r24, r22
    104a:	1f 91       	pop	r17
    104c:	08 95       	ret

0000104e <GIE_VoidEnable>:

#include "GIE_int.h"
#include "GIE_priv.h"


void GIE_VoidEnable (void) {
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62

	Set_Bit(SREG , SREG_I) ;
    1056:	af e5       	ldi	r26, 0x5F	; 95
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	ef e5       	ldi	r30, 0x5F	; 95
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	80 68       	ori	r24, 0x80	; 128
    1062:	8c 93       	st	X, r24
}
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <GIE_VoidDisable>:


void GIE_VoidDisable (void) {
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62

	Clr_Bit(SREG , SREG_I) ;
    1072:	af e5       	ldi	r26, 0x5F	; 95
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	ef e5       	ldi	r30, 0x5F	; 95
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	8f 77       	andi	r24, 0x7F	; 127
    107e:	8c 93       	st	X, r24
}
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	08 95       	ret

00001086 <EXTI_enuInit>:

 */
void (*EXTI_CallBack[3]) (void) = { NULL } ;


ES_t EXTI_enuInit(EXTI_t *Copy_pstrEXTILINE) {
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	2a 97       	sbiw	r28, 0x0a	; 10
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	de bf       	out	0x3e, r29	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	cd bf       	out	0x3d, r28	; 61
    109a:	9b 83       	std	Y+3, r25	; 0x03
    109c:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorState = ES_OK;
    109e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pstrEXTILINE != NULL) {
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	9b 81       	ldd	r25, Y+3	; 0x03
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	09 f4       	brne	.+2      	; 0x10aa <EXTI_enuInit+0x24>
    10a8:	fd c0       	rjmp	.+506    	; 0x12a4 <EXTI_enuInit+0x21e>

		if(Copy_pstrEXTILINE[EXTI_INT1].EXTI_u8State == ENABLED) {
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	9b 81       	ldd	r25, Y+3	; 0x03
    10ae:	fc 01       	movw	r30, r24
    10b0:	32 96       	adiw	r30, 0x02	; 2
    10b2:	80 81       	ld	r24, Z
    10b4:	88 35       	cpi	r24, 0x58	; 88
    10b6:	09 f0       	breq	.+2      	; 0x10ba <EXTI_enuInit+0x34>
    10b8:	61 c0       	rjmp	.+194    	; 0x117c <EXTI_enuInit+0xf6>

			switch(Copy_pstrEXTILINE[EXTI_INT1].EXTI_u8Sense) {
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	9b 81       	ldd	r25, Y+3	; 0x03
    10be:	fc 01       	movw	r30, r24
    10c0:	32 96       	adiw	r30, 0x02	; 2
    10c2:	81 81       	ldd	r24, Z+1	; 0x01
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	3a 87       	std	Y+10, r19	; 0x0a
    10ca:	29 87       	std	Y+9, r18	; 0x09
    10cc:	89 85       	ldd	r24, Y+9	; 0x09
    10ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	91 05       	cpc	r25, r1
    10d4:	21 f1       	breq	.+72     	; 0x111e <EXTI_enuInit+0x98>
    10d6:	29 85       	ldd	r18, Y+9	; 0x09
    10d8:	3a 85       	ldd	r19, Y+10	; 0x0a
    10da:	22 30       	cpi	r18, 0x02	; 2
    10dc:	31 05       	cpc	r19, r1
    10de:	2c f4       	brge	.+10     	; 0x10ea <EXTI_enuInit+0x64>
    10e0:	89 85       	ldd	r24, Y+9	; 0x09
    10e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	61 f0       	breq	.+24     	; 0x1100 <EXTI_enuInit+0x7a>
    10e8:	47 c0       	rjmp	.+142    	; 0x1178 <EXTI_enuInit+0xf2>
    10ea:	29 85       	ldd	r18, Y+9	; 0x09
    10ec:	3a 85       	ldd	r19, Y+10	; 0x0a
    10ee:	22 30       	cpi	r18, 0x02	; 2
    10f0:	31 05       	cpc	r19, r1
    10f2:	21 f1       	breq	.+72     	; 0x113c <EXTI_enuInit+0xb6>
    10f4:	89 85       	ldd	r24, Y+9	; 0x09
    10f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f8:	83 30       	cpi	r24, 0x03	; 3
    10fa:	91 05       	cpc	r25, r1
    10fc:	71 f1       	breq	.+92     	; 0x115a <EXTI_enuInit+0xd4>
    10fe:	3c c0       	rjmp	.+120    	; 0x1178 <EXTI_enuInit+0xf2>

			case EXTI_FALLING_EDGE : Clr_Bit(MCUCR_REG, MCUCR_ISC10); Set_Bit(MCUCR_REG, MCUCR_ISC11); break;
    1100:	a5 e5       	ldi	r26, 0x55	; 85
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e5 e5       	ldi	r30, 0x55	; 85
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	8b 7f       	andi	r24, 0xFB	; 251
    110c:	8c 93       	st	X, r24
    110e:	a5 e5       	ldi	r26, 0x55	; 85
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e5 e5       	ldi	r30, 0x55	; 85
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	88 60       	ori	r24, 0x08	; 8
    111a:	8c 93       	st	X, r24
    111c:	2f c0       	rjmp	.+94     	; 0x117c <EXTI_enuInit+0xf6>
			case EXTI_RISING_EDGE  : Set_Bit(MCUCR_REG, MCUCR_ISC10); Set_Bit(MCUCR_REG, MCUCR_ISC11); break;
    111e:	a5 e5       	ldi	r26, 0x55	; 85
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e5 e5       	ldi	r30, 0x55	; 85
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	84 60       	ori	r24, 0x04	; 4
    112a:	8c 93       	st	X, r24
    112c:	a5 e5       	ldi	r26, 0x55	; 85
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e5 e5       	ldi	r30, 0x55	; 85
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	88 60       	ori	r24, 0x08	; 8
    1138:	8c 93       	st	X, r24
    113a:	20 c0       	rjmp	.+64     	; 0x117c <EXTI_enuInit+0xf6>
			case EXTI_LOW_LEVEL    : Clr_Bit(MCUCR_REG, MCUCR_ISC10); Clr_Bit(MCUCR_REG, MCUCR_ISC11); break;
    113c:	a5 e5       	ldi	r26, 0x55	; 85
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e5 e5       	ldi	r30, 0x55	; 85
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	8b 7f       	andi	r24, 0xFB	; 251
    1148:	8c 93       	st	X, r24
    114a:	a5 e5       	ldi	r26, 0x55	; 85
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e5 e5       	ldi	r30, 0x55	; 85
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	87 7f       	andi	r24, 0xF7	; 247
    1156:	8c 93       	st	X, r24
    1158:	11 c0       	rjmp	.+34     	; 0x117c <EXTI_enuInit+0xf6>
			case EXTI_ON_CHANGE    : Set_Bit(MCUCR_REG, MCUCR_ISC10); Clr_Bit(MCUCR_REG, MCUCR_ISC11); break;
    115a:	a5 e5       	ldi	r26, 0x55	; 85
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e5 e5       	ldi	r30, 0x55	; 85
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	84 60       	ori	r24, 0x04	; 4
    1166:	8c 93       	st	X, r24
    1168:	a5 e5       	ldi	r26, 0x55	; 85
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e5 e5       	ldi	r30, 0x55	; 85
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	87 7f       	andi	r24, 0xF7	; 247
    1174:	8c 93       	st	X, r24
    1176:	02 c0       	rjmp	.+4      	; 0x117c <EXTI_enuInit+0xf6>
			default : Local_enuErrorState = ES_UNSUPPORTED_SENSE_Config;
    1178:	84 e0       	ldi	r24, 0x04	; 4
    117a:	89 83       	std	Y+1, r24	; 0x01

			}
		}

		if(Copy_pstrEXTILINE[EXTI_INT0].EXTI_u8State == ENABLED) {
    117c:	ea 81       	ldd	r30, Y+2	; 0x02
    117e:	fb 81       	ldd	r31, Y+3	; 0x03
    1180:	80 81       	ld	r24, Z
    1182:	88 35       	cpi	r24, 0x58	; 88
    1184:	09 f0       	breq	.+2      	; 0x1188 <EXTI_enuInit+0x102>
    1186:	5f c0       	rjmp	.+190    	; 0x1246 <EXTI_enuInit+0x1c0>

			switch(Copy_pstrEXTILINE[EXTI_INT0].EXTI_u8Sense) {
    1188:	ea 81       	ldd	r30, Y+2	; 0x02
    118a:	fb 81       	ldd	r31, Y+3	; 0x03
    118c:	81 81       	ldd	r24, Z+1	; 0x01
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	38 87       	std	Y+8, r19	; 0x08
    1194:	2f 83       	std	Y+7, r18	; 0x07
    1196:	8f 81       	ldd	r24, Y+7	; 0x07
    1198:	98 85       	ldd	r25, Y+8	; 0x08
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	91 05       	cpc	r25, r1
    119e:	21 f1       	breq	.+72     	; 0x11e8 <EXTI_enuInit+0x162>
    11a0:	2f 81       	ldd	r18, Y+7	; 0x07
    11a2:	38 85       	ldd	r19, Y+8	; 0x08
    11a4:	22 30       	cpi	r18, 0x02	; 2
    11a6:	31 05       	cpc	r19, r1
    11a8:	2c f4       	brge	.+10     	; 0x11b4 <EXTI_enuInit+0x12e>
    11aa:	8f 81       	ldd	r24, Y+7	; 0x07
    11ac:	98 85       	ldd	r25, Y+8	; 0x08
    11ae:	00 97       	sbiw	r24, 0x00	; 0
    11b0:	61 f0       	breq	.+24     	; 0x11ca <EXTI_enuInit+0x144>
    11b2:	47 c0       	rjmp	.+142    	; 0x1242 <EXTI_enuInit+0x1bc>
    11b4:	2f 81       	ldd	r18, Y+7	; 0x07
    11b6:	38 85       	ldd	r19, Y+8	; 0x08
    11b8:	22 30       	cpi	r18, 0x02	; 2
    11ba:	31 05       	cpc	r19, r1
    11bc:	21 f1       	breq	.+72     	; 0x1206 <EXTI_enuInit+0x180>
    11be:	8f 81       	ldd	r24, Y+7	; 0x07
    11c0:	98 85       	ldd	r25, Y+8	; 0x08
    11c2:	83 30       	cpi	r24, 0x03	; 3
    11c4:	91 05       	cpc	r25, r1
    11c6:	71 f1       	breq	.+92     	; 0x1224 <EXTI_enuInit+0x19e>
    11c8:	3c c0       	rjmp	.+120    	; 0x1242 <EXTI_enuInit+0x1bc>

			case EXTI_FALLING_EDGE : Clr_Bit(MCUCR_REG, MCUCR_ISC00); Set_Bit(MCUCR_REG, MCUCR_ISC01); break;
    11ca:	a5 e5       	ldi	r26, 0x55	; 85
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e5 e5       	ldi	r30, 0x55	; 85
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	8e 7f       	andi	r24, 0xFE	; 254
    11d6:	8c 93       	st	X, r24
    11d8:	a5 e5       	ldi	r26, 0x55	; 85
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e5 e5       	ldi	r30, 0x55	; 85
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	82 60       	ori	r24, 0x02	; 2
    11e4:	8c 93       	st	X, r24
    11e6:	2f c0       	rjmp	.+94     	; 0x1246 <EXTI_enuInit+0x1c0>
			case EXTI_RISING_EDGE  : Set_Bit(MCUCR_REG, MCUCR_ISC00); Set_Bit(MCUCR_REG, MCUCR_ISC01); break;
    11e8:	a5 e5       	ldi	r26, 0x55	; 85
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e5 e5       	ldi	r30, 0x55	; 85
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	81 60       	ori	r24, 0x01	; 1
    11f4:	8c 93       	st	X, r24
    11f6:	a5 e5       	ldi	r26, 0x55	; 85
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e5 e5       	ldi	r30, 0x55	; 85
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	82 60       	ori	r24, 0x02	; 2
    1202:	8c 93       	st	X, r24
    1204:	20 c0       	rjmp	.+64     	; 0x1246 <EXTI_enuInit+0x1c0>
			case EXTI_LOW_LEVEL    : Clr_Bit(MCUCR_REG, MCUCR_ISC00); Clr_Bit(MCUCR_REG, MCUCR_ISC01); break;
    1206:	a5 e5       	ldi	r26, 0x55	; 85
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e5 e5       	ldi	r30, 0x55	; 85
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	8e 7f       	andi	r24, 0xFE	; 254
    1212:	8c 93       	st	X, r24
    1214:	a5 e5       	ldi	r26, 0x55	; 85
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e5 e5       	ldi	r30, 0x55	; 85
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	8d 7f       	andi	r24, 0xFD	; 253
    1220:	8c 93       	st	X, r24
    1222:	11 c0       	rjmp	.+34     	; 0x1246 <EXTI_enuInit+0x1c0>
			case EXTI_ON_CHANGE    : Set_Bit(MCUCR_REG, MCUCR_ISC00); Clr_Bit(MCUCR_REG, MCUCR_ISC01); break;
    1224:	a5 e5       	ldi	r26, 0x55	; 85
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e5 e5       	ldi	r30, 0x55	; 85
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	81 60       	ori	r24, 0x01	; 1
    1230:	8c 93       	st	X, r24
    1232:	a5 e5       	ldi	r26, 0x55	; 85
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e5 e5       	ldi	r30, 0x55	; 85
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	8d 7f       	andi	r24, 0xFD	; 253
    123e:	8c 93       	st	X, r24
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <EXTI_enuInit+0x1c0>
			default : Local_enuErrorState = ES_UNSUPPORTED_SENSE_Config;
    1242:	84 e0       	ldi	r24, 0x04	; 4
    1244:	89 83       	std	Y+1, r24	; 0x01

			}
		}

		if(Copy_pstrEXTILINE[EXTI_INT2].EXTI_u8State == ENABLED) {
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	9b 81       	ldd	r25, Y+3	; 0x03
    124a:	fc 01       	movw	r30, r24
    124c:	34 96       	adiw	r30, 0x04	; 4
    124e:	80 81       	ld	r24, Z
    1250:	88 35       	cpi	r24, 0x58	; 88
    1252:	29 f5       	brne	.+74     	; 0x129e <EXTI_enuInit+0x218>

			switch(Copy_pstrEXTILINE[EXTI_INT2].EXTI_u8Sense) {
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	9b 81       	ldd	r25, Y+3	; 0x03
    1258:	fc 01       	movw	r30, r24
    125a:	34 96       	adiw	r30, 0x04	; 4
    125c:	81 81       	ldd	r24, Z+1	; 0x01
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	3e 83       	std	Y+6, r19	; 0x06
    1264:	2d 83       	std	Y+5, r18	; 0x05
    1266:	8d 81       	ldd	r24, Y+5	; 0x05
    1268:	9e 81       	ldd	r25, Y+6	; 0x06
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	31 f0       	breq	.+12     	; 0x127a <EXTI_enuInit+0x1f4>
    126e:	2d 81       	ldd	r18, Y+5	; 0x05
    1270:	3e 81       	ldd	r19, Y+6	; 0x06
    1272:	21 30       	cpi	r18, 0x01	; 1
    1274:	31 05       	cpc	r19, r1
    1276:	49 f0       	breq	.+18     	; 0x128a <EXTI_enuInit+0x204>
    1278:	10 c0       	rjmp	.+32     	; 0x129a <EXTI_enuInit+0x214>

			case EXTI_FALLING_EDGE : Clr_Bit(MCUCSR_REG, MCUCSR_ISC2); break;
    127a:	a4 e5       	ldi	r26, 0x54	; 84
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e4 e5       	ldi	r30, 0x54	; 84
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	8f 7b       	andi	r24, 0xBF	; 191
    1286:	8c 93       	st	X, r24
    1288:	0a c0       	rjmp	.+20     	; 0x129e <EXTI_enuInit+0x218>
			case EXTI_RISING_EDGE  : Set_Bit(MCUCSR_REG, MCUCSR_ISC2); break;
    128a:	a4 e5       	ldi	r26, 0x54	; 84
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e4 e5       	ldi	r30, 0x54	; 84
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	80 64       	ori	r24, 0x40	; 64
    1296:	8c 93       	st	X, r24
    1298:	02 c0       	rjmp	.+4      	; 0x129e <EXTI_enuInit+0x218>
			default : Local_enuErrorState = ES_UNSUPPORTED_SENSE_Config;
    129a:	84 e0       	ldi	r24, 0x04	; 4
    129c:	89 83       	std	Y+1, r24	; 0x01
	}
	else {
		return ES_NULL_POINTER;
	}

	return Local_enuErrorState;
    129e:	39 81       	ldd	r19, Y+1	; 0x01
    12a0:	3c 83       	std	Y+4, r19	; 0x04
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <EXTI_enuInit+0x222>

			}
		}
	}
	else {
		return ES_NULL_POINTER;
    12a4:	82 e0       	ldi	r24, 0x02	; 2
    12a6:	8c 83       	std	Y+4, r24	; 0x04
    12a8:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return Local_enuErrorState;
}
    12aa:	2a 96       	adiw	r28, 0x0a	; 10
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <EXTI_enuSetSignalLatch>:



ES_t EXTI_enuSetSignalLatch(u8 Copy_u8SenseMode, u8 Copy_u8ExtiLine) {
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	27 97       	sbiw	r28, 0x07	; 7
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
    12d0:	8a 83       	std	Y+2, r24	; 0x02
    12d2:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_OK;
    12d4:	19 82       	std	Y+1, r1	; 0x01

	/*  For EXTI0 & EXTI1  */
	if( Copy_u8ExtiLine >= EXTI_INT0 && Copy_u8ExtiLine <= EXTI_INT1 ){
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	82 30       	cpi	r24, 0x02	; 2
    12da:	08 f0       	brcs	.+2      	; 0x12de <EXTI_enuSetSignalLatch+0x22>
    12dc:	cc c0       	rjmp	.+408    	; 0x1476 <EXTI_enuSetSignalLatch+0x1ba>

		switch(Copy_u8SenseMode){
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	3f 83       	std	Y+7, r19	; 0x07
    12e6:	2e 83       	std	Y+6, r18	; 0x06
    12e8:	8e 81       	ldd	r24, Y+6	; 0x06
    12ea:	9f 81       	ldd	r25, Y+7	; 0x07
    12ec:	81 30       	cpi	r24, 0x01	; 1
    12ee:	91 05       	cpc	r25, r1
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <EXTI_enuSetSignalLatch+0x38>
    12f2:	95 c0       	rjmp	.+298    	; 0x141e <EXTI_enuSetSignalLatch+0x162>
    12f4:	2e 81       	ldd	r18, Y+6	; 0x06
    12f6:	3f 81       	ldd	r19, Y+7	; 0x07
    12f8:	22 30       	cpi	r18, 0x02	; 2
    12fa:	31 05       	cpc	r19, r1
    12fc:	34 f4       	brge	.+12     	; 0x130a <EXTI_enuSetSignalLatch+0x4e>
    12fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1300:	9f 81       	ldd	r25, Y+7	; 0x07
    1302:	00 97       	sbiw	r24, 0x00	; 0
    1304:	09 f4       	brne	.+2      	; 0x1308 <EXTI_enuSetSignalLatch+0x4c>
    1306:	61 c0       	rjmp	.+194    	; 0x13ca <EXTI_enuSetSignalLatch+0x10e>
    1308:	b3 c0       	rjmp	.+358    	; 0x1470 <EXTI_enuSetSignalLatch+0x1b4>
    130a:	2e 81       	ldd	r18, Y+6	; 0x06
    130c:	3f 81       	ldd	r19, Y+7	; 0x07
    130e:	22 30       	cpi	r18, 0x02	; 2
    1310:	31 05       	cpc	r19, r1
    1312:	31 f0       	breq	.+12     	; 0x1320 <EXTI_enuSetSignalLatch+0x64>
    1314:	8e 81       	ldd	r24, Y+6	; 0x06
    1316:	9f 81       	ldd	r25, Y+7	; 0x07
    1318:	83 30       	cpi	r24, 0x03	; 3
    131a:	91 05       	cpc	r25, r1
    131c:	61 f1       	breq	.+88     	; 0x1376 <EXTI_enuSetSignalLatch+0xba>
    131e:	a8 c0       	rjmp	.+336    	; 0x1470 <EXTI_enuSetSignalLatch+0x1b4>

		/*   INT Sense Control (Trigger) For EXTI0 & EXTI1   */
		case EXTI_LOW_LEVEL    : Clr_Bit( MCUCR_REG , Copy_u8ExtiLine ); Clr_Bit( MCUCR_REG , Copy_u8ExtiLine + 1 ); break;
    1320:	a5 e5       	ldi	r26, 0x55	; 85
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e5 e5       	ldi	r30, 0x55	; 85
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	48 2f       	mov	r20, r24
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 c0       	rjmp	.+4      	; 0x133c <EXTI_enuSetSignalLatch+0x80>
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	2a 95       	dec	r18
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <EXTI_enuSetSignalLatch+0x7c>
    1340:	80 95       	com	r24
    1342:	84 23       	and	r24, r20
    1344:	8c 93       	st	X, r24
    1346:	a5 e5       	ldi	r26, 0x55	; 85
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e5 e5       	ldi	r30, 0x55	; 85
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	48 2f       	mov	r20, r24
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	88 2f       	mov	r24, r24
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	9c 01       	movw	r18, r24
    135a:	2f 5f       	subi	r18, 0xFF	; 255
    135c:	3f 4f       	sbci	r19, 0xFF	; 255
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 2e       	mov	r0, r18
    1364:	02 c0       	rjmp	.+4      	; 0x136a <EXTI_enuSetSignalLatch+0xae>
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	0a 94       	dec	r0
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <EXTI_enuSetSignalLatch+0xaa>
    136e:	80 95       	com	r24
    1370:	84 23       	and	r24, r20
    1372:	8c 93       	st	X, r24
    1374:	a7 c0       	rjmp	.+334    	; 0x14c4 <EXTI_enuSetSignalLatch+0x208>
		case EXTI_ON_CHANGE    : Set_Bit( MCUCR_REG , Copy_u8ExtiLine ); Clr_Bit( MCUCR_REG , Copy_u8ExtiLine + 1 ); break;
    1376:	a5 e5       	ldi	r26, 0x55	; 85
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e5 e5       	ldi	r30, 0x55	; 85
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	48 2f       	mov	r20, r24
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <EXTI_enuSetSignalLatch+0xd6>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	2a 95       	dec	r18
    1394:	e2 f7       	brpl	.-8      	; 0x138e <EXTI_enuSetSignalLatch+0xd2>
    1396:	84 2b       	or	r24, r20
    1398:	8c 93       	st	X, r24
    139a:	a5 e5       	ldi	r26, 0x55	; 85
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e5 e5       	ldi	r30, 0x55	; 85
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	48 2f       	mov	r20, r24
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	88 2f       	mov	r24, r24
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	9c 01       	movw	r18, r24
    13ae:	2f 5f       	subi	r18, 0xFF	; 255
    13b0:	3f 4f       	sbci	r19, 0xFF	; 255
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	02 2e       	mov	r0, r18
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <EXTI_enuSetSignalLatch+0x102>
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	0a 94       	dec	r0
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <EXTI_enuSetSignalLatch+0xfe>
    13c2:	80 95       	com	r24
    13c4:	84 23       	and	r24, r20
    13c6:	8c 93       	st	X, r24
    13c8:	7d c0       	rjmp	.+250    	; 0x14c4 <EXTI_enuSetSignalLatch+0x208>
		case EXTI_FALLING_EDGE : Clr_Bit( MCUCR_REG , Copy_u8ExtiLine ); Set_Bit( MCUCR_REG , Copy_u8ExtiLine + 1 ); break;
    13ca:	a5 e5       	ldi	r26, 0x55	; 85
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e5 e5       	ldi	r30, 0x55	; 85
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	48 2f       	mov	r20, r24
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <EXTI_enuSetSignalLatch+0x12a>
    13e2:	88 0f       	add	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	2a 95       	dec	r18
    13e8:	e2 f7       	brpl	.-8      	; 0x13e2 <EXTI_enuSetSignalLatch+0x126>
    13ea:	80 95       	com	r24
    13ec:	84 23       	and	r24, r20
    13ee:	8c 93       	st	X, r24
    13f0:	a5 e5       	ldi	r26, 0x55	; 85
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e5 e5       	ldi	r30, 0x55	; 85
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	48 2f       	mov	r20, r24
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	88 2f       	mov	r24, r24
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	9c 01       	movw	r18, r24
    1404:	2f 5f       	subi	r18, 0xFF	; 255
    1406:	3f 4f       	sbci	r19, 0xFF	; 255
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	02 2e       	mov	r0, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <EXTI_enuSetSignalLatch+0x158>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	0a 94       	dec	r0
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <EXTI_enuSetSignalLatch+0x154>
    1418:	84 2b       	or	r24, r20
    141a:	8c 93       	st	X, r24
    141c:	53 c0       	rjmp	.+166    	; 0x14c4 <EXTI_enuSetSignalLatch+0x208>
		case EXTI_RISING_EDGE  : Set_Bit( MCUCR_REG , Copy_u8ExtiLine ); Set_Bit( MCUCR_REG , Copy_u8ExtiLine + 1 ); break;
    141e:	a5 e5       	ldi	r26, 0x55	; 85
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e5 e5       	ldi	r30, 0x55	; 85
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	48 2f       	mov	r20, r24
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 c0       	rjmp	.+4      	; 0x143a <EXTI_enuSetSignalLatch+0x17e>
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	2a 95       	dec	r18
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <EXTI_enuSetSignalLatch+0x17a>
    143e:	84 2b       	or	r24, r20
    1440:	8c 93       	st	X, r24
    1442:	a5 e5       	ldi	r26, 0x55	; 85
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e5 e5       	ldi	r30, 0x55	; 85
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	88 2f       	mov	r24, r24
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	9c 01       	movw	r18, r24
    1456:	2f 5f       	subi	r18, 0xFF	; 255
    1458:	3f 4f       	sbci	r19, 0xFF	; 255
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	02 2e       	mov	r0, r18
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <EXTI_enuSetSignalLatch+0x1aa>
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	0a 94       	dec	r0
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <EXTI_enuSetSignalLatch+0x1a6>
    146a:	84 2b       	or	r24, r20
    146c:	8c 93       	st	X, r24
    146e:	2a c0       	rjmp	.+84     	; 0x14c4 <EXTI_enuSetSignalLatch+0x208>
		default : Local_enuErrorState = ES_UNSUPPORTED_SENSE_Config;
    1470:	84 e0       	ldi	r24, 0x04	; 4
    1472:	89 83       	std	Y+1, r24	; 0x01
    1474:	27 c0       	rjmp	.+78     	; 0x14c4 <EXTI_enuSetSignalLatch+0x208>

		}
	}

	/*  For EXTI2  */
	else if (Copy_u8ExtiLine == EXTI_INT2) {
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	82 30       	cpi	r24, 0x02	; 2
    147a:	11 f5       	brne	.+68     	; 0x14c0 <EXTI_enuSetSignalLatch+0x204>

		switch(Copy_u8SenseMode) {
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	3d 83       	std	Y+5, r19	; 0x05
    1484:	2c 83       	std	Y+4, r18	; 0x04
    1486:	8c 81       	ldd	r24, Y+4	; 0x04
    1488:	9d 81       	ldd	r25, Y+5	; 0x05
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	31 f0       	breq	.+12     	; 0x149a <EXTI_enuSetSignalLatch+0x1de>
    148e:	2c 81       	ldd	r18, Y+4	; 0x04
    1490:	3d 81       	ldd	r19, Y+5	; 0x05
    1492:	21 30       	cpi	r18, 0x01	; 1
    1494:	31 05       	cpc	r19, r1
    1496:	49 f0       	breq	.+18     	; 0x14aa <EXTI_enuSetSignalLatch+0x1ee>
    1498:	10 c0       	rjmp	.+32     	; 0x14ba <EXTI_enuSetSignalLatch+0x1fe>

		/*    INT Sense Control (Trigger) For EXTI2   */
		case EXTI_FALLING_EDGE : Clr_Bit( MCUCSR_REG , MCUCSR_ISC2);  break;
    149a:	a4 e5       	ldi	r26, 0x54	; 84
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	e4 e5       	ldi	r30, 0x54	; 84
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	8f 7b       	andi	r24, 0xBF	; 191
    14a6:	8c 93       	st	X, r24
    14a8:	0d c0       	rjmp	.+26     	; 0x14c4 <EXTI_enuSetSignalLatch+0x208>
		case EXTI_RISING_EDGE  : Set_Bit( MCUCSR_REG , MCUCSR_ISC2);  break;
    14aa:	a4 e5       	ldi	r26, 0x54	; 84
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e4 e5       	ldi	r30, 0x54	; 84
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	80 64       	ori	r24, 0x40	; 64
    14b6:	8c 93       	st	X, r24
    14b8:	05 c0       	rjmp	.+10     	; 0x14c4 <EXTI_enuSetSignalLatch+0x208>
		default : Local_enuErrorState = ES_UNSUPPORTED_SENSE_Config;
    14ba:	84 e0       	ldi	r24, 0x04	; 4
    14bc:	89 83       	std	Y+1, r24	; 0x01
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <EXTI_enuSetSignalLatch+0x208>

		}
	}
	else {

		Local_enuErrorState = ES_OUT_OF_RANGE;
    14c0:	83 e0       	ldi	r24, 0x03	; 3
    14c2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c6:	27 96       	adiw	r28, 0x07	; 7
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	08 95       	ret

000014d8 <EXTI_enuEnableInterrupt>:


ES_t   EXTI_enuEnableInterrupt(u8 Copy_u8ExtiLine) {
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	00 d0       	rcall	.+0      	; 0x14de <EXTI_enuEnableInterrupt+0x6>
    14de:	00 d0       	rcall	.+0      	; 0x14e0 <EXTI_enuEnableInterrupt+0x8>
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorState = ES_OK;
    14e6:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8ExtiLine) {
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	3c 83       	std	Y+4, r19	; 0x04
    14f0:	2b 83       	std	Y+3, r18	; 0x03
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	9c 81       	ldd	r25, Y+4	; 0x04
    14f6:	81 30       	cpi	r24, 0x01	; 1
    14f8:	91 05       	cpc	r25, r1
    14fa:	89 f0       	breq	.+34     	; 0x151e <EXTI_enuEnableInterrupt+0x46>
    14fc:	2b 81       	ldd	r18, Y+3	; 0x03
    14fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1500:	22 30       	cpi	r18, 0x02	; 2
    1502:	31 05       	cpc	r19, r1
    1504:	a1 f0       	breq	.+40     	; 0x152e <EXTI_enuEnableInterrupt+0x56>
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	9c 81       	ldd	r25, Y+4	; 0x04
    150a:	00 97       	sbiw	r24, 0x00	; 0
    150c:	c1 f4       	brne	.+48     	; 0x153e <EXTI_enuEnableInterrupt+0x66>
	case EXTI_INT0 : Set_Bit(GICR_REG ,GICR_INT0); break;
    150e:	ab e5       	ldi	r26, 0x5B	; 91
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	eb e5       	ldi	r30, 0x5B	; 91
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	80 64       	ori	r24, 0x40	; 64
    151a:	8c 93       	st	X, r24
    151c:	12 c0       	rjmp	.+36     	; 0x1542 <EXTI_enuEnableInterrupt+0x6a>
	case EXTI_INT1 : Set_Bit(GICR_REG ,GICR_INT1); break;
    151e:	ab e5       	ldi	r26, 0x5B	; 91
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	eb e5       	ldi	r30, 0x5B	; 91
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	80 68       	ori	r24, 0x80	; 128
    152a:	8c 93       	st	X, r24
    152c:	0a c0       	rjmp	.+20     	; 0x1542 <EXTI_enuEnableInterrupt+0x6a>
	case EXTI_INT2 : Set_Bit(GICR_REG ,GICR_INT2); break;
    152e:	ab e5       	ldi	r26, 0x5B	; 91
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	eb e5       	ldi	r30, 0x5B	; 91
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	80 62       	ori	r24, 0x20	; 32
    153a:	8c 93       	st	X, r24
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <EXTI_enuEnableInterrupt+0x6a>
	default : Local_enuErrorState = ES_OUT_OF_RANGE;
    153e:	83 e0       	ldi	r24, 0x03	; 3
    1540:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_enuErrorState;
    1542:	89 81       	ldd	r24, Y+1	; 0x01
}
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	08 95       	ret

00001552 <EXTI_enuDisableInterrupt>:


ES_t   EXTI_enuDisableInterrupt(u8 Copy_u8ExtiLine) {
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	00 d0       	rcall	.+0      	; 0x1558 <EXTI_enuDisableInterrupt+0x6>
    1558:	00 d0       	rcall	.+0      	; 0x155a <EXTI_enuDisableInterrupt+0x8>
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorState = ES_OK;
    1560:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8ExtiLine) {
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	3c 83       	std	Y+4, r19	; 0x04
    156a:	2b 83       	std	Y+3, r18	; 0x03
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	9c 81       	ldd	r25, Y+4	; 0x04
    1570:	81 30       	cpi	r24, 0x01	; 1
    1572:	91 05       	cpc	r25, r1
    1574:	89 f0       	breq	.+34     	; 0x1598 <EXTI_enuDisableInterrupt+0x46>
    1576:	2b 81       	ldd	r18, Y+3	; 0x03
    1578:	3c 81       	ldd	r19, Y+4	; 0x04
    157a:	22 30       	cpi	r18, 0x02	; 2
    157c:	31 05       	cpc	r19, r1
    157e:	a1 f0       	breq	.+40     	; 0x15a8 <EXTI_enuDisableInterrupt+0x56>
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	9c 81       	ldd	r25, Y+4	; 0x04
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	c1 f4       	brne	.+48     	; 0x15b8 <EXTI_enuDisableInterrupt+0x66>

	case EXTI_INT0 : Clr_Bit(GICR_REG ,GICR_INT0); break;
    1588:	ab e5       	ldi	r26, 0x5B	; 91
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	eb e5       	ldi	r30, 0x5B	; 91
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	8f 7b       	andi	r24, 0xBF	; 191
    1594:	8c 93       	st	X, r24
    1596:	12 c0       	rjmp	.+36     	; 0x15bc <EXTI_enuDisableInterrupt+0x6a>
	case EXTI_INT1 : Clr_Bit(GICR_REG ,GICR_INT1); break;
    1598:	ab e5       	ldi	r26, 0x5B	; 91
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	eb e5       	ldi	r30, 0x5B	; 91
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	8f 77       	andi	r24, 0x7F	; 127
    15a4:	8c 93       	st	X, r24
    15a6:	0a c0       	rjmp	.+20     	; 0x15bc <EXTI_enuDisableInterrupt+0x6a>
	case EXTI_INT2 : Clr_Bit(GICR_REG ,GICR_INT2); break;
    15a8:	ab e5       	ldi	r26, 0x5B	; 91
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	eb e5       	ldi	r30, 0x5B	; 91
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	8f 7d       	andi	r24, 0xDF	; 223
    15b4:	8c 93       	st	X, r24
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <EXTI_enuDisableInterrupt+0x6a>
	default : Local_enuErrorState = ES_OUT_OF_RANGE;
    15b8:	83 e0       	ldi	r24, 0x03	; 3
    15ba:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_enuErrorState;
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	08 95       	ret

000015cc <EXTI_enuClearFlag>:




ES_t EXTI_enuClearFlag(u8 Copy_u8ExtiLine) {
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	00 d0       	rcall	.+0      	; 0x15d2 <EXTI_enuClearFlag+0x6>
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <EXTI_enuClearFlag+0x8>
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorState = ES_OK;
    15da:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8ExtiLine) {
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	3c 83       	std	Y+4, r19	; 0x04
    15e4:	2b 83       	std	Y+3, r18	; 0x03
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	81 30       	cpi	r24, 0x01	; 1
    15ec:	91 05       	cpc	r25, r1
    15ee:	89 f0       	breq	.+34     	; 0x1612 <EXTI_enuClearFlag+0x46>
    15f0:	2b 81       	ldd	r18, Y+3	; 0x03
    15f2:	3c 81       	ldd	r19, Y+4	; 0x04
    15f4:	22 30       	cpi	r18, 0x02	; 2
    15f6:	31 05       	cpc	r19, r1
    15f8:	a1 f0       	breq	.+40     	; 0x1622 <EXTI_enuClearFlag+0x56>
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	9c 81       	ldd	r25, Y+4	; 0x04
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	c1 f4       	brne	.+48     	; 0x1632 <EXTI_enuClearFlag+0x66>
	case EXTI_INT0 : Set_Bit(GIFR_REG ,GICR_INT0); break;
    1602:	aa e5       	ldi	r26, 0x5A	; 90
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	ea e5       	ldi	r30, 0x5A	; 90
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	80 64       	ori	r24, 0x40	; 64
    160e:	8c 93       	st	X, r24
    1610:	12 c0       	rjmp	.+36     	; 0x1636 <EXTI_enuClearFlag+0x6a>
	case EXTI_INT1 : Set_Bit(GIFR_REG ,GICR_INT1); break;
    1612:	aa e5       	ldi	r26, 0x5A	; 90
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	ea e5       	ldi	r30, 0x5A	; 90
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	80 68       	ori	r24, 0x80	; 128
    161e:	8c 93       	st	X, r24
    1620:	0a c0       	rjmp	.+20     	; 0x1636 <EXTI_enuClearFlag+0x6a>
	case EXTI_INT2 : Set_Bit(GIFR_REG ,GICR_INT2); break;
    1622:	aa e5       	ldi	r26, 0x5A	; 90
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	ea e5       	ldi	r30, 0x5A	; 90
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	80 62       	ori	r24, 0x20	; 32
    162e:	8c 93       	st	X, r24
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <EXTI_enuClearFlag+0x6a>
	default : Local_enuErrorState = ES_OUT_OF_RANGE;
    1632:	83 e0       	ldi	r24, 0x03	; 3
    1634:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_enuErrorState;
    1636:	89 81       	ldd	r24, Y+1	; 0x01
}
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <EXTI_u8GetFlag>:




ES_t EXTI_u8GetFlag(u8 Copy_u8ExtiLine, u8 * Copy_pu8IntFlag){
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	00 d0       	rcall	.+0      	; 0x164c <EXTI_u8GetFlag+0x6>
    164c:	00 d0       	rcall	.+0      	; 0x164e <EXTI_u8GetFlag+0x8>
    164e:	00 d0       	rcall	.+0      	; 0x1650 <EXTI_u8GetFlag+0xa>
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	8a 83       	std	Y+2, r24	; 0x02
    1656:	7c 83       	std	Y+4, r23	; 0x04
    1658:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_OK;
    165a:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8ExtiLine) {
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	3e 83       	std	Y+6, r19	; 0x06
    1664:	2d 83       	std	Y+5, r18	; 0x05
    1666:	8d 81       	ldd	r24, Y+5	; 0x05
    1668:	9e 81       	ldd	r25, Y+6	; 0x06
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	91 05       	cpc	r25, r1
    166e:	a9 f0       	breq	.+42     	; 0x169a <EXTI_u8GetFlag+0x54>
    1670:	2d 81       	ldd	r18, Y+5	; 0x05
    1672:	3e 81       	ldd	r19, Y+6	; 0x06
    1674:	22 30       	cpi	r18, 0x02	; 2
    1676:	31 05       	cpc	r19, r1
    1678:	d1 f0       	breq	.+52     	; 0x16ae <EXTI_u8GetFlag+0x68>
    167a:	8d 81       	ldd	r24, Y+5	; 0x05
    167c:	9e 81       	ldd	r25, Y+6	; 0x06
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	09 f5       	brne	.+66     	; 0x16c4 <EXTI_u8GetFlag+0x7e>

	case EXTI_INT0 : *Copy_pu8IntFlag = Get_Bit(GICR_REG ,GICR_INT0); break;
    1682:	eb e5       	ldi	r30, 0x5B	; 91
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	82 95       	swap	r24
    168a:	86 95       	lsr	r24
    168c:	86 95       	lsr	r24
    168e:	83 70       	andi	r24, 0x03	; 3
    1690:	81 70       	andi	r24, 0x01	; 1
    1692:	eb 81       	ldd	r30, Y+3	; 0x03
    1694:	fc 81       	ldd	r31, Y+4	; 0x04
    1696:	80 83       	st	Z, r24
    1698:	17 c0       	rjmp	.+46     	; 0x16c8 <EXTI_u8GetFlag+0x82>
	case EXTI_INT1 : *Copy_pu8IntFlag = Get_Bit(GICR_REG ,GICR_INT1); break;
    169a:	eb e5       	ldi	r30, 0x5B	; 91
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	88 1f       	adc	r24, r24
    16a2:	88 27       	eor	r24, r24
    16a4:	88 1f       	adc	r24, r24
    16a6:	eb 81       	ldd	r30, Y+3	; 0x03
    16a8:	fc 81       	ldd	r31, Y+4	; 0x04
    16aa:	80 83       	st	Z, r24
    16ac:	0d c0       	rjmp	.+26     	; 0x16c8 <EXTI_u8GetFlag+0x82>
	case EXTI_INT2 : *Copy_pu8IntFlag = Get_Bit(GICR_REG ,GICR_INT2); break;
    16ae:	eb e5       	ldi	r30, 0x5B	; 91
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	82 95       	swap	r24
    16b6:	86 95       	lsr	r24
    16b8:	87 70       	andi	r24, 0x07	; 7
    16ba:	81 70       	andi	r24, 0x01	; 1
    16bc:	eb 81       	ldd	r30, Y+3	; 0x03
    16be:	fc 81       	ldd	r31, Y+4	; 0x04
    16c0:	80 83       	st	Z, r24
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <EXTI_u8GetFlag+0x82>
	default : Local_enuErrorState = ES_OUT_OF_RANGE;
    16c4:	83 e0       	ldi	r24, 0x03	; 3
    16c6:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_enuErrorState;
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    16ca:	26 96       	adiw	r28, 0x06	; 6
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	08 95       	ret

000016dc <EXTI_enuSetCallBack>:





ES_t EXTI_enuSetCallBack(void (*Copy_pvoidCallBack)(void) , u8 Copy_u8ExtiLine ) {
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <EXTI_enuSetCallBack+0x6>
    16e2:	00 d0       	rcall	.+0      	; 0x16e4 <EXTI_enuSetCallBack+0x8>
    16e4:	0f 92       	push	r0
    16e6:	cd b7       	in	r28, 0x3d	; 61
    16e8:	de b7       	in	r29, 0x3e	; 62
    16ea:	9b 83       	std	Y+3, r25	; 0x03
    16ec:	8a 83       	std	Y+2, r24	; 0x02
    16ee:	6c 83       	std	Y+4, r22	; 0x04

	ES_t Local_enuErrorState = ES_OK;
    16f0:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pvoidCallBack != NULL) {
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	9b 81       	ldd	r25, Y+3	; 0x03
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	a9 f0       	breq	.+42     	; 0x1724 <EXTI_enuSetCallBack+0x48>

		if(Copy_u8ExtiLine >= EXTI_INT0 && Copy_u8ExtiLine <= EXTI_INT2) {
    16fa:	8c 81       	ldd	r24, Y+4	; 0x04
    16fc:	83 30       	cpi	r24, 0x03	; 3
    16fe:	78 f4       	brcc	.+30     	; 0x171e <EXTI_enuSetCallBack+0x42>

			EXTI_CallBack[Copy_u8ExtiLine] = Copy_pvoidCallBack;
    1700:	8c 81       	ldd	r24, Y+4	; 0x04
    1702:	88 2f       	mov	r24, r24
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	fc 01       	movw	r30, r24
    170c:	e0 52       	subi	r30, 0x20	; 32
    170e:	fe 4f       	sbci	r31, 0xFE	; 254
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	9b 81       	ldd	r25, Y+3	; 0x03
    1714:	91 83       	std	Z+1, r25	; 0x01
    1716:	80 83       	st	Z, r24
	else {

		return ES_NULL_POINTER;
	}

	return Local_enuErrorState;
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	8d 83       	std	Y+5, r24	; 0x05
    171c:	05 c0       	rjmp	.+10     	; 0x1728 <EXTI_enuSetCallBack+0x4c>

			EXTI_CallBack[Copy_u8ExtiLine] = Copy_pvoidCallBack;
		}
		else {

			return ES_OUT_OF_RANGE;
    171e:	83 e0       	ldi	r24, 0x03	; 3
    1720:	8d 83       	std	Y+5, r24	; 0x05
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <EXTI_enuSetCallBack+0x4c>
		}
	}
	else {

		return ES_NULL_POINTER;
    1724:	82 e0       	ldi	r24, 0x02	; 2
    1726:	8d 83       	std	Y+5, r24	; 0x05
    1728:	8d 81       	ldd	r24, Y+5	; 0x05
	}

	return Local_enuErrorState;
}
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <__vector_1>:


void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    173a:	1f 92       	push	r1
    173c:	0f 92       	push	r0
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	0f 92       	push	r0
    1742:	11 24       	eor	r1, r1
    1744:	2f 93       	push	r18
    1746:	3f 93       	push	r19
    1748:	4f 93       	push	r20
    174a:	5f 93       	push	r21
    174c:	6f 93       	push	r22
    174e:	7f 93       	push	r23
    1750:	8f 93       	push	r24
    1752:	9f 93       	push	r25
    1754:	af 93       	push	r26
    1756:	bf 93       	push	r27
    1758:	ef 93       	push	r30
    175a:	ff 93       	push	r31
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
	if( EXTI_CallBack[0] != NULL ){
    1764:	80 91 e0 01 	lds	r24, 0x01E0
    1768:	90 91 e1 01 	lds	r25, 0x01E1
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	41 f0       	breq	.+16     	; 0x1780 <__vector_1+0x46>

		EXTI_CallBack[0]();
    1770:	e0 91 e0 01 	lds	r30, 0x01E0
    1774:	f0 91 e1 01 	lds	r31, 0x01E1
    1778:	09 95       	icall
		EXTI_enuClearFlag( EXTI_INT0 );
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <EXTI_enuClearFlag>

	}
}
    1780:	cf 91       	pop	r28
    1782:	df 91       	pop	r29
    1784:	ff 91       	pop	r31
    1786:	ef 91       	pop	r30
    1788:	bf 91       	pop	r27
    178a:	af 91       	pop	r26
    178c:	9f 91       	pop	r25
    178e:	8f 91       	pop	r24
    1790:	7f 91       	pop	r23
    1792:	6f 91       	pop	r22
    1794:	5f 91       	pop	r21
    1796:	4f 91       	pop	r20
    1798:	3f 91       	pop	r19
    179a:	2f 91       	pop	r18
    179c:	0f 90       	pop	r0
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	0f 90       	pop	r0
    17a2:	1f 90       	pop	r1
    17a4:	18 95       	reti

000017a6 <__vector_2>:

void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
    17a6:	1f 92       	push	r1
    17a8:	0f 92       	push	r0
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	0f 92       	push	r0
    17ae:	11 24       	eor	r1, r1
    17b0:	2f 93       	push	r18
    17b2:	3f 93       	push	r19
    17b4:	4f 93       	push	r20
    17b6:	5f 93       	push	r21
    17b8:	6f 93       	push	r22
    17ba:	7f 93       	push	r23
    17bc:	8f 93       	push	r24
    17be:	9f 93       	push	r25
    17c0:	af 93       	push	r26
    17c2:	bf 93       	push	r27
    17c4:	ef 93       	push	r30
    17c6:	ff 93       	push	r31
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
	if( EXTI_CallBack[1] != NULL ){
    17d0:	80 91 e2 01 	lds	r24, 0x01E2
    17d4:	90 91 e3 01 	lds	r25, 0x01E3
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	41 f0       	breq	.+16     	; 0x17ec <__vector_2+0x46>

		EXTI_CallBack[1]();
    17dc:	e0 91 e2 01 	lds	r30, 0x01E2
    17e0:	f0 91 e3 01 	lds	r31, 0x01E3
    17e4:	09 95       	icall
		EXTI_enuClearFlag( EXTI_INT1 );
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <EXTI_enuClearFlag>

	}
}
    17ec:	cf 91       	pop	r28
    17ee:	df 91       	pop	r29
    17f0:	ff 91       	pop	r31
    17f2:	ef 91       	pop	r30
    17f4:	bf 91       	pop	r27
    17f6:	af 91       	pop	r26
    17f8:	9f 91       	pop	r25
    17fa:	8f 91       	pop	r24
    17fc:	7f 91       	pop	r23
    17fe:	6f 91       	pop	r22
    1800:	5f 91       	pop	r21
    1802:	4f 91       	pop	r20
    1804:	3f 91       	pop	r19
    1806:	2f 91       	pop	r18
    1808:	0f 90       	pop	r0
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	0f 90       	pop	r0
    180e:	1f 90       	pop	r1
    1810:	18 95       	reti

00001812 <__vector_3>:

void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
    1812:	1f 92       	push	r1
    1814:	0f 92       	push	r0
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	0f 92       	push	r0
    181a:	11 24       	eor	r1, r1
    181c:	2f 93       	push	r18
    181e:	3f 93       	push	r19
    1820:	4f 93       	push	r20
    1822:	5f 93       	push	r21
    1824:	6f 93       	push	r22
    1826:	7f 93       	push	r23
    1828:	8f 93       	push	r24
    182a:	9f 93       	push	r25
    182c:	af 93       	push	r26
    182e:	bf 93       	push	r27
    1830:	ef 93       	push	r30
    1832:	ff 93       	push	r31
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
	if( EXTI_CallBack[2] != NULL ){
    183c:	80 91 e4 01 	lds	r24, 0x01E4
    1840:	90 91 e5 01 	lds	r25, 0x01E5
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	41 f0       	breq	.+16     	; 0x1858 <__vector_3+0x46>

		EXTI_CallBack[2]();
    1848:	e0 91 e4 01 	lds	r30, 0x01E4
    184c:	f0 91 e5 01 	lds	r31, 0x01E5
    1850:	09 95       	icall
		EXTI_enuClearFlag( EXTI_INT2 );
    1852:	82 e0       	ldi	r24, 0x02	; 2
    1854:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <EXTI_enuClearFlag>

	}
}
    1858:	cf 91       	pop	r28
    185a:	df 91       	pop	r29
    185c:	ff 91       	pop	r31
    185e:	ef 91       	pop	r30
    1860:	bf 91       	pop	r27
    1862:	af 91       	pop	r26
    1864:	9f 91       	pop	r25
    1866:	8f 91       	pop	r24
    1868:	7f 91       	pop	r23
    186a:	6f 91       	pop	r22
    186c:	5f 91       	pop	r21
    186e:	4f 91       	pop	r20
    1870:	3f 91       	pop	r19
    1872:	2f 91       	pop	r18
    1874:	0f 90       	pop	r0
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	0f 90       	pop	r0
    187a:	1f 90       	pop	r1
    187c:	18 95       	reti

0000187e <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"

ES_t DIO_enuInit(void)
{
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	0f 92       	push	r0
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	89 83       	std	Y+1, r24	; 0x01

	DDRA = CONC(PA_PIN7_DIR, PA_PIN6_DIR, PA_PIN5_DIR, PA_PIN4_DIR, PA_PIN3_DIR, PA_PIN2_DIR, PA_PIN1_DIR, PA_PIN0_DIR);
    188c:	ea e3       	ldi	r30, 0x3A	; 58
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	8e ef       	ldi	r24, 0xFE	; 254
    1892:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR, PB_PIN6_DIR, PB_PIN5_DIR, PB_PIN4_DIR, PB_PIN3_DIR, PB_PIN2_DIR, PB_PIN1_DIR, PB_PIN0_DIR);
    1894:	e7 e3       	ldi	r30, 0x37	; 55
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	8f ef       	ldi	r24, 0xFF	; 255
    189a:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR, PC_PIN6_DIR, PC_PIN5_DIR, PC_PIN4_DIR, PC_PIN3_DIR, PC_PIN2_DIR, PC_PIN1_DIR, PC_PIN0_DIR);
    189c:	e4 e3       	ldi	r30, 0x34	; 52
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	8f ef       	ldi	r24, 0xFF	; 255
    18a2:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR, PD_PIN6_DIR, PD_PIN5_DIR, PD_PIN4_DIR, PD_PIN3_DIR, PD_PIN2_DIR, PD_PIN1_DIR, PD_PIN0_DIR);
    18a4:	e1 e3       	ldi	r30, 0x31	; 49
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	82 ea       	ldi	r24, 0xA2	; 162
    18aa:	80 83       	st	Z, r24

	PORTA = CONC(PA_PIN7_VAL, PA_PIN6_VAL, PA_PIN5_VAL, PA_PIN4_VAL, PA_PIN3_VAL, PA_PIN2_VAL, PA_PIN1_VAL, PA_PIN0_VAL);
    18ac:	eb e3       	ldi	r30, 0x3B	; 59
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	10 82       	st	Z, r1
	PORTB = CONC(PB_PIN7_VAL, PB_PIN6_VAL, PB_PIN5_VAL, PB_PIN4_VAL, PB_PIN3_VAL, PB_PIN2_VAL, PB_PIN1_VAL, PB_PIN0_VAL);
    18b2:	e8 e3       	ldi	r30, 0x38	; 56
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	10 82       	st	Z, r1
	PORTC = CONC(PC_PIN7_VAL, PC_PIN6_VAL, PC_PIN5_VAL, PC_PIN4_VAL, PC_PIN3_VAL, PC_PIN2_VAL, PC_PIN1_VAL, PC_PIN0_VAL);
    18b8:	e5 e3       	ldi	r30, 0x35	; 53
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	10 82       	st	Z, r1
	PORTD = CONC(PD_PIN7_VAL, PD_PIN6_VAL, PD_PIN5_VAL, PD_PIN4_VAL, PD_PIN3_VAL, PD_PIN2_VAL, PD_PIN1_VAL, PD_PIN0_VAL);
    18be:	e2 e3       	ldi	r30, 0x32	; 50
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	84 e1       	ldi	r24, 0x14	; 20
    18c4:	80 83       	st	Z, r24

	Local_enuErrorState = ES_OK;
    18c6:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    18ca:	0f 90       	pop	r0
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <DIO_enuSetPortDirection+0x6>
    18d8:	00 d0       	rcall	.+0      	; 0x18da <DIO_enuSetPortDirection+0x8>
    18da:	0f 92       	push	r0
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	8a 83       	std	Y+2, r24	; 0x02
    18e2:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8PortID <= DIO_PORTD)
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	84 30       	cpi	r24, 0x04	; 4
    18ec:	a0 f5       	brcc	.+104    	; 0x1956 <DIO_enuSetPortDirection+0x84>
    {
    	switch(Copy_u8PortID)
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	3d 83       	std	Y+5, r19	; 0x05
    18f6:	2c 83       	std	Y+4, r18	; 0x04
    18f8:	8c 81       	ldd	r24, Y+4	; 0x04
    18fa:	9d 81       	ldd	r25, Y+5	; 0x05
    18fc:	81 30       	cpi	r24, 0x01	; 1
    18fe:	91 05       	cpc	r25, r1
    1900:	d1 f0       	breq	.+52     	; 0x1936 <DIO_enuSetPortDirection+0x64>
    1902:	2c 81       	ldd	r18, Y+4	; 0x04
    1904:	3d 81       	ldd	r19, Y+5	; 0x05
    1906:	22 30       	cpi	r18, 0x02	; 2
    1908:	31 05       	cpc	r19, r1
    190a:	2c f4       	brge	.+10     	; 0x1916 <DIO_enuSetPortDirection+0x44>
    190c:	8c 81       	ldd	r24, Y+4	; 0x04
    190e:	9d 81       	ldd	r25, Y+5	; 0x05
    1910:	00 97       	sbiw	r24, 0x00	; 0
    1912:	61 f0       	breq	.+24     	; 0x192c <DIO_enuSetPortDirection+0x5a>
    1914:	1e c0       	rjmp	.+60     	; 0x1952 <DIO_enuSetPortDirection+0x80>
    1916:	2c 81       	ldd	r18, Y+4	; 0x04
    1918:	3d 81       	ldd	r19, Y+5	; 0x05
    191a:	22 30       	cpi	r18, 0x02	; 2
    191c:	31 05       	cpc	r19, r1
    191e:	81 f0       	breq	.+32     	; 0x1940 <DIO_enuSetPortDirection+0x6e>
    1920:	8c 81       	ldd	r24, Y+4	; 0x04
    1922:	9d 81       	ldd	r25, Y+5	; 0x05
    1924:	83 30       	cpi	r24, 0x03	; 3
    1926:	91 05       	cpc	r25, r1
    1928:	81 f0       	breq	.+32     	; 0x194a <DIO_enuSetPortDirection+0x78>
    192a:	13 c0       	rjmp	.+38     	; 0x1952 <DIO_enuSetPortDirection+0x80>
    	{
    	case DIO_PORTA:
    		 DDRA = Copy_u8Value;
    192c:	ea e3       	ldi	r30, 0x3A	; 58
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	80 83       	st	Z, r24
    1934:	0e c0       	rjmp	.+28     	; 0x1952 <DIO_enuSetPortDirection+0x80>
    		 break;
    	case DIO_PORTB:
    	     DDRB = Copy_u8Value;
    1936:	e7 e3       	ldi	r30, 0x37	; 55
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	80 83       	st	Z, r24
    193e:	09 c0       	rjmp	.+18     	; 0x1952 <DIO_enuSetPortDirection+0x80>
    	     break;
    	case DIO_PORTC:
    	     DDRC = Copy_u8Value;
    1940:	e4 e3       	ldi	r30, 0x34	; 52
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	80 83       	st	Z, r24
    1948:	04 c0       	rjmp	.+8      	; 0x1952 <DIO_enuSetPortDirection+0x80>
    	     break;
    	case DIO_PORTD:
    	  	 DDRD = Copy_u8Value;
    194a:	e1 e3       	ldi	r30, 0x31	; 49
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	80 83       	st	Z, r24
    	     break;
        }
    	Local_enuErrorState = ES_OK;
    1952:	19 82       	std	Y+1, r1	; 0x01
    1954:	02 c0       	rjmp	.+4      	; 0x195a <DIO_enuSetPortDirection+0x88>
    }
    else
    {
    	Local_enuErrorState = ES_OUT_OF_RANGE;
    1956:	83 e0       	ldi	r24, 0x03	; 3
    1958:	89 83       	std	Y+1, r24	; 0x01
    }
	return Local_enuErrorState;
    195a:	89 81       	ldd	r24, Y+1	; 0x01
}
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	cf 91       	pop	r28
    1968:	df 91       	pop	r29
    196a:	08 95       	ret

0000196c <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	00 d0       	rcall	.+0      	; 0x1972 <DIO_enuSetPortValue+0x6>
    1972:	00 d0       	rcall	.+0      	; 0x1974 <DIO_enuSetPortValue+0x8>
    1974:	0f 92       	push	r0
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	8a 83       	std	Y+2, r24	; 0x02
    197c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	84 30       	cpi	r24, 0x04	; 4
    1986:	a0 f5       	brcc	.+104    	; 0x19f0 <DIO_enuSetPortValue+0x84>
	{
    	switch(Copy_u8PortID)
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	3d 83       	std	Y+5, r19	; 0x05
    1990:	2c 83       	std	Y+4, r18	; 0x04
    1992:	8c 81       	ldd	r24, Y+4	; 0x04
    1994:	9d 81       	ldd	r25, Y+5	; 0x05
    1996:	81 30       	cpi	r24, 0x01	; 1
    1998:	91 05       	cpc	r25, r1
    199a:	d1 f0       	breq	.+52     	; 0x19d0 <DIO_enuSetPortValue+0x64>
    199c:	2c 81       	ldd	r18, Y+4	; 0x04
    199e:	3d 81       	ldd	r19, Y+5	; 0x05
    19a0:	22 30       	cpi	r18, 0x02	; 2
    19a2:	31 05       	cpc	r19, r1
    19a4:	2c f4       	brge	.+10     	; 0x19b0 <DIO_enuSetPortValue+0x44>
    19a6:	8c 81       	ldd	r24, Y+4	; 0x04
    19a8:	9d 81       	ldd	r25, Y+5	; 0x05
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	61 f0       	breq	.+24     	; 0x19c6 <DIO_enuSetPortValue+0x5a>
    19ae:	1e c0       	rjmp	.+60     	; 0x19ec <DIO_enuSetPortValue+0x80>
    19b0:	2c 81       	ldd	r18, Y+4	; 0x04
    19b2:	3d 81       	ldd	r19, Y+5	; 0x05
    19b4:	22 30       	cpi	r18, 0x02	; 2
    19b6:	31 05       	cpc	r19, r1
    19b8:	81 f0       	breq	.+32     	; 0x19da <DIO_enuSetPortValue+0x6e>
    19ba:	8c 81       	ldd	r24, Y+4	; 0x04
    19bc:	9d 81       	ldd	r25, Y+5	; 0x05
    19be:	83 30       	cpi	r24, 0x03	; 3
    19c0:	91 05       	cpc	r25, r1
    19c2:	81 f0       	breq	.+32     	; 0x19e4 <DIO_enuSetPortValue+0x78>
    19c4:	13 c0       	rjmp	.+38     	; 0x19ec <DIO_enuSetPortValue+0x80>
	    {
	   	case DIO_PORTA:
	   		 PORTA = Copy_u8Value;
    19c6:	eb e3       	ldi	r30, 0x3B	; 59
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	8b 81       	ldd	r24, Y+3	; 0x03
    19cc:	80 83       	st	Z, r24
    19ce:	0e c0       	rjmp	.+28     	; 0x19ec <DIO_enuSetPortValue+0x80>
	   		 break;
	   	case DIO_PORTB:
    		 PORTB = Copy_u8Value;
    19d0:	e8 e3       	ldi	r30, 0x38	; 56
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	80 83       	st	Z, r24
    19d8:	09 c0       	rjmp	.+18     	; 0x19ec <DIO_enuSetPortValue+0x80>
    		 break;
	    case DIO_PORTC:
	   		 PORTC = Copy_u8Value;
    19da:	e5 e3       	ldi	r30, 0x35	; 53
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	80 83       	st	Z, r24
    19e2:	04 c0       	rjmp	.+8      	; 0x19ec <DIO_enuSetPortValue+0x80>
	   	     break;
	   	case DIO_PORTD:
	   		 PORTD = Copy_u8Value;
    19e4:	e2 e3       	ldi	r30, 0x32	; 50
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	80 83       	st	Z, r24
    	     break;
	    }
	   	Local_enuErrorState = ES_OK;
    19ec:	19 82       	std	Y+1, r1	; 0x01
    19ee:	02 c0       	rjmp	.+4      	; 0x19f4 <DIO_enuSetPortValue+0x88>
	}
	else
    {
		Local_enuErrorState = ES_OUT_OF_RANGE;
    19f0:	83 e0       	ldi	r24, 0x03	; 3
    19f2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	08 95       	ret

00001a06 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID, u8 * Copy_u8Value)
{
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	00 d0       	rcall	.+0      	; 0x1a0c <DIO_enuGetPortValue+0x6>
    1a0c:	00 d0       	rcall	.+0      	; 0x1a0e <DIO_enuGetPortValue+0x8>
    1a0e:	00 d0       	rcall	.+0      	; 0x1a10 <DIO_enuGetPortValue+0xa>
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	8a 83       	std	Y+2, r24	; 0x02
    1a16:	7c 83       	std	Y+4, r23	; 0x04
    1a18:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8Value != NULL)
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	9c 81       	ldd	r25, Y+4	; 0x04
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	09 f4       	brne	.+2      	; 0x1a28 <DIO_enuGetPortValue+0x22>
    1a26:	42 c0       	rjmp	.+132    	; 0x1aac <DIO_enuGetPortValue+0xa6>
	{
		if(Copy_u8PortID <= DIO_PORTD)
    1a28:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2a:	84 30       	cpi	r24, 0x04	; 4
    1a2c:	e0 f5       	brcc	.+120    	; 0x1aa6 <DIO_enuGetPortValue+0xa0>
		{
			switch(Copy_u8PortID)
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	28 2f       	mov	r18, r24
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	3e 83       	std	Y+6, r19	; 0x06
    1a36:	2d 83       	std	Y+5, r18	; 0x05
    1a38:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3c:	81 30       	cpi	r24, 0x01	; 1
    1a3e:	91 05       	cpc	r25, r1
    1a40:	e1 f0       	breq	.+56     	; 0x1a7a <DIO_enuGetPortValue+0x74>
    1a42:	2d 81       	ldd	r18, Y+5	; 0x05
    1a44:	3e 81       	ldd	r19, Y+6	; 0x06
    1a46:	22 30       	cpi	r18, 0x02	; 2
    1a48:	31 05       	cpc	r19, r1
    1a4a:	2c f4       	brge	.+10     	; 0x1a56 <DIO_enuGetPortValue+0x50>
    1a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a50:	00 97       	sbiw	r24, 0x00	; 0
    1a52:	61 f0       	breq	.+24     	; 0x1a6c <DIO_enuGetPortValue+0x66>
    1a54:	26 c0       	rjmp	.+76     	; 0x1aa2 <DIO_enuGetPortValue+0x9c>
    1a56:	2d 81       	ldd	r18, Y+5	; 0x05
    1a58:	3e 81       	ldd	r19, Y+6	; 0x06
    1a5a:	22 30       	cpi	r18, 0x02	; 2
    1a5c:	31 05       	cpc	r19, r1
    1a5e:	a1 f0       	breq	.+40     	; 0x1a88 <DIO_enuGetPortValue+0x82>
    1a60:	8d 81       	ldd	r24, Y+5	; 0x05
    1a62:	9e 81       	ldd	r25, Y+6	; 0x06
    1a64:	83 30       	cpi	r24, 0x03	; 3
    1a66:	91 05       	cpc	r25, r1
    1a68:	b1 f0       	breq	.+44     	; 0x1a96 <DIO_enuGetPortValue+0x90>
    1a6a:	1b c0       	rjmp	.+54     	; 0x1aa2 <DIO_enuGetPortValue+0x9c>
			{
			case DIO_PORTA:
			*Copy_u8Value = PINA;
    1a6c:	e9 e3       	ldi	r30, 0x39	; 57
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	eb 81       	ldd	r30, Y+3	; 0x03
    1a74:	fc 81       	ldd	r31, Y+4	; 0x04
    1a76:	80 83       	st	Z, r24
    1a78:	14 c0       	rjmp	.+40     	; 0x1aa2 <DIO_enuGetPortValue+0x9c>
			break;
			case DIO_PORTB:
			*Copy_u8Value = PINB;
    1a7a:	e6 e3       	ldi	r30, 0x36	; 54
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	eb 81       	ldd	r30, Y+3	; 0x03
    1a82:	fc 81       	ldd	r31, Y+4	; 0x04
    1a84:	80 83       	st	Z, r24
    1a86:	0d c0       	rjmp	.+26     	; 0x1aa2 <DIO_enuGetPortValue+0x9c>
			break;
		    case DIO_PORTC:
			*Copy_u8Value = PINC;
    1a88:	e3 e3       	ldi	r30, 0x33	; 51
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a90:	fc 81       	ldd	r31, Y+4	; 0x04
    1a92:	80 83       	st	Z, r24
    1a94:	06 c0       	rjmp	.+12     	; 0x1aa2 <DIO_enuGetPortValue+0x9c>
			break;
			case DIO_PORTD:
			*Copy_u8Value = PIND;
    1a96:	e0 e3       	ldi	r30, 0x30	; 48
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	eb 81       	ldd	r30, Y+3	; 0x03
    1a9e:	fc 81       	ldd	r31, Y+4	; 0x04
    1aa0:	80 83       	st	Z, r24
			break;
			}
			Local_enuErrorState = ES_OK;
    1aa2:	19 82       	std	Y+1, r1	; 0x01
    1aa4:	05 c0       	rjmp	.+10     	; 0x1ab0 <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1aa6:	83 e0       	ldi	r24, 0x03	; 3
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1aac:	82 e0       	ldi	r24, 0x02	; 2
    1aae:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ab2:	26 96       	adiw	r28, 0x06	; 6
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <DIO_enuTogPort>:

ES_t DIO_enuTogPort(u8 Copy_u8PortID)
{
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	00 d0       	rcall	.+0      	; 0x1aca <DIO_enuTogPort+0x6>
    1aca:	00 d0       	rcall	.+0      	; 0x1acc <DIO_enuTogPort+0x8>
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    1ad0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	84 30       	cpi	r24, 0x04	; 4
    1ada:	08 f0       	brcs	.+2      	; 0x1ade <DIO_enuTogPort+0x1a>
    1adc:	40 c0       	rjmp	.+128    	; 0x1b5e <DIO_enuTogPort+0x9a>
	{
	switch(Copy_u8PortID)
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	28 2f       	mov	r18, r24
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	3c 83       	std	Y+4, r19	; 0x04
    1ae6:	2b 83       	std	Y+3, r18	; 0x03
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	9c 81       	ldd	r25, Y+4	; 0x04
    1aec:	81 30       	cpi	r24, 0x01	; 1
    1aee:	91 05       	cpc	r25, r1
    1af0:	e9 f0       	breq	.+58     	; 0x1b2c <DIO_enuTogPort+0x68>
    1af2:	2b 81       	ldd	r18, Y+3	; 0x03
    1af4:	3c 81       	ldd	r19, Y+4	; 0x04
    1af6:	22 30       	cpi	r18, 0x02	; 2
    1af8:	31 05       	cpc	r19, r1
    1afa:	2c f4       	brge	.+10     	; 0x1b06 <DIO_enuTogPort+0x42>
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	9c 81       	ldd	r25, Y+4	; 0x04
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	61 f0       	breq	.+24     	; 0x1b1c <DIO_enuTogPort+0x58>
    1b04:	2a c0       	rjmp	.+84     	; 0x1b5a <DIO_enuTogPort+0x96>
    1b06:	2b 81       	ldd	r18, Y+3	; 0x03
    1b08:	3c 81       	ldd	r19, Y+4	; 0x04
    1b0a:	22 30       	cpi	r18, 0x02	; 2
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	b1 f0       	breq	.+44     	; 0x1b3c <DIO_enuTogPort+0x78>
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	9c 81       	ldd	r25, Y+4	; 0x04
    1b14:	83 30       	cpi	r24, 0x03	; 3
    1b16:	91 05       	cpc	r25, r1
    1b18:	c9 f0       	breq	.+50     	; 0x1b4c <DIO_enuTogPort+0x88>
    1b1a:	1f c0       	rjmp	.+62     	; 0x1b5a <DIO_enuTogPort+0x96>
	{
	case DIO_PORTA:
	PORTA = ~PORTA;
    1b1c:	ab e3       	ldi	r26, 0x3B	; 59
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	eb e3       	ldi	r30, 0x3B	; 59
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	80 95       	com	r24
    1b28:	8c 93       	st	X, r24
    1b2a:	17 c0       	rjmp	.+46     	; 0x1b5a <DIO_enuTogPort+0x96>
	break;
	case DIO_PORTB:
	PORTB = ~PORTB;
    1b2c:	a8 e3       	ldi	r26, 0x38	; 56
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	e8 e3       	ldi	r30, 0x38	; 56
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	80 95       	com	r24
    1b38:	8c 93       	st	X, r24
    1b3a:	0f c0       	rjmp	.+30     	; 0x1b5a <DIO_enuTogPort+0x96>
	break;
	case DIO_PORTC:
	PORTC = ~PORTC;
    1b3c:	a5 e3       	ldi	r26, 0x35	; 53
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e5 e3       	ldi	r30, 0x35	; 53
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	80 95       	com	r24
    1b48:	8c 93       	st	X, r24
    1b4a:	07 c0       	rjmp	.+14     	; 0x1b5a <DIO_enuTogPort+0x96>
	break;
	case DIO_PORTD:
	PORTD = ~PORTD;
    1b4c:	a2 e3       	ldi	r26, 0x32	; 50
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e2 e3       	ldi	r30, 0x32	; 50
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	80 95       	com	r24
    1b58:	8c 93       	st	X, r24
	break;
	}
	Local_enuErrorState = ES_OK;
    1b5a:	19 82       	std	Y+1, r1	; 0x01
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <DIO_enuTogPort+0x9e>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1b5e:	83 e0       	ldi	r24, 0x03	; 3
    1b60:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	00 d0       	rcall	.+0      	; 0x1b78 <DIO_enuSetPinDirection+0x6>
    1b78:	00 d0       	rcall	.+0      	; 0x1b7a <DIO_enuSetPinDirection+0x8>
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <DIO_enuSetPinDirection+0xa>
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	8a 83       	std	Y+2, r24	; 0x02
    1b82:	6b 83       	std	Y+3, r22	; 0x03
    1b84:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	84 30       	cpi	r24, 0x04	; 4
    1b8e:	08 f0       	brcs	.+2      	; 0x1b92 <DIO_enuSetPinDirection+0x20>
    1b90:	d0 c0       	rjmp	.+416    	; 0x1d32 <DIO_enuSetPinDirection+0x1c0>
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	88 30       	cpi	r24, 0x08	; 8
    1b96:	08 f0       	brcs	.+2      	; 0x1b9a <DIO_enuSetPinDirection+0x28>
    1b98:	cc c0       	rjmp	.+408    	; 0x1d32 <DIO_enuSetPinDirection+0x1c0>
    1b9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b9c:	82 30       	cpi	r24, 0x02	; 2
    1b9e:	08 f0       	brcs	.+2      	; 0x1ba2 <DIO_enuSetPinDirection+0x30>
    1ba0:	c8 c0       	rjmp	.+400    	; 0x1d32 <DIO_enuSetPinDirection+0x1c0>
	{
	switch(Copy_u8PortID)
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	3e 83       	std	Y+6, r19	; 0x06
    1baa:	2d 83       	std	Y+5, r18	; 0x05
    1bac:	6d 81       	ldd	r22, Y+5	; 0x05
    1bae:	7e 81       	ldd	r23, Y+6	; 0x06
    1bb0:	61 30       	cpi	r22, 0x01	; 1
    1bb2:	71 05       	cpc	r23, r1
    1bb4:	09 f4       	brne	.+2      	; 0x1bb8 <DIO_enuSetPinDirection+0x46>
    1bb6:	41 c0       	rjmp	.+130    	; 0x1c3a <DIO_enuSetPinDirection+0xc8>
    1bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bba:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbc:	82 30       	cpi	r24, 0x02	; 2
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	34 f4       	brge	.+12     	; 0x1bce <DIO_enuSetPinDirection+0x5c>
    1bc2:	2d 81       	ldd	r18, Y+5	; 0x05
    1bc4:	3e 81       	ldd	r19, Y+6	; 0x06
    1bc6:	21 15       	cp	r18, r1
    1bc8:	31 05       	cpc	r19, r1
    1bca:	71 f0       	breq	.+28     	; 0x1be8 <DIO_enuSetPinDirection+0x76>
    1bcc:	b0 c0       	rjmp	.+352    	; 0x1d2e <DIO_enuSetPinDirection+0x1bc>
    1bce:	6d 81       	ldd	r22, Y+5	; 0x05
    1bd0:	7e 81       	ldd	r23, Y+6	; 0x06
    1bd2:	62 30       	cpi	r22, 0x02	; 2
    1bd4:	71 05       	cpc	r23, r1
    1bd6:	09 f4       	brne	.+2      	; 0x1bda <DIO_enuSetPinDirection+0x68>
    1bd8:	59 c0       	rjmp	.+178    	; 0x1c8c <DIO_enuSetPinDirection+0x11a>
    1bda:	8d 81       	ldd	r24, Y+5	; 0x05
    1bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bde:	83 30       	cpi	r24, 0x03	; 3
    1be0:	91 05       	cpc	r25, r1
    1be2:	09 f4       	brne	.+2      	; 0x1be6 <DIO_enuSetPinDirection+0x74>
    1be4:	7c c0       	rjmp	.+248    	; 0x1cde <DIO_enuSetPinDirection+0x16c>
    1be6:	a3 c0       	rjmp	.+326    	; 0x1d2e <DIO_enuSetPinDirection+0x1bc>
	{
	case DIO_PORTA:
	DDRA &=~(DIO_MASK_BIT << Copy_u8PinID);
    1be8:	aa e3       	ldi	r26, 0x3A	; 58
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	ea e3       	ldi	r30, 0x3A	; 58
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	48 2f       	mov	r20, r24
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <DIO_enuSetPinDirection+0x92>
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	2a 95       	dec	r18
    1c06:	e2 f7       	brpl	.-8      	; 0x1c00 <DIO_enuSetPinDirection+0x8e>
    1c08:	80 95       	com	r24
    1c0a:	84 23       	and	r24, r20
    1c0c:	8c 93       	st	X, r24
	DDRA |= (Copy_u8Value << Copy_u8PinID);
    1c0e:	aa e3       	ldi	r26, 0x3A	; 58
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	ea e3       	ldi	r30, 0x3A	; 58
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	48 2f       	mov	r20, r24
    1c1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1c:	28 2f       	mov	r18, r24
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	88 2f       	mov	r24, r24
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	b9 01       	movw	r22, r18
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <DIO_enuSetPinDirection+0xbc>
    1c2a:	66 0f       	add	r22, r22
    1c2c:	77 1f       	adc	r23, r23
    1c2e:	8a 95       	dec	r24
    1c30:	e2 f7       	brpl	.-8      	; 0x1c2a <DIO_enuSetPinDirection+0xb8>
    1c32:	cb 01       	movw	r24, r22
    1c34:	84 2b       	or	r24, r20
    1c36:	8c 93       	st	X, r24
    1c38:	7a c0       	rjmp	.+244    	; 0x1d2e <DIO_enuSetPinDirection+0x1bc>
	break;
	case DIO_PORTB:
	DDRB &=~(DIO_MASK_BIT << Copy_u8PinID);
    1c3a:	a7 e3       	ldi	r26, 0x37	; 55
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	e7 e3       	ldi	r30, 0x37	; 55
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	48 2f       	mov	r20, r24
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <DIO_enuSetPinDirection+0xe4>
    1c52:	88 0f       	add	r24, r24
    1c54:	99 1f       	adc	r25, r25
    1c56:	2a 95       	dec	r18
    1c58:	e2 f7       	brpl	.-8      	; 0x1c52 <DIO_enuSetPinDirection+0xe0>
    1c5a:	80 95       	com	r24
    1c5c:	84 23       	and	r24, r20
    1c5e:	8c 93       	st	X, r24
	DDRB |= (Copy_u8Value << Copy_u8PinID);
    1c60:	a7 e3       	ldi	r26, 0x37	; 55
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	e7 e3       	ldi	r30, 0x37	; 55
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	48 2f       	mov	r20, r24
    1c6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	88 2f       	mov	r24, r24
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	b9 01       	movw	r22, r18
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <DIO_enuSetPinDirection+0x10e>
    1c7c:	66 0f       	add	r22, r22
    1c7e:	77 1f       	adc	r23, r23
    1c80:	8a 95       	dec	r24
    1c82:	e2 f7       	brpl	.-8      	; 0x1c7c <DIO_enuSetPinDirection+0x10a>
    1c84:	cb 01       	movw	r24, r22
    1c86:	84 2b       	or	r24, r20
    1c88:	8c 93       	st	X, r24
    1c8a:	51 c0       	rjmp	.+162    	; 0x1d2e <DIO_enuSetPinDirection+0x1bc>
	break;
	case DIO_PORTC:
	DDRC &=~(DIO_MASK_BIT << Copy_u8PinID);
    1c8c:	a4 e3       	ldi	r26, 0x34	; 52
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	e4 e3       	ldi	r30, 0x34	; 52
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	48 2f       	mov	r20, r24
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	28 2f       	mov	r18, r24
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <DIO_enuSetPinDirection+0x136>
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	2a 95       	dec	r18
    1caa:	e2 f7       	brpl	.-8      	; 0x1ca4 <DIO_enuSetPinDirection+0x132>
    1cac:	80 95       	com	r24
    1cae:	84 23       	and	r24, r20
    1cb0:	8c 93       	st	X, r24
	DDRC |= (Copy_u8Value << Copy_u8PinID);
    1cb2:	a4 e3       	ldi	r26, 0x34	; 52
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	e4 e3       	ldi	r30, 0x34	; 52
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	48 2f       	mov	r20, r24
    1cbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc0:	28 2f       	mov	r18, r24
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	88 2f       	mov	r24, r24
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	b9 01       	movw	r22, r18
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <DIO_enuSetPinDirection+0x160>
    1cce:	66 0f       	add	r22, r22
    1cd0:	77 1f       	adc	r23, r23
    1cd2:	8a 95       	dec	r24
    1cd4:	e2 f7       	brpl	.-8      	; 0x1cce <DIO_enuSetPinDirection+0x15c>
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	84 2b       	or	r24, r20
    1cda:	8c 93       	st	X, r24
    1cdc:	28 c0       	rjmp	.+80     	; 0x1d2e <DIO_enuSetPinDirection+0x1bc>
	break;
	case DIO_PORTD:
	DDRD &=~(DIO_MASK_BIT << Copy_u8PinID);
    1cde:	a1 e3       	ldi	r26, 0x31	; 49
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	e1 e3       	ldi	r30, 0x31	; 49
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	48 2f       	mov	r20, r24
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	28 2f       	mov	r18, r24
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <DIO_enuSetPinDirection+0x188>
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	2a 95       	dec	r18
    1cfc:	e2 f7       	brpl	.-8      	; 0x1cf6 <DIO_enuSetPinDirection+0x184>
    1cfe:	80 95       	com	r24
    1d00:	84 23       	and	r24, r20
    1d02:	8c 93       	st	X, r24
	DDRD |= (Copy_u8Value << Copy_u8PinID);
    1d04:	a1 e3       	ldi	r26, 0x31	; 49
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	e1 e3       	ldi	r30, 0x31	; 49
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	48 2f       	mov	r20, r24
    1d10:	8c 81       	ldd	r24, Y+4	; 0x04
    1d12:	28 2f       	mov	r18, r24
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	88 2f       	mov	r24, r24
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	b9 01       	movw	r22, r18
    1d1e:	02 c0       	rjmp	.+4      	; 0x1d24 <DIO_enuSetPinDirection+0x1b2>
    1d20:	66 0f       	add	r22, r22
    1d22:	77 1f       	adc	r23, r23
    1d24:	8a 95       	dec	r24
    1d26:	e2 f7       	brpl	.-8      	; 0x1d20 <DIO_enuSetPinDirection+0x1ae>
    1d28:	cb 01       	movw	r24, r22
    1d2a:	84 2b       	or	r24, r20
    1d2c:	8c 93       	st	X, r24
	break;
	}
	Local_enuErrorState = ES_OK;
    1d2e:	19 82       	std	Y+1, r1	; 0x01
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
    	Local_enuErrorState = ES_OUT_OF_RANGE;
    1d32:	83 e0       	ldi	r24, 0x03	; 3
    1d34:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d38:	26 96       	adiw	r28, 0x06	; 6
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	de bf       	out	0x3e, r29	; 62
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	cd bf       	out	0x3d, r28	; 61
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	08 95       	ret

00001d4a <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    1d4a:	df 93       	push	r29
    1d4c:	cf 93       	push	r28
    1d4e:	00 d0       	rcall	.+0      	; 0x1d50 <DIO_enuSetPinValue+0x6>
    1d50:	00 d0       	rcall	.+0      	; 0x1d52 <DIO_enuSetPinValue+0x8>
    1d52:	00 d0       	rcall	.+0      	; 0x1d54 <DIO_enuSetPinValue+0xa>
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
    1d58:	8a 83       	std	Y+2, r24	; 0x02
    1d5a:	6b 83       	std	Y+3, r22	; 0x03
    1d5c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	84 30       	cpi	r24, 0x04	; 4
    1d66:	08 f0       	brcs	.+2      	; 0x1d6a <DIO_enuSetPinValue+0x20>
    1d68:	d0 c0       	rjmp	.+416    	; 0x1f0a <DIO_enuSetPinValue+0x1c0>
    1d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6c:	88 30       	cpi	r24, 0x08	; 8
    1d6e:	08 f0       	brcs	.+2      	; 0x1d72 <DIO_enuSetPinValue+0x28>
    1d70:	cc c0       	rjmp	.+408    	; 0x1f0a <DIO_enuSetPinValue+0x1c0>
    1d72:	8c 81       	ldd	r24, Y+4	; 0x04
    1d74:	82 30       	cpi	r24, 0x02	; 2
    1d76:	08 f0       	brcs	.+2      	; 0x1d7a <DIO_enuSetPinValue+0x30>
    1d78:	c8 c0       	rjmp	.+400    	; 0x1f0a <DIO_enuSetPinValue+0x1c0>
		    {
		    switch(Copy_u8PortID)
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	3e 83       	std	Y+6, r19	; 0x06
    1d82:	2d 83       	std	Y+5, r18	; 0x05
    1d84:	6d 81       	ldd	r22, Y+5	; 0x05
    1d86:	7e 81       	ldd	r23, Y+6	; 0x06
    1d88:	61 30       	cpi	r22, 0x01	; 1
    1d8a:	71 05       	cpc	r23, r1
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <DIO_enuSetPinValue+0x46>
    1d8e:	41 c0       	rjmp	.+130    	; 0x1e12 <DIO_enuSetPinValue+0xc8>
    1d90:	8d 81       	ldd	r24, Y+5	; 0x05
    1d92:	9e 81       	ldd	r25, Y+6	; 0x06
    1d94:	82 30       	cpi	r24, 0x02	; 2
    1d96:	91 05       	cpc	r25, r1
    1d98:	34 f4       	brge	.+12     	; 0x1da6 <DIO_enuSetPinValue+0x5c>
    1d9a:	2d 81       	ldd	r18, Y+5	; 0x05
    1d9c:	3e 81       	ldd	r19, Y+6	; 0x06
    1d9e:	21 15       	cp	r18, r1
    1da0:	31 05       	cpc	r19, r1
    1da2:	71 f0       	breq	.+28     	; 0x1dc0 <DIO_enuSetPinValue+0x76>
    1da4:	b0 c0       	rjmp	.+352    	; 0x1f06 <DIO_enuSetPinValue+0x1bc>
    1da6:	6d 81       	ldd	r22, Y+5	; 0x05
    1da8:	7e 81       	ldd	r23, Y+6	; 0x06
    1daa:	62 30       	cpi	r22, 0x02	; 2
    1dac:	71 05       	cpc	r23, r1
    1dae:	09 f4       	brne	.+2      	; 0x1db2 <DIO_enuSetPinValue+0x68>
    1db0:	59 c0       	rjmp	.+178    	; 0x1e64 <DIO_enuSetPinValue+0x11a>
    1db2:	8d 81       	ldd	r24, Y+5	; 0x05
    1db4:	9e 81       	ldd	r25, Y+6	; 0x06
    1db6:	83 30       	cpi	r24, 0x03	; 3
    1db8:	91 05       	cpc	r25, r1
    1dba:	09 f4       	brne	.+2      	; 0x1dbe <DIO_enuSetPinValue+0x74>
    1dbc:	7c c0       	rjmp	.+248    	; 0x1eb6 <DIO_enuSetPinValue+0x16c>
    1dbe:	a3 c0       	rjmp	.+326    	; 0x1f06 <DIO_enuSetPinValue+0x1bc>
		    {
		    case DIO_PORTA:
		    PORTA &=~(DIO_MASK_BIT << Copy_u8PinID);
    1dc0:	ab e3       	ldi	r26, 0x3B	; 59
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	eb e3       	ldi	r30, 0x3B	; 59
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	48 2f       	mov	r20, r24
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <DIO_enuSetPinValue+0x92>
    1dd8:	88 0f       	add	r24, r24
    1dda:	99 1f       	adc	r25, r25
    1ddc:	2a 95       	dec	r18
    1dde:	e2 f7       	brpl	.-8      	; 0x1dd8 <DIO_enuSetPinValue+0x8e>
    1de0:	80 95       	com	r24
    1de2:	84 23       	and	r24, r20
    1de4:	8c 93       	st	X, r24
		    PORTA |= (Copy_u8Value << Copy_u8PinID);
    1de6:	ab e3       	ldi	r26, 0x3B	; 59
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	eb e3       	ldi	r30, 0x3B	; 59
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	48 2f       	mov	r20, r24
    1df2:	8c 81       	ldd	r24, Y+4	; 0x04
    1df4:	28 2f       	mov	r18, r24
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	88 2f       	mov	r24, r24
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	b9 01       	movw	r22, r18
    1e00:	02 c0       	rjmp	.+4      	; 0x1e06 <DIO_enuSetPinValue+0xbc>
    1e02:	66 0f       	add	r22, r22
    1e04:	77 1f       	adc	r23, r23
    1e06:	8a 95       	dec	r24
    1e08:	e2 f7       	brpl	.-8      	; 0x1e02 <DIO_enuSetPinValue+0xb8>
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	84 2b       	or	r24, r20
    1e0e:	8c 93       	st	X, r24
    1e10:	7a c0       	rjmp	.+244    	; 0x1f06 <DIO_enuSetPinValue+0x1bc>
		    break;
		    case DIO_PORTB:
		    PORTB &=~(DIO_MASK_BIT << Copy_u8PinID);
    1e12:	a8 e3       	ldi	r26, 0x38	; 56
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e8 e3       	ldi	r30, 0x38	; 56
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	48 2f       	mov	r20, r24
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	28 2f       	mov	r18, r24
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	02 c0       	rjmp	.+4      	; 0x1e2e <DIO_enuSetPinValue+0xe4>
    1e2a:	88 0f       	add	r24, r24
    1e2c:	99 1f       	adc	r25, r25
    1e2e:	2a 95       	dec	r18
    1e30:	e2 f7       	brpl	.-8      	; 0x1e2a <DIO_enuSetPinValue+0xe0>
    1e32:	80 95       	com	r24
    1e34:	84 23       	and	r24, r20
    1e36:	8c 93       	st	X, r24
		    PORTB |= (Copy_u8Value << Copy_u8PinID);
    1e38:	a8 e3       	ldi	r26, 0x38	; 56
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	e8 e3       	ldi	r30, 0x38	; 56
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	48 2f       	mov	r20, r24
    1e44:	8c 81       	ldd	r24, Y+4	; 0x04
    1e46:	28 2f       	mov	r18, r24
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	88 2f       	mov	r24, r24
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	b9 01       	movw	r22, r18
    1e52:	02 c0       	rjmp	.+4      	; 0x1e58 <DIO_enuSetPinValue+0x10e>
    1e54:	66 0f       	add	r22, r22
    1e56:	77 1f       	adc	r23, r23
    1e58:	8a 95       	dec	r24
    1e5a:	e2 f7       	brpl	.-8      	; 0x1e54 <DIO_enuSetPinValue+0x10a>
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	84 2b       	or	r24, r20
    1e60:	8c 93       	st	X, r24
    1e62:	51 c0       	rjmp	.+162    	; 0x1f06 <DIO_enuSetPinValue+0x1bc>
		    break;
		    case DIO_PORTC:
		    PORTC &=~(DIO_MASK_BIT << Copy_u8PinID);
    1e64:	a5 e3       	ldi	r26, 0x35	; 53
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	e5 e3       	ldi	r30, 0x35	; 53
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	48 2f       	mov	r20, r24
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	28 2f       	mov	r18, r24
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	02 c0       	rjmp	.+4      	; 0x1e80 <DIO_enuSetPinValue+0x136>
    1e7c:	88 0f       	add	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	2a 95       	dec	r18
    1e82:	e2 f7       	brpl	.-8      	; 0x1e7c <DIO_enuSetPinValue+0x132>
    1e84:	80 95       	com	r24
    1e86:	84 23       	and	r24, r20
    1e88:	8c 93       	st	X, r24
		    PORTC |= (Copy_u8Value << Copy_u8PinID);
    1e8a:	a5 e3       	ldi	r26, 0x35	; 53
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	e5 e3       	ldi	r30, 0x35	; 53
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	48 2f       	mov	r20, r24
    1e96:	8c 81       	ldd	r24, Y+4	; 0x04
    1e98:	28 2f       	mov	r18, r24
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	88 2f       	mov	r24, r24
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	b9 01       	movw	r22, r18
    1ea4:	02 c0       	rjmp	.+4      	; 0x1eaa <DIO_enuSetPinValue+0x160>
    1ea6:	66 0f       	add	r22, r22
    1ea8:	77 1f       	adc	r23, r23
    1eaa:	8a 95       	dec	r24
    1eac:	e2 f7       	brpl	.-8      	; 0x1ea6 <DIO_enuSetPinValue+0x15c>
    1eae:	cb 01       	movw	r24, r22
    1eb0:	84 2b       	or	r24, r20
    1eb2:	8c 93       	st	X, r24
    1eb4:	28 c0       	rjmp	.+80     	; 0x1f06 <DIO_enuSetPinValue+0x1bc>
		    break;
		   	case DIO_PORTD:
		   	PORTD &=~(DIO_MASK_BIT << Copy_u8PinID);
    1eb6:	a2 e3       	ldi	r26, 0x32	; 50
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e2 e3       	ldi	r30, 0x32	; 50
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	48 2f       	mov	r20, r24
    1ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	02 c0       	rjmp	.+4      	; 0x1ed2 <DIO_enuSetPinValue+0x188>
    1ece:	88 0f       	add	r24, r24
    1ed0:	99 1f       	adc	r25, r25
    1ed2:	2a 95       	dec	r18
    1ed4:	e2 f7       	brpl	.-8      	; 0x1ece <DIO_enuSetPinValue+0x184>
    1ed6:	80 95       	com	r24
    1ed8:	84 23       	and	r24, r20
    1eda:	8c 93       	st	X, r24
		   	PORTD |= (Copy_u8Value << Copy_u8PinID);
    1edc:	a2 e3       	ldi	r26, 0x32	; 50
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	e2 e3       	ldi	r30, 0x32	; 50
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	48 2f       	mov	r20, r24
    1ee8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	88 2f       	mov	r24, r24
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	b9 01       	movw	r22, r18
    1ef6:	02 c0       	rjmp	.+4      	; 0x1efc <DIO_enuSetPinValue+0x1b2>
    1ef8:	66 0f       	add	r22, r22
    1efa:	77 1f       	adc	r23, r23
    1efc:	8a 95       	dec	r24
    1efe:	e2 f7       	brpl	.-8      	; 0x1ef8 <DIO_enuSetPinValue+0x1ae>
    1f00:	cb 01       	movw	r24, r22
    1f02:	84 2b       	or	r24, r20
    1f04:	8c 93       	st	X, r24
		    break;
		    }
		    Local_enuErrorState = ES_OK;
    1f06:	19 82       	std	Y+1, r1	; 0x01
    1f08:	02 c0       	rjmp	.+4      	; 0x1f0e <DIO_enuSetPinValue+0x1c4>
		    }
		else
		{
	    	Local_enuErrorState = ES_OUT_OF_RANGE;
    1f0a:	83 e0       	ldi	r24, 0x03	; 3
    1f0c:	89 83       	std	Y+1, r24	; 0x01
		}


	return Local_enuErrorState;
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f10:	26 96       	adiw	r28, 0x06	; 6
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	f8 94       	cli
    1f16:	de bf       	out	0x3e, r29	; 62
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	cd bf       	out	0x3d, r28	; 61
    1f1c:	cf 91       	pop	r28
    1f1e:	df 91       	pop	r29
    1f20:	08 95       	ret

00001f22 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 * Copy_u8Value)
{
    1f22:	df 93       	push	r29
    1f24:	cf 93       	push	r28
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
    1f2a:	27 97       	sbiw	r28, 0x07	; 7
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	f8 94       	cli
    1f30:	de bf       	out	0x3e, r29	; 62
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	cd bf       	out	0x3d, r28	; 61
    1f36:	8a 83       	std	Y+2, r24	; 0x02
    1f38:	6b 83       	std	Y+3, r22	; 0x03
    1f3a:	5d 83       	std	Y+5, r21	; 0x05
    1f3c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8Value != NULL)
    1f42:	8c 81       	ldd	r24, Y+4	; 0x04
    1f44:	9d 81       	ldd	r25, Y+5	; 0x05
    1f46:	00 97       	sbiw	r24, 0x00	; 0
    1f48:	09 f4       	brne	.+2      	; 0x1f4c <DIO_enuGetPinValue+0x2a>
    1f4a:	7d c0       	rjmp	.+250    	; 0x2046 <DIO_enuGetPinValue+0x124>
	{
		if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7)
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	84 30       	cpi	r24, 0x04	; 4
    1f50:	08 f0       	brcs	.+2      	; 0x1f54 <DIO_enuGetPinValue+0x32>
    1f52:	76 c0       	rjmp	.+236    	; 0x2040 <DIO_enuGetPinValue+0x11e>
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
    1f56:	88 30       	cpi	r24, 0x08	; 8
    1f58:	08 f0       	brcs	.+2      	; 0x1f5c <DIO_enuGetPinValue+0x3a>
    1f5a:	72 c0       	rjmp	.+228    	; 0x2040 <DIO_enuGetPinValue+0x11e>
		{
			switch(Copy_u8PortID)
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	28 2f       	mov	r18, r24
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	3f 83       	std	Y+7, r19	; 0x07
    1f64:	2e 83       	std	Y+6, r18	; 0x06
    1f66:	4e 81       	ldd	r20, Y+6	; 0x06
    1f68:	5f 81       	ldd	r21, Y+7	; 0x07
    1f6a:	41 30       	cpi	r20, 0x01	; 1
    1f6c:	51 05       	cpc	r21, r1
    1f6e:	59 f1       	breq	.+86     	; 0x1fc6 <DIO_enuGetPinValue+0xa4>
    1f70:	8e 81       	ldd	r24, Y+6	; 0x06
    1f72:	9f 81       	ldd	r25, Y+7	; 0x07
    1f74:	82 30       	cpi	r24, 0x02	; 2
    1f76:	91 05       	cpc	r25, r1
    1f78:	34 f4       	brge	.+12     	; 0x1f86 <DIO_enuGetPinValue+0x64>
    1f7a:	2e 81       	ldd	r18, Y+6	; 0x06
    1f7c:	3f 81       	ldd	r19, Y+7	; 0x07
    1f7e:	21 15       	cp	r18, r1
    1f80:	31 05       	cpc	r19, r1
    1f82:	69 f0       	breq	.+26     	; 0x1f9e <DIO_enuGetPinValue+0x7c>
    1f84:	5b c0       	rjmp	.+182    	; 0x203c <DIO_enuGetPinValue+0x11a>
    1f86:	4e 81       	ldd	r20, Y+6	; 0x06
    1f88:	5f 81       	ldd	r21, Y+7	; 0x07
    1f8a:	42 30       	cpi	r20, 0x02	; 2
    1f8c:	51 05       	cpc	r21, r1
    1f8e:	79 f1       	breq	.+94     	; 0x1fee <DIO_enuGetPinValue+0xcc>
    1f90:	8e 81       	ldd	r24, Y+6	; 0x06
    1f92:	9f 81       	ldd	r25, Y+7	; 0x07
    1f94:	83 30       	cpi	r24, 0x03	; 3
    1f96:	91 05       	cpc	r25, r1
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <DIO_enuGetPinValue+0x7a>
    1f9a:	3d c0       	rjmp	.+122    	; 0x2016 <DIO_enuGetPinValue+0xf4>
    1f9c:	4f c0       	rjmp	.+158    	; 0x203c <DIO_enuGetPinValue+0x11a>
			{
			case DIO_PORTA:
			*Copy_u8Value = ((PINA>>Copy_u8PinID) & DIO_MASK_BIT);
    1f9e:	e9 e3       	ldi	r30, 0x39	; 57
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	28 2f       	mov	r18, r24
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1faa:	88 2f       	mov	r24, r24
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	a9 01       	movw	r20, r18
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <DIO_enuGetPinValue+0x94>
    1fb2:	55 95       	asr	r21
    1fb4:	47 95       	ror	r20
    1fb6:	8a 95       	dec	r24
    1fb8:	e2 f7       	brpl	.-8      	; 0x1fb2 <DIO_enuGetPinValue+0x90>
    1fba:	ca 01       	movw	r24, r20
    1fbc:	81 70       	andi	r24, 0x01	; 1
    1fbe:	ec 81       	ldd	r30, Y+4	; 0x04
    1fc0:	fd 81       	ldd	r31, Y+5	; 0x05
    1fc2:	80 83       	st	Z, r24
    1fc4:	3b c0       	rjmp	.+118    	; 0x203c <DIO_enuGetPinValue+0x11a>
			break;
			case DIO_PORTB:
			*Copy_u8Value = ((PINB>>Copy_u8PinID) & DIO_MASK_BIT);
    1fc6:	e6 e3       	ldi	r30, 0x36	; 54
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd2:	88 2f       	mov	r24, r24
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	a9 01       	movw	r20, r18
    1fd8:	02 c0       	rjmp	.+4      	; 0x1fde <DIO_enuGetPinValue+0xbc>
    1fda:	55 95       	asr	r21
    1fdc:	47 95       	ror	r20
    1fde:	8a 95       	dec	r24
    1fe0:	e2 f7       	brpl	.-8      	; 0x1fda <DIO_enuGetPinValue+0xb8>
    1fe2:	ca 01       	movw	r24, r20
    1fe4:	81 70       	andi	r24, 0x01	; 1
    1fe6:	ec 81       	ldd	r30, Y+4	; 0x04
    1fe8:	fd 81       	ldd	r31, Y+5	; 0x05
    1fea:	80 83       	st	Z, r24
    1fec:	27 c0       	rjmp	.+78     	; 0x203c <DIO_enuGetPinValue+0x11a>
			break;
			case DIO_PORTC:
			*Copy_u8Value = ((PINC>>Copy_u8PinID) & DIO_MASK_BIT);
    1fee:	e3 e3       	ldi	r30, 0x33	; 51
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	28 2f       	mov	r18, r24
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffa:	88 2f       	mov	r24, r24
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	a9 01       	movw	r20, r18
    2000:	02 c0       	rjmp	.+4      	; 0x2006 <DIO_enuGetPinValue+0xe4>
    2002:	55 95       	asr	r21
    2004:	47 95       	ror	r20
    2006:	8a 95       	dec	r24
    2008:	e2 f7       	brpl	.-8      	; 0x2002 <DIO_enuGetPinValue+0xe0>
    200a:	ca 01       	movw	r24, r20
    200c:	81 70       	andi	r24, 0x01	; 1
    200e:	ec 81       	ldd	r30, Y+4	; 0x04
    2010:	fd 81       	ldd	r31, Y+5	; 0x05
    2012:	80 83       	st	Z, r24
    2014:	13 c0       	rjmp	.+38     	; 0x203c <DIO_enuGetPinValue+0x11a>
			break;
			case DIO_PORTD:
			*Copy_u8Value = ((PIND>>Copy_u8PinID) & DIO_MASK_BIT);
    2016:	e0 e3       	ldi	r30, 0x30	; 48
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	28 2f       	mov	r18, r24
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	88 2f       	mov	r24, r24
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	a9 01       	movw	r20, r18
    2028:	02 c0       	rjmp	.+4      	; 0x202e <DIO_enuGetPinValue+0x10c>
    202a:	55 95       	asr	r21
    202c:	47 95       	ror	r20
    202e:	8a 95       	dec	r24
    2030:	e2 f7       	brpl	.-8      	; 0x202a <DIO_enuGetPinValue+0x108>
    2032:	ca 01       	movw	r24, r20
    2034:	81 70       	andi	r24, 0x01	; 1
    2036:	ec 81       	ldd	r30, Y+4	; 0x04
    2038:	fd 81       	ldd	r31, Y+5	; 0x05
    203a:	80 83       	st	Z, r24
			break;
			}
			Local_enuErrorState = ES_OK;
    203c:	19 82       	std	Y+1, r1	; 0x01
    203e:	05 c0       	rjmp	.+10     	; 0x204a <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    2040:	83 e0       	ldi	r24, 0x03	; 3
    2042:	89 83       	std	Y+1, r24	; 0x01
    2044:	02 c0       	rjmp	.+4      	; 0x204a <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    2046:	82 e0       	ldi	r24, 0x02	; 2
    2048:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuErrorState;
    204a:	89 81       	ldd	r24, Y+1	; 0x01
}
    204c:	27 96       	adiw	r28, 0x07	; 7
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	f8 94       	cli
    2052:	de bf       	out	0x3e, r29	; 62
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	cd bf       	out	0x3d, r28	; 61
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <DIO_enuTogPin>:

ES_t DIO_enuTogPin(u8 Copy_u8PortID, u8 Copy_u8PinID)
{
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	00 d0       	rcall	.+0      	; 0x2064 <DIO_enuTogPin+0x6>
    2064:	00 d0       	rcall	.+0      	; 0x2066 <DIO_enuTogPin+0x8>
    2066:	0f 92       	push	r0
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	8a 83       	std	Y+2, r24	; 0x02
    206e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
    2074:	8a 81       	ldd	r24, Y+2	; 0x02
    2076:	84 30       	cpi	r24, 0x04	; 4
    2078:	08 f0       	brcs	.+2      	; 0x207c <DIO_enuTogPin+0x1e>
    207a:	70 c0       	rjmp	.+224    	; 0x215c <DIO_enuTogPin+0xfe>
	{
	switch(Copy_u8PortID)
    207c:	8a 81       	ldd	r24, Y+2	; 0x02
    207e:	28 2f       	mov	r18, r24
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	3d 83       	std	Y+5, r19	; 0x05
    2084:	2c 83       	std	Y+4, r18	; 0x04
    2086:	8c 81       	ldd	r24, Y+4	; 0x04
    2088:	9d 81       	ldd	r25, Y+5	; 0x05
    208a:	81 30       	cpi	r24, 0x01	; 1
    208c:	91 05       	cpc	r25, r1
    208e:	49 f1       	breq	.+82     	; 0x20e2 <DIO_enuTogPin+0x84>
    2090:	2c 81       	ldd	r18, Y+4	; 0x04
    2092:	3d 81       	ldd	r19, Y+5	; 0x05
    2094:	22 30       	cpi	r18, 0x02	; 2
    2096:	31 05       	cpc	r19, r1
    2098:	2c f4       	brge	.+10     	; 0x20a4 <DIO_enuTogPin+0x46>
    209a:	8c 81       	ldd	r24, Y+4	; 0x04
    209c:	9d 81       	ldd	r25, Y+5	; 0x05
    209e:	00 97       	sbiw	r24, 0x00	; 0
    20a0:	61 f0       	breq	.+24     	; 0x20ba <DIO_enuTogPin+0x5c>
    20a2:	5a c0       	rjmp	.+180    	; 0x2158 <DIO_enuTogPin+0xfa>
    20a4:	2c 81       	ldd	r18, Y+4	; 0x04
    20a6:	3d 81       	ldd	r19, Y+5	; 0x05
    20a8:	22 30       	cpi	r18, 0x02	; 2
    20aa:	31 05       	cpc	r19, r1
    20ac:	71 f1       	breq	.+92     	; 0x210a <DIO_enuTogPin+0xac>
    20ae:	8c 81       	ldd	r24, Y+4	; 0x04
    20b0:	9d 81       	ldd	r25, Y+5	; 0x05
    20b2:	83 30       	cpi	r24, 0x03	; 3
    20b4:	91 05       	cpc	r25, r1
    20b6:	e9 f1       	breq	.+122    	; 0x2132 <DIO_enuTogPin+0xd4>
    20b8:	4f c0       	rjmp	.+158    	; 0x2158 <DIO_enuTogPin+0xfa>
	{
	case DIO_PORTA:
	PORTA ^= (DIO_MASK_BIT << Copy_u8PinID);
    20ba:	ab e3       	ldi	r26, 0x3B	; 59
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	eb e3       	ldi	r30, 0x3B	; 59
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	48 2f       	mov	r20, r24
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	28 2f       	mov	r18, r24
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	02 2e       	mov	r0, r18
    20d2:	02 c0       	rjmp	.+4      	; 0x20d8 <DIO_enuTogPin+0x7a>
    20d4:	88 0f       	add	r24, r24
    20d6:	99 1f       	adc	r25, r25
    20d8:	0a 94       	dec	r0
    20da:	e2 f7       	brpl	.-8      	; 0x20d4 <DIO_enuTogPin+0x76>
    20dc:	84 27       	eor	r24, r20
    20de:	8c 93       	st	X, r24
    20e0:	3b c0       	rjmp	.+118    	; 0x2158 <DIO_enuTogPin+0xfa>
	break;
	case DIO_PORTB:
	PORTB ^= (DIO_MASK_BIT << Copy_u8PinID);
    20e2:	a8 e3       	ldi	r26, 0x38	; 56
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	e8 e3       	ldi	r30, 0x38	; 56
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	48 2f       	mov	r20, r24
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	28 2f       	mov	r18, r24
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	02 2e       	mov	r0, r18
    20fa:	02 c0       	rjmp	.+4      	; 0x2100 <DIO_enuTogPin+0xa2>
    20fc:	88 0f       	add	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	0a 94       	dec	r0
    2102:	e2 f7       	brpl	.-8      	; 0x20fc <DIO_enuTogPin+0x9e>
    2104:	84 27       	eor	r24, r20
    2106:	8c 93       	st	X, r24
    2108:	27 c0       	rjmp	.+78     	; 0x2158 <DIO_enuTogPin+0xfa>
	break;
	case DIO_PORTC:
	PORTC ^= (DIO_MASK_BIT << Copy_u8PinID);
    210a:	a5 e3       	ldi	r26, 0x35	; 53
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	e5 e3       	ldi	r30, 0x35	; 53
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	48 2f       	mov	r20, r24
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	28 2f       	mov	r18, r24
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	02 2e       	mov	r0, r18
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <DIO_enuTogPin+0xca>
    2124:	88 0f       	add	r24, r24
    2126:	99 1f       	adc	r25, r25
    2128:	0a 94       	dec	r0
    212a:	e2 f7       	brpl	.-8      	; 0x2124 <DIO_enuTogPin+0xc6>
    212c:	84 27       	eor	r24, r20
    212e:	8c 93       	st	X, r24
    2130:	13 c0       	rjmp	.+38     	; 0x2158 <DIO_enuTogPin+0xfa>
	break;
	case DIO_PORTD:
	PORTD ^= (DIO_MASK_BIT << Copy_u8PinID);
    2132:	a2 e3       	ldi	r26, 0x32	; 50
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	e2 e3       	ldi	r30, 0x32	; 50
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	48 2f       	mov	r20, r24
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	28 2f       	mov	r18, r24
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	02 2e       	mov	r0, r18
    214a:	02 c0       	rjmp	.+4      	; 0x2150 <DIO_enuTogPin+0xf2>
    214c:	88 0f       	add	r24, r24
    214e:	99 1f       	adc	r25, r25
    2150:	0a 94       	dec	r0
    2152:	e2 f7       	brpl	.-8      	; 0x214c <DIO_enuTogPin+0xee>
    2154:	84 27       	eor	r24, r20
    2156:	8c 93       	st	X, r24
	break;
	}
	Local_enuErrorState = ES_OK;
    2158:	19 82       	std	Y+1, r1	; 0x01
    215a:	02 c0       	rjmp	.+4      	; 0x2160 <DIO_enuTogPin+0x102>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    215c:	83 e0       	ldi	r24, 0x03	; 3
    215e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    2160:	89 81       	ldd	r24, Y+1	; 0x01
}
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	cf 91       	pop	r28
    216e:	df 91       	pop	r29
    2170:	08 95       	ret

00002172 <ADC_enuInit>:
// Global variable to indicate for the current ADC Chain
static u8 Global_u8ADCIndex;



ES_t ADC_enuInit(void) {
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	0f 92       	push	r0
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_OK;
    217c:	19 82       	std	Y+1, r1	; 0x01

	Clr_Bit(ADMUX, ADMUX_REFS0); Clr_Bit(ADMUX, ADMUX_REFS1);

#elif ADC_VREF == ADC_AVCC

	Set_Bit(ADMUX, ADMUX_REFS0); Clr_Bit(ADMUX, ADMUX_REFS1);
    217e:	a7 e2       	ldi	r26, 0x27	; 39
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e7 e2       	ldi	r30, 0x27	; 39
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	80 64       	ori	r24, 0x40	; 64
    218a:	8c 93       	st	X, r24
    218c:	a7 e2       	ldi	r26, 0x27	; 39
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	e7 e2       	ldi	r30, 0x27	; 39
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	8f 77       	andi	r24, 0x7F	; 127
    2198:	8c 93       	st	X, r24

	//  Select The Adjustment

#if   ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

	Clr_Bit(ADMUX, ADMUX_ADLAR);
    219a:	a7 e2       	ldi	r26, 0x27	; 39
    219c:	b0 e0       	ldi	r27, 0x00	; 0
    219e:	e7 e2       	ldi	r30, 0x27	; 39
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	8f 7d       	andi	r24, 0xDF	; 223
    21a6:	8c 93       	st	X, r24

	// Set Prescaler Value

	if(ADC_PRESCALER >= ADC_PRE_2 && ADC_PRESCALER <= ADC_PRE_128) {

		ADCSRA &= ADC_PRESCALER_MASK ;
    21a8:	a6 e2       	ldi	r26, 0x26	; 38
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	e6 e2       	ldi	r30, 0x26	; 38
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	88 7f       	andi	r24, 0xF8	; 248
    21b4:	8c 93       	st	X, r24
		ADCSRA |= ADC_PRESCALER ;
    21b6:	a6 e2       	ldi	r26, 0x26	; 38
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	e6 e2       	ldi	r30, 0x26	; 38
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	87 60       	ori	r24, 0x07	; 7
    21c2:	8c 93       	st	X, r24

	Clr_Bit(ADCSRA , ADCSRA_ADEN) ;

#elif ADC_STATUS == ADC_ENABLE

	Set_Bit(ADCSRA , ADCSRA_ADEN) ;
    21c4:	a6 e2       	ldi	r26, 0x26	; 38
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	e6 e2       	ldi	r30, 0x26	; 38
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	80 68       	ori	r24, 0x80	; 128
    21d0:	8c 93       	st	X, r24
#endif


#if INT_STATUS == INT_DISABLE

	Clr_Bit(ADCSRA , ADCSRA_ADIE) ;
    21d2:	a6 e2       	ldi	r26, 0x26	; 38
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	e6 e2       	ldi	r30, 0x26	; 38
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	87 7f       	andi	r24, 0xF7	; 247
    21de:	8c 93       	st	X, r24

#else
#error "Wrong ADC INT_STATUS Configuration"
#endif

	return Local_enuErrorState;
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    21e2:	0f 90       	pop	r0
    21e4:	cf 91       	pop	r28
    21e6:	df 91       	pop	r29
    21e8:	08 95       	ret

000021ea <ADC_enuEnable>:


ES_t ADC_enuEnable(void) {
    21ea:	df 93       	push	r29
    21ec:	cf 93       	push	r28
    21ee:	0f 92       	push	r0
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_OK;
    21f4:	19 82       	std	Y+1, r1	; 0x01

	Set_Bit(ADCSRA , ADCSRA_ADEN) ;
    21f6:	a6 e2       	ldi	r26, 0x26	; 38
    21f8:	b0 e0       	ldi	r27, 0x00	; 0
    21fa:	e6 e2       	ldi	r30, 0x26	; 38
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	80 81       	ld	r24, Z
    2200:	80 68       	ori	r24, 0x80	; 128
    2202:	8c 93       	st	X, r24

	return Local_enuErrorState;
    2204:	89 81       	ldd	r24, Y+1	; 0x01
}
    2206:	0f 90       	pop	r0
    2208:	cf 91       	pop	r28
    220a:	df 91       	pop	r29
    220c:	08 95       	ret

0000220e <ADC_enuDisable>:


ES_t ADC_enuDisable(void) {
    220e:	df 93       	push	r29
    2210:	cf 93       	push	r28
    2212:	0f 92       	push	r0
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_OK;
    2218:	19 82       	std	Y+1, r1	; 0x01

	Clr_Bit(ADCSRA , ADCSRA_ADEN) ;
    221a:	a6 e2       	ldi	r26, 0x26	; 38
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e6 e2       	ldi	r30, 0x26	; 38
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	8f 77       	andi	r24, 0x7F	; 127
    2226:	8c 93       	st	X, r24

	return Local_enuErrorState;
    2228:	89 81       	ldd	r24, Y+1	; 0x01
}
    222a:	0f 90       	pop	r0
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	08 95       	ret

00002232 <ADC_enuInterruptEnable>:



ES_t ADC_enuInterruptEnable(void) {
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	0f 92       	push	r0
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_OK;
    223c:	19 82       	std	Y+1, r1	; 0x01

	Set_Bit(ADCSRA , ADCSRA_ADIE) ;
    223e:	a6 e2       	ldi	r26, 0x26	; 38
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	e6 e2       	ldi	r30, 0x26	; 38
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	88 60       	ori	r24, 0x08	; 8
    224a:	8c 93       	st	X, r24

	return Local_enuErrorState;
    224c:	89 81       	ldd	r24, Y+1	; 0x01
}
    224e:	0f 90       	pop	r0
    2250:	cf 91       	pop	r28
    2252:	df 91       	pop	r29
    2254:	08 95       	ret

00002256 <ADC_enuInterruptDisable>:


ES_t ADC_enuInterruptDisable(void) {
    2256:	df 93       	push	r29
    2258:	cf 93       	push	r28
    225a:	0f 92       	push	r0
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_OK;
    2260:	19 82       	std	Y+1, r1	; 0x01

	Clr_Bit(ADCSRA , ADCSRA_ADIE) ;
    2262:	a6 e2       	ldi	r26, 0x26	; 38
    2264:	b0 e0       	ldi	r27, 0x00	; 0
    2266:	e6 e2       	ldi	r30, 0x26	; 38
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	87 7f       	andi	r24, 0xF7	; 247
    226e:	8c 93       	st	X, r24

	return Local_enuErrorState;
    2270:	89 81       	ldd	r24, Y+1	; 0x01
}
    2272:	0f 90       	pop	r0
    2274:	cf 91       	pop	r28
    2276:	df 91       	pop	r29
    2278:	08 95       	ret

0000227a <ADC_enuSetPrescaler>:
//}




ES_t ADC_enuSetPrescaler (u8 Copy_u8Prescaler) {
    227a:	df 93       	push	r29
    227c:	cf 93       	push	r28
    227e:	00 d0       	rcall	.+0      	; 0x2280 <ADC_enuSetPrescaler+0x6>
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
    2284:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_OK;
    2286:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Prescaler >= ADC_PRE_2 && Copy_u8Prescaler <= ADC_PRE_128) {
    2288:	8a 81       	ldd	r24, Y+2	; 0x02
    228a:	88 30       	cpi	r24, 0x08	; 8
    228c:	80 f4       	brcc	.+32     	; 0x22ae <ADC_enuSetPrescaler+0x34>

		// Set Prescaler Value
		ADCSRA &= ADC_PRESCALER_MASK ;
    228e:	a6 e2       	ldi	r26, 0x26	; 38
    2290:	b0 e0       	ldi	r27, 0x00	; 0
    2292:	e6 e2       	ldi	r30, 0x26	; 38
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	80 81       	ld	r24, Z
    2298:	88 7f       	andi	r24, 0xF8	; 248
    229a:	8c 93       	st	X, r24
		ADCSRA |= Copy_u8Prescaler ;
    229c:	a6 e2       	ldi	r26, 0x26	; 38
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	e6 e2       	ldi	r30, 0x26	; 38
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	90 81       	ld	r25, Z
    22a6:	8a 81       	ldd	r24, Y+2	; 0x02
    22a8:	89 2b       	or	r24, r25
    22aa:	8c 93       	st	X, r24
    22ac:	02 c0       	rjmp	.+4      	; 0x22b2 <ADC_enuSetPrescaler+0x38>

	}
	else {

		Local_enuErrorState = ES_UNSUPPORTED_prescaller_Config;
    22ae:	85 e0       	ldi	r24, 0x05	; 5
    22b0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
    22b8:	cf 91       	pop	r28
    22ba:	df 91       	pop	r29
    22bc:	08 95       	ret

000022be <ADC_enuGetReadSync>:




ES_t   ADC_enuGetReadSync(u8 Copy_u8Channel, u16* Copy_pu16ReadingValue) {
    22be:	df 93       	push	r29
    22c0:	cf 93       	push	r28
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
    22c6:	28 97       	sbiw	r28, 0x08	; 8
    22c8:	0f b6       	in	r0, 0x3f	; 63
    22ca:	f8 94       	cli
    22cc:	de bf       	out	0x3e, r29	; 62
    22ce:	0f be       	out	0x3f, r0	; 63
    22d0:	cd bf       	out	0x3d, r28	; 61
    22d2:	8e 83       	std	Y+6, r24	; 0x06
    22d4:	78 87       	std	Y+8, r23	; 0x08
    22d6:	6f 83       	std	Y+7, r22	; 0x07
	ES_t Local_enuErrorState = ES_OK;
    22d8:	1d 82       	std	Y+5, r1	; 0x05

	u32 Local_u32TimeOutCounter = 0;
    22da:	19 82       	std	Y+1, r1	; 0x01
    22dc:	1a 82       	std	Y+2, r1	; 0x02
    22de:	1b 82       	std	Y+3, r1	; 0x03
    22e0:	1c 82       	std	Y+4, r1	; 0x04

	if(Copy_pu16ReadingValue != NULL) {
    22e2:	8f 81       	ldd	r24, Y+7	; 0x07
    22e4:	98 85       	ldd	r25, Y+8	; 0x08
    22e6:	00 97       	sbiw	r24, 0x00	; 0
    22e8:	09 f4       	brne	.+2      	; 0x22ec <ADC_enuGetReadSync+0x2e>
    22ea:	6f c0       	rjmp	.+222    	; 0x23ca <ADC_enuGetReadSync+0x10c>

		if(Global_u8ADCState == IDLE) {
    22ec:	80 91 ea 01 	lds	r24, 0x01EA
    22f0:	88 23       	and	r24, r24
    22f2:	09 f0       	breq	.+2      	; 0x22f6 <ADC_enuGetReadSync+0x38>
    22f4:	67 c0       	rjmp	.+206    	; 0x23c4 <ADC_enuGetReadSync+0x106>

			// ADC is now Busy
			Global_u8ADCState = BUSY;
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	80 93 ea 01 	sts	0x01EA, r24

			// Set required channel
			ADMUX &= ADC_CHANNEL_MASK;
    22fc:	a7 e2       	ldi	r26, 0x27	; 39
    22fe:	b0 e0       	ldi	r27, 0x00	; 0
    2300:	e7 e2       	ldi	r30, 0x27	; 39
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	80 7e       	andi	r24, 0xE0	; 224
    2308:	8c 93       	st	X, r24
			ADMUX |= Copy_u8Channel;
    230a:	a7 e2       	ldi	r26, 0x27	; 39
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	e7 e2       	ldi	r30, 0x27	; 39
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	90 81       	ld	r25, Z
    2314:	8e 81       	ldd	r24, Y+6	; 0x06
    2316:	89 2b       	or	r24, r25
    2318:	8c 93       	st	X, r24

			// Start Conversion
			Set_Bit(ADCSRA, ADCSRA_ADSC);
    231a:	a6 e2       	ldi	r26, 0x26	; 38
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	e6 e2       	ldi	r30, 0x26	; 38
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	80 64       	ori	r24, 0x40	; 64
    2326:	8c 93       	st	X, r24
    2328:	0b c0       	rjmp	.+22     	; 0x2340 <ADC_enuGetReadSync+0x82>


			while(!Get_Bit(ADCSRA, ADCSRA_ADIF) && Local_u32TimeOutCounter < ADC_TIMEOUT) {

				Local_u32TimeOutCounter++;
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	9a 81       	ldd	r25, Y+2	; 0x02
    232e:	ab 81       	ldd	r26, Y+3	; 0x03
    2330:	bc 81       	ldd	r27, Y+4	; 0x04
    2332:	01 96       	adiw	r24, 0x01	; 1
    2334:	a1 1d       	adc	r26, r1
    2336:	b1 1d       	adc	r27, r1
    2338:	89 83       	std	Y+1, r24	; 0x01
    233a:	9a 83       	std	Y+2, r25	; 0x02
    233c:	ab 83       	std	Y+3, r26	; 0x03
    233e:	bc 83       	std	Y+4, r27	; 0x04

			// Start Conversion
			Set_Bit(ADCSRA, ADCSRA_ADSC);


			while(!Get_Bit(ADCSRA, ADCSRA_ADIF) && Local_u32TimeOutCounter < ADC_TIMEOUT) {
    2340:	e6 e2       	ldi	r30, 0x26	; 38
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	80 81       	ld	r24, Z
    2346:	82 95       	swap	r24
    2348:	8f 70       	andi	r24, 0x0F	; 15
    234a:	88 2f       	mov	r24, r24
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	81 70       	andi	r24, 0x01	; 1
    2350:	90 70       	andi	r25, 0x00	; 0
    2352:	00 97       	sbiw	r24, 0x00	; 0
    2354:	61 f4       	brne	.+24     	; 0x236e <ADC_enuGetReadSync+0xb0>
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	9a 81       	ldd	r25, Y+2	; 0x02
    235a:	ab 81       	ldd	r26, Y+3	; 0x03
    235c:	bc 81       	ldd	r27, Y+4	; 0x04
    235e:	80 35       	cpi	r24, 0x50	; 80
    2360:	23 ec       	ldi	r18, 0xC3	; 195
    2362:	92 07       	cpc	r25, r18
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	a2 07       	cpc	r26, r18
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	b2 07       	cpc	r27, r18
    236c:	f0 f2       	brcs	.-68     	; 0x232a <ADC_enuGetReadSync+0x6c>

				Local_u32TimeOutCounter++;
			}

			if(Local_u32TimeOutCounter == ADC_TIMEOUT) {
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	9a 81       	ldd	r25, Y+2	; 0x02
    2372:	ab 81       	ldd	r26, Y+3	; 0x03
    2374:	bc 81       	ldd	r27, Y+4	; 0x04
    2376:	80 35       	cpi	r24, 0x50	; 80
    2378:	23 ec       	ldi	r18, 0xC3	; 195
    237a:	92 07       	cpc	r25, r18
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	a2 07       	cpc	r26, r18
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	b2 07       	cpc	r27, r18
    2384:	19 f4       	brne	.+6      	; 0x238c <ADC_enuGetReadSync+0xce>

				Local_enuErrorState = ES_TIMEOUT_STATE;
    2386:	87 e0       	ldi	r24, 0x07	; 7
    2388:	8d 83       	std	Y+5, r24	; 0x05
    238a:	19 c0       	rjmp	.+50     	; 0x23be <ADC_enuGetReadSync+0x100>
			}
			else {

				// Clear the interrupt flag
				Set_Bit(ADCSRA, ADCSRA_ADIF);
    238c:	a6 e2       	ldi	r26, 0x26	; 38
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	e6 e2       	ldi	r30, 0x26	; 38
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	80 61       	ori	r24, 0x10	; 16
    2398:	8c 93       	st	X, r24

				// Return Conversion Result
#if   ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

				*Copy_pu16ReadingValue  = (ADCL | ((u16)ADCH << 8));
    239a:	e4 e2       	ldi	r30, 0x24	; 36
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	80 81       	ld	r24, Z
    23a0:	28 2f       	mov	r18, r24
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	e5 e2       	ldi	r30, 0x25	; 37
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	80 81       	ld	r24, Z
    23aa:	88 2f       	mov	r24, r24
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	98 2f       	mov	r25, r24
    23b0:	88 27       	eor	r24, r24
    23b2:	82 2b       	or	r24, r18
    23b4:	93 2b       	or	r25, r19
    23b6:	ef 81       	ldd	r30, Y+7	; 0x07
    23b8:	f8 85       	ldd	r31, Y+8	; 0x08
    23ba:	91 83       	std	Z+1, r25	; 0x01
    23bc:	80 83       	st	Z, r24
#endif

			}

			// ADC is now IDLE
			Global_u8ADCState = IDLE;
    23be:	10 92 ea 01 	sts	0x01EA, r1
    23c2:	05 c0       	rjmp	.+10     	; 0x23ce <ADC_enuGetReadSync+0x110>
		}
		else {

			Local_enuErrorState = ES_BUSY_STATE;
    23c4:	88 e0       	ldi	r24, 0x08	; 8
    23c6:	8d 83       	std	Y+5, r24	; 0x05
    23c8:	02 c0       	rjmp	.+4      	; 0x23ce <ADC_enuGetReadSync+0x110>
		}
	}
	else {

		Local_enuErrorState = ES_NULL_POINTER;
    23ca:	82 e0       	ldi	r24, 0x02	; 2
    23cc:	8d 83       	std	Y+5, r24	; 0x05
	}

	return Local_enuErrorState;
    23ce:	8d 81       	ldd	r24, Y+5	; 0x05
}
    23d0:	28 96       	adiw	r28, 0x08	; 8
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	f8 94       	cli
    23d6:	de bf       	out	0x3e, r29	; 62
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	cd bf       	out	0x3d, r28	; 61
    23dc:	cf 91       	pop	r28
    23de:	df 91       	pop	r29
    23e0:	08 95       	ret

000023e2 <ADC_enuStartConversionAsynch>:




ES_t   ADC_enuStartConversionAsynch(u8 Copy_u8Channel, u16* Copy_pu16ReadingValue , void(*Copy_pvoidNotificationFunc)(void)) {
    23e2:	df 93       	push	r29
    23e4:	cf 93       	push	r28
    23e6:	00 d0       	rcall	.+0      	; 0x23e8 <ADC_enuStartConversionAsynch+0x6>
    23e8:	00 d0       	rcall	.+0      	; 0x23ea <ADC_enuStartConversionAsynch+0x8>
    23ea:	00 d0       	rcall	.+0      	; 0x23ec <ADC_enuStartConversionAsynch+0xa>
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
    23f0:	8a 83       	std	Y+2, r24	; 0x02
    23f2:	7c 83       	std	Y+4, r23	; 0x04
    23f4:	6b 83       	std	Y+3, r22	; 0x03
    23f6:	5e 83       	std	Y+6, r21	; 0x06
    23f8:	4d 83       	std	Y+5, r20	; 0x05
	ES_t Local_enuErrorState = ES_OK;
    23fa:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu16ReadingValue != NULL && Copy_pvoidNotificationFunc != NULL) {
    23fc:	8b 81       	ldd	r24, Y+3	; 0x03
    23fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2400:	00 97       	sbiw	r24, 0x00	; 0
    2402:	d1 f1       	breq	.+116    	; 0x2478 <ADC_enuStartConversionAsynch+0x96>
    2404:	8d 81       	ldd	r24, Y+5	; 0x05
    2406:	9e 81       	ldd	r25, Y+6	; 0x06
    2408:	00 97       	sbiw	r24, 0x00	; 0
    240a:	b1 f1       	breq	.+108    	; 0x2478 <ADC_enuStartConversionAsynch+0x96>

		if(Global_u8ADCState == IDLE) {
    240c:	80 91 ea 01 	lds	r24, 0x01EA
    2410:	88 23       	and	r24, r24
    2412:	79 f5       	brne	.+94     	; 0x2472 <ADC_enuStartConversionAsynch+0x90>

			// ADC is now Busy
			Global_u8ADCState = BUSY;
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	80 93 ea 01 	sts	0x01EA, r24

			// set ISR state
			Global_u8ADCISRSource = SINGLE_CHANNEL_ASYNCH;
    241a:	10 92 eb 01 	sts	0x01EB, r1

			// Initialize the global result pointer
			ADC_pu16AsynchConversionResult = Copy_pu16ReadingValue;
    241e:	8b 81       	ldd	r24, Y+3	; 0x03
    2420:	9c 81       	ldd	r25, Y+4	; 0x04
    2422:	90 93 e7 01 	sts	0x01E7, r25
    2426:	80 93 e6 01 	sts	0x01E6, r24

			// Set Callback Funcation
			ADC_pvidNotificationFunc = Copy_pvoidNotificationFunc;
    242a:	8d 81       	ldd	r24, Y+5	; 0x05
    242c:	9e 81       	ldd	r25, Y+6	; 0x06
    242e:	90 93 e9 01 	sts	0x01E9, r25
    2432:	80 93 e8 01 	sts	0x01E8, r24

			// Set required channel
			ADMUX &= ADC_CHANNEL_MASK;
    2436:	a7 e2       	ldi	r26, 0x27	; 39
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	e7 e2       	ldi	r30, 0x27	; 39
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	80 7e       	andi	r24, 0xE0	; 224
    2442:	8c 93       	st	X, r24
			ADMUX |= Copy_u8Channel;
    2444:	a7 e2       	ldi	r26, 0x27	; 39
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	e7 e2       	ldi	r30, 0x27	; 39
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	90 81       	ld	r25, Z
    244e:	8a 81       	ldd	r24, Y+2	; 0x02
    2450:	89 2b       	or	r24, r25
    2452:	8c 93       	st	X, r24

			// Start Conversion
			Set_Bit(ADCSRA, ADCSRA_ADSC);
    2454:	a6 e2       	ldi	r26, 0x26	; 38
    2456:	b0 e0       	ldi	r27, 0x00	; 0
    2458:	e6 e2       	ldi	r30, 0x26	; 38
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
    245e:	80 64       	ori	r24, 0x40	; 64
    2460:	8c 93       	st	X, r24

			// ADC Conversion Complete Interrupt Enable
			Set_Bit(ADCSRA , ADCSRA_ADIE) ;
    2462:	a6 e2       	ldi	r26, 0x26	; 38
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e6 e2       	ldi	r30, 0x26	; 38
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	88 60       	ori	r24, 0x08	; 8
    246e:	8c 93       	st	X, r24
    2470:	05 c0       	rjmp	.+10     	; 0x247c <ADC_enuStartConversionAsynch+0x9a>
		}
		else {

			Local_enuErrorState = ES_BUSY_STATE;
    2472:	88 e0       	ldi	r24, 0x08	; 8
    2474:	89 83       	std	Y+1, r24	; 0x01
    2476:	02 c0       	rjmp	.+4      	; 0x247c <ADC_enuStartConversionAsynch+0x9a>
		}
	}
	else {

		Local_enuErrorState = ES_NULL_POINTER;
    2478:	82 e0       	ldi	r24, 0x02	; 2
    247a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    247c:	89 81       	ldd	r24, Y+1	; 0x01
}
    247e:	26 96       	adiw	r28, 0x06	; 6
    2480:	0f b6       	in	r0, 0x3f	; 63
    2482:	f8 94       	cli
    2484:	de bf       	out	0x3e, r29	; 62
    2486:	0f be       	out	0x3f, r0	; 63
    2488:	cd bf       	out	0x3d, r28	; 61
    248a:	cf 91       	pop	r28
    248c:	df 91       	pop	r29
    248e:	08 95       	ret

00002490 <ADC_enuStartConversionChainAsynch>:




ES_t ADC_enuStartConversionChainAsynch (Chain_t * Copy_Chain) {
    2490:	df 93       	push	r29
    2492:	cf 93       	push	r28
    2494:	00 d0       	rcall	.+0      	; 0x2496 <ADC_enuStartConversionChainAsynch+0x6>
    2496:	0f 92       	push	r0
    2498:	cd b7       	in	r28, 0x3d	; 61
    249a:	de b7       	in	r29, 0x3e	; 62
    249c:	9b 83       	std	Y+3, r25	; 0x03
    249e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_OK;
    24a0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_Chain != NULL && Copy_Chain->Channel != NULL && Copy_Chain->Result != NULL && Copy_Chain->NotificationFunc) {
    24a2:	8a 81       	ldd	r24, Y+2	; 0x02
    24a4:	9b 81       	ldd	r25, Y+3	; 0x03
    24a6:	00 97       	sbiw	r24, 0x00	; 0
    24a8:	09 f4       	brne	.+2      	; 0x24ac <ADC_enuStartConversionChainAsynch+0x1c>
    24aa:	68 c0       	rjmp	.+208    	; 0x257c <ADC_enuStartConversionChainAsynch+0xec>
    24ac:	ea 81       	ldd	r30, Y+2	; 0x02
    24ae:	fb 81       	ldd	r31, Y+3	; 0x03
    24b0:	80 81       	ld	r24, Z
    24b2:	91 81       	ldd	r25, Z+1	; 0x01
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	09 f4       	brne	.+2      	; 0x24ba <ADC_enuStartConversionChainAsynch+0x2a>
    24b8:	61 c0       	rjmp	.+194    	; 0x257c <ADC_enuStartConversionChainAsynch+0xec>
    24ba:	ea 81       	ldd	r30, Y+2	; 0x02
    24bc:	fb 81       	ldd	r31, Y+3	; 0x03
    24be:	82 81       	ldd	r24, Z+2	; 0x02
    24c0:	93 81       	ldd	r25, Z+3	; 0x03
    24c2:	00 97       	sbiw	r24, 0x00	; 0
    24c4:	09 f4       	brne	.+2      	; 0x24c8 <ADC_enuStartConversionChainAsynch+0x38>
    24c6:	5a c0       	rjmp	.+180    	; 0x257c <ADC_enuStartConversionChainAsynch+0xec>
    24c8:	ea 81       	ldd	r30, Y+2	; 0x02
    24ca:	fb 81       	ldd	r31, Y+3	; 0x03
    24cc:	85 81       	ldd	r24, Z+5	; 0x05
    24ce:	96 81       	ldd	r25, Z+6	; 0x06
    24d0:	00 97       	sbiw	r24, 0x00	; 0
    24d2:	09 f4       	brne	.+2      	; 0x24d6 <ADC_enuStartConversionChainAsynch+0x46>
    24d4:	53 c0       	rjmp	.+166    	; 0x257c <ADC_enuStartConversionChainAsynch+0xec>

		if(Global_u8ADCState == IDLE) {
    24d6:	80 91 ea 01 	lds	r24, 0x01EA
    24da:	88 23       	and	r24, r24
    24dc:	09 f0       	breq	.+2      	; 0x24e0 <ADC_enuStartConversionChainAsynch+0x50>
    24de:	4b c0       	rjmp	.+150    	; 0x2576 <ADC_enuStartConversionChainAsynch+0xe6>

			// ADC is now Busy
			Global_u8ADCState = BUSY;
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	80 93 ea 01 	sts	0x01EA, r24

			// Initialize the global result pointer
			ADC_pu16AsynchConversionResult = Copy_Chain->Result ;
    24e6:	ea 81       	ldd	r30, Y+2	; 0x02
    24e8:	fb 81       	ldd	r31, Y+3	; 0x03
    24ea:	82 81       	ldd	r24, Z+2	; 0x02
    24ec:	93 81       	ldd	r25, Z+3	; 0x03
    24ee:	90 93 e7 01 	sts	0x01E7, r25
    24f2:	80 93 e6 01 	sts	0x01E6, r24

			// Initialize the global Chain Channel pointer
			Global_pu8ADCChainChannel = Copy_Chain->Channel ;
    24f6:	ea 81       	ldd	r30, Y+2	; 0x02
    24f8:	fb 81       	ldd	r31, Y+3	; 0x03
    24fa:	80 81       	ld	r24, Z
    24fc:	91 81       	ldd	r25, Z+1	; 0x01
    24fe:	90 93 ed 01 	sts	0x01ED, r25
    2502:	80 93 ec 01 	sts	0x01EC, r24

			// Set ChainSize to global Chain Size Var.
			Global_u8ADCChainSize = Copy_Chain->Size ;
    2506:	ea 81       	ldd	r30, Y+2	; 0x02
    2508:	fb 81       	ldd	r31, Y+3	; 0x03
    250a:	84 81       	ldd	r24, Z+4	; 0x04
    250c:	80 93 ee 01 	sts	0x01EE, r24

			// Set Callback Funcation
			ADC_pvidNotificationFunc = Copy_Chain->NotificationFunc;
    2510:	ea 81       	ldd	r30, Y+2	; 0x02
    2512:	fb 81       	ldd	r31, Y+3	; 0x03
    2514:	85 81       	ldd	r24, Z+5	; 0x05
    2516:	96 81       	ldd	r25, Z+6	; 0x06
    2518:	90 93 e9 01 	sts	0x01E9, r25
    251c:	80 93 e8 01 	sts	0x01E8, r24

			// Set Index to first element
			Global_u8ADCIndex = 0;
    2520:	10 92 ef 01 	sts	0x01EF, r1

			// Set required channel
			ADMUX &= ADC_CHANNEL_MASK;
    2524:	a7 e2       	ldi	r26, 0x27	; 39
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	e7 e2       	ldi	r30, 0x27	; 39
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	80 7e       	andi	r24, 0xE0	; 224
    2530:	8c 93       	st	X, r24
			ADMUX |= Global_pu8ADCChainChannel[Global_u8ADCIndex];
    2532:	a7 e2       	ldi	r26, 0x27	; 39
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	e7 e2       	ldi	r30, 0x27	; 39
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	40 81       	ld	r20, Z
    253c:	20 91 ec 01 	lds	r18, 0x01EC
    2540:	30 91 ed 01 	lds	r19, 0x01ED
    2544:	80 91 ef 01 	lds	r24, 0x01EF
    2548:	88 2f       	mov	r24, r24
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	f9 01       	movw	r30, r18
    254e:	e8 0f       	add	r30, r24
    2550:	f9 1f       	adc	r31, r25
    2552:	80 81       	ld	r24, Z
    2554:	84 2b       	or	r24, r20
    2556:	8c 93       	st	X, r24

			// Start Conversion
			Set_Bit(ADCSRA, ADCSRA_ADSC);
    2558:	a6 e2       	ldi	r26, 0x26	; 38
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	e6 e2       	ldi	r30, 0x26	; 38
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	80 64       	ori	r24, 0x40	; 64
    2564:	8c 93       	st	X, r24

			// ADC Conversion Complete Interrupt Enable
			Set_Bit(ADCSRA , ADCSRA_ADIE) ;
    2566:	a6 e2       	ldi	r26, 0x26	; 38
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	e6 e2       	ldi	r30, 0x26	; 38
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	88 60       	ori	r24, 0x08	; 8
    2572:	8c 93       	st	X, r24
    2574:	05 c0       	rjmp	.+10     	; 0x2580 <ADC_enuStartConversionChainAsynch+0xf0>
		}
		else {

			Local_enuErrorState = ES_BUSY_STATE;
    2576:	88 e0       	ldi	r24, 0x08	; 8
    2578:	89 83       	std	Y+1, r24	; 0x01
    257a:	02 c0       	rjmp	.+4      	; 0x2580 <ADC_enuStartConversionChainAsynch+0xf0>
		}
	}
	else {

		Local_enuErrorState = ES_NULL_POINTER;
    257c:	82 e0       	ldi	r24, 0x02	; 2
    257e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2580:	89 81       	ldd	r24, Y+1	; 0x01
}
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	0f 90       	pop	r0
    2588:	cf 91       	pop	r28
    258a:	df 91       	pop	r29
    258c:	08 95       	ret

0000258e <__vector_16>:


ISR(VECT_ADC)
{
    258e:	1f 92       	push	r1
    2590:	0f 92       	push	r0
    2592:	0f b6       	in	r0, 0x3f	; 63
    2594:	0f 92       	push	r0
    2596:	11 24       	eor	r1, r1
    2598:	2f 93       	push	r18
    259a:	3f 93       	push	r19
    259c:	4f 93       	push	r20
    259e:	5f 93       	push	r21
    25a0:	6f 93       	push	r22
    25a2:	7f 93       	push	r23
    25a4:	8f 93       	push	r24
    25a6:	9f 93       	push	r25
    25a8:	af 93       	push	r26
    25aa:	bf 93       	push	r27
    25ac:	ef 93       	push	r30
    25ae:	ff 93       	push	r31
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
	if(Global_u8ADCISRSource == SINGLE_CHANNEL_ASYNCH) {
    25b8:	80 91 eb 01 	lds	r24, 0x01EB
    25bc:	88 23       	and	r24, r24
    25be:	19 f5       	brne	.+70     	; 0x2606 <__vector_16+0x78>

		// Get Conversion Result
#if   ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

		*ADC_pu16AsynchConversionResult  = (ADCL | ((u16)ADCH << 8));
    25c0:	a0 91 e6 01 	lds	r26, 0x01E6
    25c4:	b0 91 e7 01 	lds	r27, 0x01E7
    25c8:	e4 e2       	ldi	r30, 0x24	; 36
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	80 81       	ld	r24, Z
    25ce:	28 2f       	mov	r18, r24
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	e5 e2       	ldi	r30, 0x25	; 37
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	88 2f       	mov	r24, r24
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	98 2f       	mov	r25, r24
    25de:	88 27       	eor	r24, r24
    25e0:	82 2b       	or	r24, r18
    25e2:	93 2b       	or	r25, r19
    25e4:	8d 93       	st	X+, r24
    25e6:	9c 93       	st	X, r25
#else
#error "Wrong ADC ADJUSTMENT Configuration"
#endif

		// ADC is now IDLE
		Global_u8ADCState = IDLE;
    25e8:	10 92 ea 01 	sts	0x01EA, r1

		// Call Notification Function
		ADC_pvidNotificationFunc() ;
    25ec:	e0 91 e8 01 	lds	r30, 0x01E8
    25f0:	f0 91 e9 01 	lds	r31, 0x01E9
    25f4:	09 95       	icall

		// Disable the Conversion Complete Interrupt
		Clr_Bit(ADCSRA , ADCSRA_ADIE);
    25f6:	a6 e2       	ldi	r26, 0x26	; 38
    25f8:	b0 e0       	ldi	r27, 0x00	; 0
    25fa:	e6 e2       	ldi	r30, 0x26	; 38
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	80 81       	ld	r24, Z
    2600:	87 7f       	andi	r24, 0xF7	; 247
    2602:	8c 93       	st	X, r24
    2604:	50 c0       	rjmp	.+160    	; 0x26a6 <__vector_16+0x118>
	else {

		// Get Conversion Result
#if   ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

		*ADC_pu16AsynchConversionResult  = (ADCL | ((u16)ADCH << 8));
    2606:	a0 91 e6 01 	lds	r26, 0x01E6
    260a:	b0 91 e7 01 	lds	r27, 0x01E7
    260e:	e4 e2       	ldi	r30, 0x24	; 36
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	28 2f       	mov	r18, r24
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	e5 e2       	ldi	r30, 0x25	; 37
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	88 2f       	mov	r24, r24
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	98 2f       	mov	r25, r24
    2624:	88 27       	eor	r24, r24
    2626:	82 2b       	or	r24, r18
    2628:	93 2b       	or	r25, r19
    262a:	11 96       	adiw	r26, 0x01	; 1
    262c:	9c 93       	st	X, r25
    262e:	8e 93       	st	-X, r24

#else
#error "Wrong ADC ADJUSTMENT Configuration"
#endif

		Global_u8ADCIndex++;
    2630:	80 91 ef 01 	lds	r24, 0x01EF
    2634:	8f 5f       	subi	r24, 0xFF	; 255
    2636:	80 93 ef 01 	sts	0x01EF, r24

		if(Global_u8ADCIndex == Global_u8ADCChainSize) {
    263a:	90 91 ef 01 	lds	r25, 0x01EF
    263e:	80 91 ee 01 	lds	r24, 0x01EE
    2642:	98 17       	cp	r25, r24
    2644:	79 f4       	brne	.+30     	; 0x2664 <__vector_16+0xd6>

			// ADC is now IDLE
			Global_u8ADCState = IDLE;
    2646:	10 92 ea 01 	sts	0x01EA, r1

			// Call Notification Function
			ADC_pvidNotificationFunc() ;
    264a:	e0 91 e8 01 	lds	r30, 0x01E8
    264e:	f0 91 e9 01 	lds	r31, 0x01E9
    2652:	09 95       	icall

			// Disable the Conversion Complete Interrupt
			Clr_Bit(ADCSRA , ADCSRA_ADIE);
    2654:	a6 e2       	ldi	r26, 0x26	; 38
    2656:	b0 e0       	ldi	r27, 0x00	; 0
    2658:	e6 e2       	ldi	r30, 0x26	; 38
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	80 81       	ld	r24, Z
    265e:	87 7f       	andi	r24, 0xF7	; 247
    2660:	8c 93       	st	X, r24
    2662:	21 c0       	rjmp	.+66     	; 0x26a6 <__vector_16+0x118>

		}
		else {

			// Set required channel
			ADMUX &= ADC_CHANNEL_MASK;
    2664:	a7 e2       	ldi	r26, 0x27	; 39
    2666:	b0 e0       	ldi	r27, 0x00	; 0
    2668:	e7 e2       	ldi	r30, 0x27	; 39
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	80 81       	ld	r24, Z
    266e:	80 7e       	andi	r24, 0xE0	; 224
    2670:	8c 93       	st	X, r24
			ADMUX |= Global_pu8ADCChainChannel[Global_u8ADCIndex];
    2672:	a7 e2       	ldi	r26, 0x27	; 39
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	e7 e2       	ldi	r30, 0x27	; 39
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	40 81       	ld	r20, Z
    267c:	20 91 ec 01 	lds	r18, 0x01EC
    2680:	30 91 ed 01 	lds	r19, 0x01ED
    2684:	80 91 ef 01 	lds	r24, 0x01EF
    2688:	88 2f       	mov	r24, r24
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	f9 01       	movw	r30, r18
    268e:	e8 0f       	add	r30, r24
    2690:	f9 1f       	adc	r31, r25
    2692:	80 81       	ld	r24, Z
    2694:	84 2b       	or	r24, r20
    2696:	8c 93       	st	X, r24

			// Start Conversion
			Set_Bit(ADCSRA, ADCSRA_ADSC);
    2698:	a6 e2       	ldi	r26, 0x26	; 38
    269a:	b0 e0       	ldi	r27, 0x00	; 0
    269c:	e6 e2       	ldi	r30, 0x26	; 38
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	80 81       	ld	r24, Z
    26a2:	80 64       	ori	r24, 0x40	; 64
    26a4:	8c 93       	st	X, r24
		}
	}
}
    26a6:	cf 91       	pop	r28
    26a8:	df 91       	pop	r29
    26aa:	ff 91       	pop	r31
    26ac:	ef 91       	pop	r30
    26ae:	bf 91       	pop	r27
    26b0:	af 91       	pop	r26
    26b2:	9f 91       	pop	r25
    26b4:	8f 91       	pop	r24
    26b6:	7f 91       	pop	r23
    26b8:	6f 91       	pop	r22
    26ba:	5f 91       	pop	r21
    26bc:	4f 91       	pop	r20
    26be:	3f 91       	pop	r19
    26c0:	2f 91       	pop	r18
    26c2:	0f 90       	pop	r0
    26c4:	0f be       	out	0x3f, r0	; 63
    26c6:	0f 90       	pop	r0
    26c8:	1f 90       	pop	r1
    26ca:	18 95       	reti

000026cc <Switch_enuInit>:
#include "Switch_priv.h"
#include "Switch_config.h"
#include "../../MCAL/DIO/DIO_int.h"

ES_t Switch_enuInit(SW_t * Copy_AstrSwitches)
{
    26cc:	df 93       	push	r29
    26ce:	cf 93       	push	r28
    26d0:	00 d0       	rcall	.+0      	; 0x26d2 <Switch_enuInit+0x6>
    26d2:	00 d0       	rcall	.+0      	; 0x26d4 <Switch_enuInit+0x8>
    26d4:	0f 92       	push	r0
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
    26da:	9c 83       	std	Y+4, r25	; 0x04
    26dc:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_AstrSwitches != NULL)
    26e2:	8b 81       	ldd	r24, Y+3	; 0x03
    26e4:	9c 81       	ldd	r25, Y+4	; 0x04
    26e6:	00 97       	sbiw	r24, 0x00	; 0
    26e8:	09 f4       	brne	.+2      	; 0x26ec <Switch_enuInit+0x20>
    26ea:	62 c0       	rjmp	.+196    	; 0x27b0 <Switch_enuInit+0xe4>
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < SW_NUM; ++Local_u8Iterator)
    26ec:	19 82       	std	Y+1, r1	; 0x01
    26ee:	5b c0       	rjmp	.+182    	; 0x27a6 <Switch_enuInit+0xda>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_AstrSwitches[Local_u8Iterator].SW_PortID, Copy_AstrSwitches[Local_u8Iterator].SW_PinID, DIO_u8INPUT);
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
    26f2:	28 2f       	mov	r18, r24
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	c9 01       	movw	r24, r18
    26f8:	88 0f       	add	r24, r24
    26fa:	99 1f       	adc	r25, r25
    26fc:	28 0f       	add	r18, r24
    26fe:	39 1f       	adc	r19, r25
    2700:	8b 81       	ldd	r24, Y+3	; 0x03
    2702:	9c 81       	ldd	r25, Y+4	; 0x04
    2704:	fc 01       	movw	r30, r24
    2706:	e2 0f       	add	r30, r18
    2708:	f3 1f       	adc	r31, r19
    270a:	40 81       	ld	r20, Z
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	28 2f       	mov	r18, r24
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	c9 01       	movw	r24, r18
    2714:	88 0f       	add	r24, r24
    2716:	99 1f       	adc	r25, r25
    2718:	28 0f       	add	r18, r24
    271a:	39 1f       	adc	r19, r25
    271c:	8b 81       	ldd	r24, Y+3	; 0x03
    271e:	9c 81       	ldd	r25, Y+4	; 0x04
    2720:	fc 01       	movw	r30, r24
    2722:	e2 0f       	add	r30, r18
    2724:	f3 1f       	adc	r31, r19
    2726:	91 81       	ldd	r25, Z+1	; 0x01
    2728:	84 2f       	mov	r24, r20
    272a:	69 2f       	mov	r22, r25
    272c:	40 e0       	ldi	r20, 0x00	; 0
    272e:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    2732:	8a 83       	std	Y+2, r24	; 0x02
			Local_enuErrorState = DIO_enuSetPinValue(Copy_AstrSwitches[Local_u8Iterator].SW_PortID, Copy_AstrSwitches[Local_u8Iterator].SW_PinID, Copy_AstrSwitches[Local_u8Iterator].SW_Status);
    2734:	89 81       	ldd	r24, Y+1	; 0x01
    2736:	28 2f       	mov	r18, r24
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	c9 01       	movw	r24, r18
    273c:	88 0f       	add	r24, r24
    273e:	99 1f       	adc	r25, r25
    2740:	28 0f       	add	r18, r24
    2742:	39 1f       	adc	r19, r25
    2744:	8b 81       	ldd	r24, Y+3	; 0x03
    2746:	9c 81       	ldd	r25, Y+4	; 0x04
    2748:	fc 01       	movw	r30, r24
    274a:	e2 0f       	add	r30, r18
    274c:	f3 1f       	adc	r31, r19
    274e:	50 81       	ld	r21, Z
    2750:	89 81       	ldd	r24, Y+1	; 0x01
    2752:	28 2f       	mov	r18, r24
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	c9 01       	movw	r24, r18
    2758:	88 0f       	add	r24, r24
    275a:	99 1f       	adc	r25, r25
    275c:	28 0f       	add	r18, r24
    275e:	39 1f       	adc	r19, r25
    2760:	8b 81       	ldd	r24, Y+3	; 0x03
    2762:	9c 81       	ldd	r25, Y+4	; 0x04
    2764:	fc 01       	movw	r30, r24
    2766:	e2 0f       	add	r30, r18
    2768:	f3 1f       	adc	r31, r19
    276a:	41 81       	ldd	r20, Z+1	; 0x01
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	28 2f       	mov	r18, r24
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	c9 01       	movw	r24, r18
    2774:	88 0f       	add	r24, r24
    2776:	99 1f       	adc	r25, r25
    2778:	28 0f       	add	r18, r24
    277a:	39 1f       	adc	r19, r25
    277c:	8b 81       	ldd	r24, Y+3	; 0x03
    277e:	9c 81       	ldd	r25, Y+4	; 0x04
    2780:	fc 01       	movw	r30, r24
    2782:	e2 0f       	add	r30, r18
    2784:	f3 1f       	adc	r31, r19
    2786:	92 81       	ldd	r25, Z+2	; 0x02
    2788:	85 2f       	mov	r24, r21
    278a:	64 2f       	mov	r22, r20
    278c:	49 2f       	mov	r20, r25
    278e:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    2792:	8a 83       	std	Y+2, r24	; 0x02
			if(Local_enuErrorState != ES_OK) return Local_enuErrorState;
    2794:	8a 81       	ldd	r24, Y+2	; 0x02
    2796:	88 23       	and	r24, r24
    2798:	19 f0       	breq	.+6      	; 0x27a0 <Switch_enuInit+0xd4>
    279a:	8a 81       	ldd	r24, Y+2	; 0x02
    279c:	8d 83       	std	Y+5, r24	; 0x05
    279e:	0c c0       	rjmp	.+24     	; 0x27b8 <Switch_enuInit+0xec>
	ES_t Local_enuErrorState = ES_NOK;

	if(Copy_AstrSwitches != NULL)
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < SW_NUM; ++Local_u8Iterator)
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	8f 5f       	subi	r24, 0xFF	; 255
    27a4:	89 83       	std	Y+1, r24	; 0x01
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	88 23       	and	r24, r24
    27aa:	09 f4       	brne	.+2      	; 0x27ae <Switch_enuInit+0xe2>
    27ac:	a1 cf       	rjmp	.-190    	; 0x26f0 <Switch_enuInit+0x24>
    27ae:	02 c0       	rjmp	.+4      	; 0x27b4 <Switch_enuInit+0xe8>
			if(Local_enuErrorState != ES_OK) return Local_enuErrorState;
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    27b0:	82 e0       	ldi	r24, 0x02	; 2
    27b2:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_enuErrorState;
    27b4:	8a 81       	ldd	r24, Y+2	; 0x02
    27b6:	8d 83       	std	Y+5, r24	; 0x05
    27b8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    27ba:	0f 90       	pop	r0
    27bc:	0f 90       	pop	r0
    27be:	0f 90       	pop	r0
    27c0:	0f 90       	pop	r0
    27c2:	0f 90       	pop	r0
    27c4:	cf 91       	pop	r28
    27c6:	df 91       	pop	r29
    27c8:	08 95       	ret

000027ca <Switch_enuGetStatus>:


ES_t Switch_enuGetStatus(SW_t * Copy_AstrSwitch, u8 * Copy_pu8SwitchStatus)
{
    27ca:	df 93       	push	r29
    27cc:	cf 93       	push	r28
    27ce:	00 d0       	rcall	.+0      	; 0x27d0 <Switch_enuGetStatus+0x6>
    27d0:	00 d0       	rcall	.+0      	; 0x27d2 <Switch_enuGetStatus+0x8>
    27d2:	0f 92       	push	r0
    27d4:	cd b7       	in	r28, 0x3d	; 61
    27d6:	de b7       	in	r29, 0x3e	; 62
    27d8:	9b 83       	std	Y+3, r25	; 0x03
    27da:	8a 83       	std	Y+2, r24	; 0x02
    27dc:	7d 83       	std	Y+5, r23	; 0x05
    27de:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_AstrSwitch != NULL && Copy_pu8SwitchStatus != NULL)
    27e4:	8a 81       	ldd	r24, Y+2	; 0x02
    27e6:	9b 81       	ldd	r25, Y+3	; 0x03
    27e8:	00 97       	sbiw	r24, 0x00	; 0
    27ea:	91 f0       	breq	.+36     	; 0x2810 <Switch_enuGetStatus+0x46>
    27ec:	8c 81       	ldd	r24, Y+4	; 0x04
    27ee:	9d 81       	ldd	r25, Y+5	; 0x05
    27f0:	00 97       	sbiw	r24, 0x00	; 0
    27f2:	71 f0       	breq	.+28     	; 0x2810 <Switch_enuGetStatus+0x46>
	{
		Local_enuErrorState = DIO_enuGetPinValue(Copy_AstrSwitch->SW_PortID, Copy_AstrSwitch->SW_PinID, Copy_pu8SwitchStatus);
    27f4:	ea 81       	ldd	r30, Y+2	; 0x02
    27f6:	fb 81       	ldd	r31, Y+3	; 0x03
    27f8:	80 81       	ld	r24, Z
    27fa:	ea 81       	ldd	r30, Y+2	; 0x02
    27fc:	fb 81       	ldd	r31, Y+3	; 0x03
    27fe:	91 81       	ldd	r25, Z+1	; 0x01
    2800:	2c 81       	ldd	r18, Y+4	; 0x04
    2802:	3d 81       	ldd	r19, Y+5	; 0x05
    2804:	69 2f       	mov	r22, r25
    2806:	a9 01       	movw	r20, r18
    2808:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <DIO_enuGetPinValue>
    280c:	89 83       	std	Y+1, r24	; 0x01
    280e:	02 c0       	rjmp	.+4      	; 0x2814 <Switch_enuGetStatus+0x4a>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    2810:	82 e0       	ldi	r24, 0x02	; 2
    2812:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    2814:	89 81       	ldd	r24, Y+1	; 0x01
}
    2816:	0f 90       	pop	r0
    2818:	0f 90       	pop	r0
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	0f 90       	pop	r0
    2820:	cf 91       	pop	r28
    2822:	df 91       	pop	r29
    2824:	08 95       	ret

00002826 <Seven_Segment_enuInit>:
#include "Seven_Segment_config.h"

#include "../../../MCAL/DIO/DIO_int.h"

ES_t Seven_Segment_enuInit(void)
{
    2826:	df 93       	push	r29
    2828:	cf 93       	push	r28
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62
    282e:	27 97       	sbiw	r28, 0x07	; 7
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	f8 94       	cli
    2834:	de bf       	out	0x3e, r29	; 62
    2836:	0f be       	out	0x3f, r0	; 63
    2838:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_ErrorState = ES_NOK;
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	8e 83       	std	Y+6, r24	; 0x06

	u32 Local_u32Check = 0;
    283e:	1a 82       	std	Y+2, r1	; 0x02
    2840:	1b 82       	std	Y+3, r1	; 0x03
    2842:	1c 82       	std	Y+4, r1	; 0x04
    2844:	1d 82       	std	Y+5, r1	; 0x05

		Local_u32Check |= (DIO_enuSetPinDirection(SEG_APORT, SEG_APIN, DIO_u8OUTPUT) << 0);
    2846:	82 e0       	ldi	r24, 0x02	; 2
    2848:	60 e0       	ldi	r22, 0x00	; 0
    284a:	41 e0       	ldi	r20, 0x01	; 1
    284c:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    2850:	28 2f       	mov	r18, r24
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	40 e0       	ldi	r20, 0x00	; 0
    2856:	50 e0       	ldi	r21, 0x00	; 0
    2858:	8a 81       	ldd	r24, Y+2	; 0x02
    285a:	9b 81       	ldd	r25, Y+3	; 0x03
    285c:	ac 81       	ldd	r26, Y+4	; 0x04
    285e:	bd 81       	ldd	r27, Y+5	; 0x05
    2860:	82 2b       	or	r24, r18
    2862:	93 2b       	or	r25, r19
    2864:	a4 2b       	or	r26, r20
    2866:	b5 2b       	or	r27, r21
    2868:	8a 83       	std	Y+2, r24	; 0x02
    286a:	9b 83       	std	Y+3, r25	; 0x03
    286c:	ac 83       	std	Y+4, r26	; 0x04
    286e:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (DIO_enuSetPinDirection(SEG_BPORT, SEG_BPIN, DIO_u8OUTPUT) << 3);
    2870:	82 e0       	ldi	r24, 0x02	; 2
    2872:	61 e0       	ldi	r22, 0x01	; 1
    2874:	41 e0       	ldi	r20, 0x01	; 1
    2876:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    287a:	88 2f       	mov	r24, r24
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	88 0f       	add	r24, r24
    2880:	99 1f       	adc	r25, r25
    2882:	88 0f       	add	r24, r24
    2884:	99 1f       	adc	r25, r25
    2886:	88 0f       	add	r24, r24
    2888:	99 1f       	adc	r25, r25
    288a:	9c 01       	movw	r18, r24
    288c:	44 27       	eor	r20, r20
    288e:	37 fd       	sbrc	r19, 7
    2890:	40 95       	com	r20
    2892:	54 2f       	mov	r21, r20
    2894:	8a 81       	ldd	r24, Y+2	; 0x02
    2896:	9b 81       	ldd	r25, Y+3	; 0x03
    2898:	ac 81       	ldd	r26, Y+4	; 0x04
    289a:	bd 81       	ldd	r27, Y+5	; 0x05
    289c:	82 2b       	or	r24, r18
    289e:	93 2b       	or	r25, r19
    28a0:	a4 2b       	or	r26, r20
    28a2:	b5 2b       	or	r27, r21
    28a4:	8a 83       	std	Y+2, r24	; 0x02
    28a6:	9b 83       	std	Y+3, r25	; 0x03
    28a8:	ac 83       	std	Y+4, r26	; 0x04
    28aa:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (DIO_enuSetPinDirection(SEG_CPORT, SEG_CPIN, DIO_u8OUTPUT) << 6);
    28ac:	82 e0       	ldi	r24, 0x02	; 2
    28ae:	62 e0       	ldi	r22, 0x02	; 2
    28b0:	41 e0       	ldi	r20, 0x01	; 1
    28b2:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    28b6:	88 2f       	mov	r24, r24
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	00 24       	eor	r0, r0
    28bc:	96 95       	lsr	r25
    28be:	87 95       	ror	r24
    28c0:	07 94       	ror	r0
    28c2:	96 95       	lsr	r25
    28c4:	87 95       	ror	r24
    28c6:	07 94       	ror	r0
    28c8:	98 2f       	mov	r25, r24
    28ca:	80 2d       	mov	r24, r0
    28cc:	9c 01       	movw	r18, r24
    28ce:	44 27       	eor	r20, r20
    28d0:	37 fd       	sbrc	r19, 7
    28d2:	40 95       	com	r20
    28d4:	54 2f       	mov	r21, r20
    28d6:	8a 81       	ldd	r24, Y+2	; 0x02
    28d8:	9b 81       	ldd	r25, Y+3	; 0x03
    28da:	ac 81       	ldd	r26, Y+4	; 0x04
    28dc:	bd 81       	ldd	r27, Y+5	; 0x05
    28de:	82 2b       	or	r24, r18
    28e0:	93 2b       	or	r25, r19
    28e2:	a4 2b       	or	r26, r20
    28e4:	b5 2b       	or	r27, r21
    28e6:	8a 83       	std	Y+2, r24	; 0x02
    28e8:	9b 83       	std	Y+3, r25	; 0x03
    28ea:	ac 83       	std	Y+4, r26	; 0x04
    28ec:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= ((u32)DIO_enuSetPinDirection(SEG_DPORT, SEG_DPIN, DIO_u8OUTPUT) << 9);
    28ee:	82 e0       	ldi	r24, 0x02	; 2
    28f0:	63 e0       	ldi	r22, 0x03	; 3
    28f2:	41 e0       	ldi	r20, 0x01	; 1
    28f4:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    28f8:	88 2f       	mov	r24, r24
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	a0 e0       	ldi	r26, 0x00	; 0
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	9c 01       	movw	r18, r24
    2902:	ad 01       	movw	r20, r26
    2904:	01 2e       	mov	r0, r17
    2906:	19 e0       	ldi	r17, 0x09	; 9
    2908:	22 0f       	add	r18, r18
    290a:	33 1f       	adc	r19, r19
    290c:	44 1f       	adc	r20, r20
    290e:	55 1f       	adc	r21, r21
    2910:	1a 95       	dec	r17
    2912:	d1 f7       	brne	.-12     	; 0x2908 <Seven_Segment_enuInit+0xe2>
    2914:	10 2d       	mov	r17, r0
    2916:	8a 81       	ldd	r24, Y+2	; 0x02
    2918:	9b 81       	ldd	r25, Y+3	; 0x03
    291a:	ac 81       	ldd	r26, Y+4	; 0x04
    291c:	bd 81       	ldd	r27, Y+5	; 0x05
    291e:	82 2b       	or	r24, r18
    2920:	93 2b       	or	r25, r19
    2922:	a4 2b       	or	r26, r20
    2924:	b5 2b       	or	r27, r21
    2926:	8a 83       	std	Y+2, r24	; 0x02
    2928:	9b 83       	std	Y+3, r25	; 0x03
    292a:	ac 83       	std	Y+4, r26	; 0x04
    292c:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= ((u32)DIO_enuSetPinDirection(SEG_EPORT, SEG_EPIN, DIO_u8OUTPUT) << 12);
    292e:	82 e0       	ldi	r24, 0x02	; 2
    2930:	64 e0       	ldi	r22, 0x04	; 4
    2932:	41 e0       	ldi	r20, 0x01	; 1
    2934:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    2938:	88 2f       	mov	r24, r24
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	a0 e0       	ldi	r26, 0x00	; 0
    293e:	b0 e0       	ldi	r27, 0x00	; 0
    2940:	9c 01       	movw	r18, r24
    2942:	ad 01       	movw	r20, r26
    2944:	01 2e       	mov	r0, r17
    2946:	1c e0       	ldi	r17, 0x0C	; 12
    2948:	22 0f       	add	r18, r18
    294a:	33 1f       	adc	r19, r19
    294c:	44 1f       	adc	r20, r20
    294e:	55 1f       	adc	r21, r21
    2950:	1a 95       	dec	r17
    2952:	d1 f7       	brne	.-12     	; 0x2948 <Seven_Segment_enuInit+0x122>
    2954:	10 2d       	mov	r17, r0
    2956:	8a 81       	ldd	r24, Y+2	; 0x02
    2958:	9b 81       	ldd	r25, Y+3	; 0x03
    295a:	ac 81       	ldd	r26, Y+4	; 0x04
    295c:	bd 81       	ldd	r27, Y+5	; 0x05
    295e:	82 2b       	or	r24, r18
    2960:	93 2b       	or	r25, r19
    2962:	a4 2b       	or	r26, r20
    2964:	b5 2b       	or	r27, r21
    2966:	8a 83       	std	Y+2, r24	; 0x02
    2968:	9b 83       	std	Y+3, r25	; 0x03
    296a:	ac 83       	std	Y+4, r26	; 0x04
    296c:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= ((u32)DIO_enuSetPinDirection(SEG_FPORT, SEG_FPIN, DIO_u8OUTPUT) << 15);
    296e:	82 e0       	ldi	r24, 0x02	; 2
    2970:	65 e0       	ldi	r22, 0x05	; 5
    2972:	41 e0       	ldi	r20, 0x01	; 1
    2974:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    2978:	88 2f       	mov	r24, r24
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	a0 e0       	ldi	r26, 0x00	; 0
    297e:	b0 e0       	ldi	r27, 0x00	; 0
    2980:	9c 01       	movw	r18, r24
    2982:	ad 01       	movw	r20, r26
    2984:	01 2e       	mov	r0, r17
    2986:	1f e0       	ldi	r17, 0x0F	; 15
    2988:	22 0f       	add	r18, r18
    298a:	33 1f       	adc	r19, r19
    298c:	44 1f       	adc	r20, r20
    298e:	55 1f       	adc	r21, r21
    2990:	1a 95       	dec	r17
    2992:	d1 f7       	brne	.-12     	; 0x2988 <Seven_Segment_enuInit+0x162>
    2994:	10 2d       	mov	r17, r0
    2996:	8a 81       	ldd	r24, Y+2	; 0x02
    2998:	9b 81       	ldd	r25, Y+3	; 0x03
    299a:	ac 81       	ldd	r26, Y+4	; 0x04
    299c:	bd 81       	ldd	r27, Y+5	; 0x05
    299e:	82 2b       	or	r24, r18
    29a0:	93 2b       	or	r25, r19
    29a2:	a4 2b       	or	r26, r20
    29a4:	b5 2b       	or	r27, r21
    29a6:	8a 83       	std	Y+2, r24	; 0x02
    29a8:	9b 83       	std	Y+3, r25	; 0x03
    29aa:	ac 83       	std	Y+4, r26	; 0x04
    29ac:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= ((u32)DIO_enuSetPinDirection(SEG_GPORT, SEG_GPIN, DIO_u8OUTPUT) << 18);
    29ae:	82 e0       	ldi	r24, 0x02	; 2
    29b0:	66 e0       	ldi	r22, 0x06	; 6
    29b2:	41 e0       	ldi	r20, 0x01	; 1
    29b4:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    29b8:	88 2f       	mov	r24, r24
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	a0 e0       	ldi	r26, 0x00	; 0
    29be:	b0 e0       	ldi	r27, 0x00	; 0
    29c0:	9c 01       	movw	r18, r24
    29c2:	ad 01       	movw	r20, r26
    29c4:	01 2e       	mov	r0, r17
    29c6:	12 e1       	ldi	r17, 0x12	; 18
    29c8:	22 0f       	add	r18, r18
    29ca:	33 1f       	adc	r19, r19
    29cc:	44 1f       	adc	r20, r20
    29ce:	55 1f       	adc	r21, r21
    29d0:	1a 95       	dec	r17
    29d2:	d1 f7       	brne	.-12     	; 0x29c8 <Seven_Segment_enuInit+0x1a2>
    29d4:	10 2d       	mov	r17, r0
    29d6:	8a 81       	ldd	r24, Y+2	; 0x02
    29d8:	9b 81       	ldd	r25, Y+3	; 0x03
    29da:	ac 81       	ldd	r26, Y+4	; 0x04
    29dc:	bd 81       	ldd	r27, Y+5	; 0x05
    29de:	82 2b       	or	r24, r18
    29e0:	93 2b       	or	r25, r19
    29e2:	a4 2b       	or	r26, r20
    29e4:	b5 2b       	or	r27, r21
    29e6:	8a 83       	std	Y+2, r24	; 0x02
    29e8:	9b 83       	std	Y+3, r25	; 0x03
    29ea:	ac 83       	std	Y+4, r26	; 0x04
    29ec:	bd 83       	std	Y+5, r27	; 0x05
#error "Your Dot Pin has a wrong Selection"
#endif


	u8 Local_u8Iterator;
	for(Local_u8Iterator = 0; Local_u8Iterator < BITS_NUM * SEG_PINS_NUM ; Local_u8Iterator += BITS_NUM)
    29ee:	19 82       	std	Y+1, r1	; 0x01
    29f0:	1d c0       	rjmp	.+58     	; 0x2a2c <Seven_Segment_enuInit+0x206>
	{
		if(((Local_u32Check >> Local_u8Iterator) & 0x00000007) != ES_OK)
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
    29f4:	28 2f       	mov	r18, r24
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	8a 81       	ldd	r24, Y+2	; 0x02
    29fa:	9b 81       	ldd	r25, Y+3	; 0x03
    29fc:	ac 81       	ldd	r26, Y+4	; 0x04
    29fe:	bd 81       	ldd	r27, Y+5	; 0x05
    2a00:	02 2e       	mov	r0, r18
    2a02:	04 c0       	rjmp	.+8      	; 0x2a0c <Seven_Segment_enuInit+0x1e6>
    2a04:	b6 95       	lsr	r27
    2a06:	a7 95       	ror	r26
    2a08:	97 95       	ror	r25
    2a0a:	87 95       	ror	r24
    2a0c:	0a 94       	dec	r0
    2a0e:	d2 f7       	brpl	.-12     	; 0x2a04 <Seven_Segment_enuInit+0x1de>
    2a10:	87 70       	andi	r24, 0x07	; 7
    2a12:	90 70       	andi	r25, 0x00	; 0
    2a14:	a0 70       	andi	r26, 0x00	; 0
    2a16:	b0 70       	andi	r27, 0x00	; 0
    2a18:	00 97       	sbiw	r24, 0x00	; 0
    2a1a:	a1 05       	cpc	r26, r1
    2a1c:	b1 05       	cpc	r27, r1
    2a1e:	19 f0       	breq	.+6      	; 0x2a26 <Seven_Segment_enuInit+0x200>
		{
			return ES_NOK;
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	8f 83       	std	Y+7, r24	; 0x07
    2a24:	09 c0       	rjmp	.+18     	; 0x2a38 <Seven_Segment_enuInit+0x212>
#error "Your Dot Pin has a wrong Selection"
#endif


	u8 Local_u8Iterator;
	for(Local_u8Iterator = 0; Local_u8Iterator < BITS_NUM * SEG_PINS_NUM ; Local_u8Iterator += BITS_NUM)
    2a26:	89 81       	ldd	r24, Y+1	; 0x01
    2a28:	8d 5f       	subi	r24, 0xFD	; 253
    2a2a:	89 83       	std	Y+1, r24	; 0x01
    2a2c:	89 81       	ldd	r24, Y+1	; 0x01
    2a2e:	85 31       	cpi	r24, 0x15	; 21
    2a30:	00 f3       	brcs	.-64     	; 0x29f2 <Seven_Segment_enuInit+0x1cc>
		{
			return ES_NOK;
		}
	}

	Local_ErrorState = ES_OK;
    2a32:	1e 82       	std	Y+6, r1	; 0x06
	return Local_ErrorState;
    2a34:	8e 81       	ldd	r24, Y+6	; 0x06
    2a36:	8f 83       	std	Y+7, r24	; 0x07
    2a38:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2a3a:	27 96       	adiw	r28, 0x07	; 7
    2a3c:	0f b6       	in	r0, 0x3f	; 63
    2a3e:	f8 94       	cli
    2a40:	de bf       	out	0x3e, r29	; 62
    2a42:	0f be       	out	0x3f, r0	; 63
    2a44:	cd bf       	out	0x3d, r28	; 61
    2a46:	cf 91       	pop	r28
    2a48:	df 91       	pop	r29
    2a4a:	08 95       	ret

00002a4c <Seven_Segment_enuDisplayNum>:

ES_t Seven_Segment_enuDisplayNum(u8 Copy_u8DisplyedNum)
{
    2a4c:	df 93       	push	r29
    2a4e:	cf 93       	push	r28
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
    2a54:	28 97       	sbiw	r28, 0x08	; 8
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	f8 94       	cli
    2a5a:	de bf       	out	0x3e, r29	; 62
    2a5c:	0f be       	out	0x3f, r0	; 63
    2a5e:	cd bf       	out	0x3d, r28	; 61
    2a60:	8f 83       	std	Y+7, r24	; 0x07
	ES_t Local_ErrorState = ES_NOK;
    2a62:	81 e0       	ldi	r24, 0x01	; 1
    2a64:	8e 83       	std	Y+6, r24	; 0x06

	if(Copy_u8DisplyedNum < 10)
    2a66:	8f 81       	ldd	r24, Y+7	; 0x07
    2a68:	8a 30       	cpi	r24, 0x0A	; 10
    2a6a:	08 f0       	brcs	.+2      	; 0x2a6e <Seven_Segment_enuDisplayNum+0x22>
    2a6c:	49 c1       	rjmp	.+658    	; 0x2d00 <Seven_Segment_enuDisplayNum+0x2b4>
	{
		u32 Local_u32Check = 0;
    2a6e:	1a 82       	std	Y+2, r1	; 0x02
    2a70:	1b 82       	std	Y+3, r1	; 0x03
    2a72:	1c 82       	std	Y+4, r1	; 0x04
    2a74:	1d 82       	std	Y+5, r1	; 0x05

#if SEG_TYPE == COMMON_CTHODE
		Local_u32Check |= (DIO_enuSetPinValue(SEG_APORT, SEG_APIN, (Seven_Segment_Au8DisplayedNumbers[Copy_u8DisplyedNum]>>SEG_A_PIN)&1)<<0);
    2a76:	8f 81       	ldd	r24, Y+7	; 0x07
    2a78:	88 2f       	mov	r24, r24
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	fc 01       	movw	r30, r24
    2a7e:	ef 58       	subi	r30, 0x8F	; 143
    2a80:	fe 4f       	sbci	r31, 0xFE	; 254
    2a82:	80 81       	ld	r24, Z
    2a84:	98 2f       	mov	r25, r24
    2a86:	91 70       	andi	r25, 0x01	; 1
    2a88:	82 e0       	ldi	r24, 0x02	; 2
    2a8a:	60 e0       	ldi	r22, 0x00	; 0
    2a8c:	49 2f       	mov	r20, r25
    2a8e:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    2a92:	28 2f       	mov	r18, r24
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	40 e0       	ldi	r20, 0x00	; 0
    2a98:	50 e0       	ldi	r21, 0x00	; 0
    2a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a9e:	ac 81       	ldd	r26, Y+4	; 0x04
    2aa0:	bd 81       	ldd	r27, Y+5	; 0x05
    2aa2:	82 2b       	or	r24, r18
    2aa4:	93 2b       	or	r25, r19
    2aa6:	a4 2b       	or	r26, r20
    2aa8:	b5 2b       	or	r27, r21
    2aaa:	8a 83       	std	Y+2, r24	; 0x02
    2aac:	9b 83       	std	Y+3, r25	; 0x03
    2aae:	ac 83       	std	Y+4, r26	; 0x04
    2ab0:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (DIO_enuSetPinValue(SEG_BPORT, SEG_BPIN, (Seven_Segment_Au8DisplayedNumbers[Copy_u8DisplyedNum]>>SEG_B_PIN)&1)<<3);
    2ab2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ab4:	88 2f       	mov	r24, r24
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	fc 01       	movw	r30, r24
    2aba:	ef 58       	subi	r30, 0x8F	; 143
    2abc:	fe 4f       	sbci	r31, 0xFE	; 254
    2abe:	80 81       	ld	r24, Z
    2ac0:	86 95       	lsr	r24
    2ac2:	98 2f       	mov	r25, r24
    2ac4:	91 70       	andi	r25, 0x01	; 1
    2ac6:	82 e0       	ldi	r24, 0x02	; 2
    2ac8:	61 e0       	ldi	r22, 0x01	; 1
    2aca:	49 2f       	mov	r20, r25
    2acc:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    2ad0:	88 2f       	mov	r24, r24
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	88 0f       	add	r24, r24
    2ad6:	99 1f       	adc	r25, r25
    2ad8:	88 0f       	add	r24, r24
    2ada:	99 1f       	adc	r25, r25
    2adc:	88 0f       	add	r24, r24
    2ade:	99 1f       	adc	r25, r25
    2ae0:	9c 01       	movw	r18, r24
    2ae2:	44 27       	eor	r20, r20
    2ae4:	37 fd       	sbrc	r19, 7
    2ae6:	40 95       	com	r20
    2ae8:	54 2f       	mov	r21, r20
    2aea:	8a 81       	ldd	r24, Y+2	; 0x02
    2aec:	9b 81       	ldd	r25, Y+3	; 0x03
    2aee:	ac 81       	ldd	r26, Y+4	; 0x04
    2af0:	bd 81       	ldd	r27, Y+5	; 0x05
    2af2:	82 2b       	or	r24, r18
    2af4:	93 2b       	or	r25, r19
    2af6:	a4 2b       	or	r26, r20
    2af8:	b5 2b       	or	r27, r21
    2afa:	8a 83       	std	Y+2, r24	; 0x02
    2afc:	9b 83       	std	Y+3, r25	; 0x03
    2afe:	ac 83       	std	Y+4, r26	; 0x04
    2b00:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (DIO_enuSetPinValue(SEG_CPORT, SEG_CPIN, (Seven_Segment_Au8DisplayedNumbers[Copy_u8DisplyedNum]>>SEG_C_PIN)&1)<<6);
    2b02:	8f 81       	ldd	r24, Y+7	; 0x07
    2b04:	88 2f       	mov	r24, r24
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	fc 01       	movw	r30, r24
    2b0a:	ef 58       	subi	r30, 0x8F	; 143
    2b0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b0e:	80 81       	ld	r24, Z
    2b10:	86 95       	lsr	r24
    2b12:	86 95       	lsr	r24
    2b14:	98 2f       	mov	r25, r24
    2b16:	91 70       	andi	r25, 0x01	; 1
    2b18:	82 e0       	ldi	r24, 0x02	; 2
    2b1a:	62 e0       	ldi	r22, 0x02	; 2
    2b1c:	49 2f       	mov	r20, r25
    2b1e:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    2b22:	88 2f       	mov	r24, r24
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	00 24       	eor	r0, r0
    2b28:	96 95       	lsr	r25
    2b2a:	87 95       	ror	r24
    2b2c:	07 94       	ror	r0
    2b2e:	96 95       	lsr	r25
    2b30:	87 95       	ror	r24
    2b32:	07 94       	ror	r0
    2b34:	98 2f       	mov	r25, r24
    2b36:	80 2d       	mov	r24, r0
    2b38:	9c 01       	movw	r18, r24
    2b3a:	44 27       	eor	r20, r20
    2b3c:	37 fd       	sbrc	r19, 7
    2b3e:	40 95       	com	r20
    2b40:	54 2f       	mov	r21, r20
    2b42:	8a 81       	ldd	r24, Y+2	; 0x02
    2b44:	9b 81       	ldd	r25, Y+3	; 0x03
    2b46:	ac 81       	ldd	r26, Y+4	; 0x04
    2b48:	bd 81       	ldd	r27, Y+5	; 0x05
    2b4a:	82 2b       	or	r24, r18
    2b4c:	93 2b       	or	r25, r19
    2b4e:	a4 2b       	or	r26, r20
    2b50:	b5 2b       	or	r27, r21
    2b52:	8a 83       	std	Y+2, r24	; 0x02
    2b54:	9b 83       	std	Y+3, r25	; 0x03
    2b56:	ac 83       	std	Y+4, r26	; 0x04
    2b58:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= ((u32)DIO_enuSetPinValue(SEG_DPORT, SEG_DPIN, (Seven_Segment_Au8DisplayedNumbers[Copy_u8DisplyedNum]>>SEG_D_PIN)&1)<<9);
    2b5a:	8f 81       	ldd	r24, Y+7	; 0x07
    2b5c:	88 2f       	mov	r24, r24
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	fc 01       	movw	r30, r24
    2b62:	ef 58       	subi	r30, 0x8F	; 143
    2b64:	fe 4f       	sbci	r31, 0xFE	; 254
    2b66:	80 81       	ld	r24, Z
    2b68:	86 95       	lsr	r24
    2b6a:	86 95       	lsr	r24
    2b6c:	86 95       	lsr	r24
    2b6e:	98 2f       	mov	r25, r24
    2b70:	91 70       	andi	r25, 0x01	; 1
    2b72:	82 e0       	ldi	r24, 0x02	; 2
    2b74:	63 e0       	ldi	r22, 0x03	; 3
    2b76:	49 2f       	mov	r20, r25
    2b78:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    2b7c:	88 2f       	mov	r24, r24
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	a0 e0       	ldi	r26, 0x00	; 0
    2b82:	b0 e0       	ldi	r27, 0x00	; 0
    2b84:	9c 01       	movw	r18, r24
    2b86:	ad 01       	movw	r20, r26
    2b88:	01 2e       	mov	r0, r17
    2b8a:	19 e0       	ldi	r17, 0x09	; 9
    2b8c:	22 0f       	add	r18, r18
    2b8e:	33 1f       	adc	r19, r19
    2b90:	44 1f       	adc	r20, r20
    2b92:	55 1f       	adc	r21, r21
    2b94:	1a 95       	dec	r17
    2b96:	d1 f7       	brne	.-12     	; 0x2b8c <Seven_Segment_enuDisplayNum+0x140>
    2b98:	10 2d       	mov	r17, r0
    2b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b9e:	ac 81       	ldd	r26, Y+4	; 0x04
    2ba0:	bd 81       	ldd	r27, Y+5	; 0x05
    2ba2:	82 2b       	or	r24, r18
    2ba4:	93 2b       	or	r25, r19
    2ba6:	a4 2b       	or	r26, r20
    2ba8:	b5 2b       	or	r27, r21
    2baa:	8a 83       	std	Y+2, r24	; 0x02
    2bac:	9b 83       	std	Y+3, r25	; 0x03
    2bae:	ac 83       	std	Y+4, r26	; 0x04
    2bb0:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= ((u32)DIO_enuSetPinValue(SEG_EPORT, SEG_EPIN, (Seven_Segment_Au8DisplayedNumbers[Copy_u8DisplyedNum]>>SEG_E_PIN)&1)<<12);
    2bb2:	8f 81       	ldd	r24, Y+7	; 0x07
    2bb4:	88 2f       	mov	r24, r24
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	fc 01       	movw	r30, r24
    2bba:	ef 58       	subi	r30, 0x8F	; 143
    2bbc:	fe 4f       	sbci	r31, 0xFE	; 254
    2bbe:	80 81       	ld	r24, Z
    2bc0:	82 95       	swap	r24
    2bc2:	8f 70       	andi	r24, 0x0F	; 15
    2bc4:	98 2f       	mov	r25, r24
    2bc6:	91 70       	andi	r25, 0x01	; 1
    2bc8:	82 e0       	ldi	r24, 0x02	; 2
    2bca:	64 e0       	ldi	r22, 0x04	; 4
    2bcc:	49 2f       	mov	r20, r25
    2bce:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    2bd2:	88 2f       	mov	r24, r24
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	a0 e0       	ldi	r26, 0x00	; 0
    2bd8:	b0 e0       	ldi	r27, 0x00	; 0
    2bda:	9c 01       	movw	r18, r24
    2bdc:	ad 01       	movw	r20, r26
    2bde:	01 2e       	mov	r0, r17
    2be0:	1c e0       	ldi	r17, 0x0C	; 12
    2be2:	22 0f       	add	r18, r18
    2be4:	33 1f       	adc	r19, r19
    2be6:	44 1f       	adc	r20, r20
    2be8:	55 1f       	adc	r21, r21
    2bea:	1a 95       	dec	r17
    2bec:	d1 f7       	brne	.-12     	; 0x2be2 <Seven_Segment_enuDisplayNum+0x196>
    2bee:	10 2d       	mov	r17, r0
    2bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf2:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf4:	ac 81       	ldd	r26, Y+4	; 0x04
    2bf6:	bd 81       	ldd	r27, Y+5	; 0x05
    2bf8:	82 2b       	or	r24, r18
    2bfa:	93 2b       	or	r25, r19
    2bfc:	a4 2b       	or	r26, r20
    2bfe:	b5 2b       	or	r27, r21
    2c00:	8a 83       	std	Y+2, r24	; 0x02
    2c02:	9b 83       	std	Y+3, r25	; 0x03
    2c04:	ac 83       	std	Y+4, r26	; 0x04
    2c06:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= ((u32)DIO_enuSetPinValue(SEG_FPORT, SEG_FPIN, (Seven_Segment_Au8DisplayedNumbers[Copy_u8DisplyedNum]>>SEG_F_PIN)&1)<<15);
    2c08:	8f 81       	ldd	r24, Y+7	; 0x07
    2c0a:	88 2f       	mov	r24, r24
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	fc 01       	movw	r30, r24
    2c10:	ef 58       	subi	r30, 0x8F	; 143
    2c12:	fe 4f       	sbci	r31, 0xFE	; 254
    2c14:	80 81       	ld	r24, Z
    2c16:	82 95       	swap	r24
    2c18:	86 95       	lsr	r24
    2c1a:	87 70       	andi	r24, 0x07	; 7
    2c1c:	98 2f       	mov	r25, r24
    2c1e:	91 70       	andi	r25, 0x01	; 1
    2c20:	82 e0       	ldi	r24, 0x02	; 2
    2c22:	65 e0       	ldi	r22, 0x05	; 5
    2c24:	49 2f       	mov	r20, r25
    2c26:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    2c2a:	88 2f       	mov	r24, r24
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	a0 e0       	ldi	r26, 0x00	; 0
    2c30:	b0 e0       	ldi	r27, 0x00	; 0
    2c32:	9c 01       	movw	r18, r24
    2c34:	ad 01       	movw	r20, r26
    2c36:	01 2e       	mov	r0, r17
    2c38:	1f e0       	ldi	r17, 0x0F	; 15
    2c3a:	22 0f       	add	r18, r18
    2c3c:	33 1f       	adc	r19, r19
    2c3e:	44 1f       	adc	r20, r20
    2c40:	55 1f       	adc	r21, r21
    2c42:	1a 95       	dec	r17
    2c44:	d1 f7       	brne	.-12     	; 0x2c3a <Seven_Segment_enuDisplayNum+0x1ee>
    2c46:	10 2d       	mov	r17, r0
    2c48:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c4c:	ac 81       	ldd	r26, Y+4	; 0x04
    2c4e:	bd 81       	ldd	r27, Y+5	; 0x05
    2c50:	82 2b       	or	r24, r18
    2c52:	93 2b       	or	r25, r19
    2c54:	a4 2b       	or	r26, r20
    2c56:	b5 2b       	or	r27, r21
    2c58:	8a 83       	std	Y+2, r24	; 0x02
    2c5a:	9b 83       	std	Y+3, r25	; 0x03
    2c5c:	ac 83       	std	Y+4, r26	; 0x04
    2c5e:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= ((u32)DIO_enuSetPinValue(SEG_GPORT, SEG_GPIN, (Seven_Segment_Au8DisplayedNumbers[Copy_u8DisplyedNum]>>SEG_G_PIN)&1)<<18);
    2c60:	8f 81       	ldd	r24, Y+7	; 0x07
    2c62:	88 2f       	mov	r24, r24
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	fc 01       	movw	r30, r24
    2c68:	ef 58       	subi	r30, 0x8F	; 143
    2c6a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c6c:	80 81       	ld	r24, Z
    2c6e:	82 95       	swap	r24
    2c70:	86 95       	lsr	r24
    2c72:	86 95       	lsr	r24
    2c74:	83 70       	andi	r24, 0x03	; 3
    2c76:	98 2f       	mov	r25, r24
    2c78:	91 70       	andi	r25, 0x01	; 1
    2c7a:	82 e0       	ldi	r24, 0x02	; 2
    2c7c:	66 e0       	ldi	r22, 0x06	; 6
    2c7e:	49 2f       	mov	r20, r25
    2c80:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    2c84:	88 2f       	mov	r24, r24
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	a0 e0       	ldi	r26, 0x00	; 0
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	9c 01       	movw	r18, r24
    2c8e:	ad 01       	movw	r20, r26
    2c90:	01 2e       	mov	r0, r17
    2c92:	12 e1       	ldi	r17, 0x12	; 18
    2c94:	22 0f       	add	r18, r18
    2c96:	33 1f       	adc	r19, r19
    2c98:	44 1f       	adc	r20, r20
    2c9a:	55 1f       	adc	r21, r21
    2c9c:	1a 95       	dec	r17
    2c9e:	d1 f7       	brne	.-12     	; 0x2c94 <Seven_Segment_enuDisplayNum+0x248>
    2ca0:	10 2d       	mov	r17, r0
    2ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca6:	ac 81       	ldd	r26, Y+4	; 0x04
    2ca8:	bd 81       	ldd	r27, Y+5	; 0x05
    2caa:	82 2b       	or	r24, r18
    2cac:	93 2b       	or	r25, r19
    2cae:	a4 2b       	or	r26, r20
    2cb0:	b5 2b       	or	r27, r21
    2cb2:	8a 83       	std	Y+2, r24	; 0x02
    2cb4:	9b 83       	std	Y+3, r25	; 0x03
    2cb6:	ac 83       	std	Y+4, r26	; 0x04
    2cb8:	bd 83       	std	Y+5, r27	; 0x05
#else
#error "Your Seven_Segment Type has wrong Selection"
#endif

		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < BITS_NUM * SEG_PINS_NUM ; Local_u8Iterator += BITS_NUM)
    2cba:	19 82       	std	Y+1, r1	; 0x01
    2cbc:	1d c0       	rjmp	.+58     	; 0x2cf8 <Seven_Segment_enuDisplayNum+0x2ac>
		{
			if(((Local_u32Check >> Local_u8Iterator) & 7) != ES_OK)
    2cbe:	89 81       	ldd	r24, Y+1	; 0x01
    2cc0:	28 2f       	mov	r18, r24
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc8:	ac 81       	ldd	r26, Y+4	; 0x04
    2cca:	bd 81       	ldd	r27, Y+5	; 0x05
    2ccc:	02 2e       	mov	r0, r18
    2cce:	04 c0       	rjmp	.+8      	; 0x2cd8 <Seven_Segment_enuDisplayNum+0x28c>
    2cd0:	b6 95       	lsr	r27
    2cd2:	a7 95       	ror	r26
    2cd4:	97 95       	ror	r25
    2cd6:	87 95       	ror	r24
    2cd8:	0a 94       	dec	r0
    2cda:	d2 f7       	brpl	.-12     	; 0x2cd0 <Seven_Segment_enuDisplayNum+0x284>
    2cdc:	87 70       	andi	r24, 0x07	; 7
    2cde:	90 70       	andi	r25, 0x00	; 0
    2ce0:	a0 70       	andi	r26, 0x00	; 0
    2ce2:	b0 70       	andi	r27, 0x00	; 0
    2ce4:	00 97       	sbiw	r24, 0x00	; 0
    2ce6:	a1 05       	cpc	r26, r1
    2ce8:	b1 05       	cpc	r27, r1
    2cea:	19 f0       	breq	.+6      	; 0x2cf2 <Seven_Segment_enuDisplayNum+0x2a6>
			{
				return ES_NOK;
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	88 87       	std	Y+8, r24	; 0x08
    2cf0:	0c c0       	rjmp	.+24     	; 0x2d0a <Seven_Segment_enuDisplayNum+0x2be>
#else
#error "Your Seven_Segment Type has wrong Selection"
#endif

		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < BITS_NUM * SEG_PINS_NUM ; Local_u8Iterator += BITS_NUM)
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	8d 5f       	subi	r24, 0xFD	; 253
    2cf6:	89 83       	std	Y+1, r24	; 0x01
    2cf8:	89 81       	ldd	r24, Y+1	; 0x01
    2cfa:	85 31       	cpi	r24, 0x15	; 21
    2cfc:	00 f3       	brcs	.-64     	; 0x2cbe <Seven_Segment_enuDisplayNum+0x272>
    2cfe:	02 c0       	rjmp	.+4      	; 0x2d04 <Seven_Segment_enuDisplayNum+0x2b8>
			}
		}
	}
	else
	{
		Local_ErrorState = ES_OUT_OF_RANGE;
    2d00:	83 e0       	ldi	r24, 0x03	; 3
    2d02:	8e 83       	std	Y+6, r24	; 0x06
	}
	Local_ErrorState = ES_OK;
    2d04:	1e 82       	std	Y+6, r1	; 0x06
	return Local_ErrorState;
    2d06:	8e 81       	ldd	r24, Y+6	; 0x06
    2d08:	88 87       	std	Y+8, r24	; 0x08
    2d0a:	88 85       	ldd	r24, Y+8	; 0x08
}
    2d0c:	28 96       	adiw	r28, 0x08	; 8
    2d0e:	0f b6       	in	r0, 0x3f	; 63
    2d10:	f8 94       	cli
    2d12:	de bf       	out	0x3e, r29	; 62
    2d14:	0f be       	out	0x3f, r0	; 63
    2d16:	cd bf       	out	0x3d, r28	; 61
    2d18:	cf 91       	pop	r28
    2d1a:	df 91       	pop	r29
    2d1c:	08 95       	ret

00002d1e <Seven_Segment_enuEnableCommon>:

ES_t Seven_Segment_enuEnableCommon(void)
{
    2d1e:	df 93       	push	r29
    2d20:	cf 93       	push	r28
    2d22:	0f 92       	push	r0
    2d24:	cd b7       	in	r28, 0x3d	; 61
    2d26:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_ErrorState = ES_NOK;
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	89 83       	std	Y+1, r24	; 0x01

#else
#error "Your Common Pin has a wrong Selection"
#endif

	Local_ErrorState = ES_OK;
    2d2c:	19 82       	std	Y+1, r1	; 0x01
	return Local_ErrorState;
    2d2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d30:	0f 90       	pop	r0
    2d32:	cf 91       	pop	r28
    2d34:	df 91       	pop	r29
    2d36:	08 95       	ret

00002d38 <Seven_Segment_enuDisableCommon>:

ES_t Seven_Segment_enuDisableCommon(void)
{
    2d38:	df 93       	push	r29
    2d3a:	cf 93       	push	r28
    2d3c:	0f 92       	push	r0
    2d3e:	cd b7       	in	r28, 0x3d	; 61
    2d40:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_ErrorState = ES_NOK;
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	89 83       	std	Y+1, r24	; 0x01

#else
#error "Your Common Pin has a wrong Selection"
#endif

	Local_ErrorState = ES_OK;
    2d46:	19 82       	std	Y+1, r1	; 0x01
	return Local_ErrorState;
    2d48:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d4a:	0f 90       	pop	r0
    2d4c:	cf 91       	pop	r28
    2d4e:	df 91       	pop	r29
    2d50:	08 95       	ret

00002d52 <Seven_Segment_enuEnableDot>:

ES_t Seven_Segment_enuEnableDot(void)
{
    2d52:	df 93       	push	r29
    2d54:	cf 93       	push	r28
    2d56:	0f 92       	push	r0
    2d58:	cd b7       	in	r28, 0x3d	; 61
    2d5a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_ErrorState = ES_NOK;
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	89 83       	std	Y+1, r24	; 0x01

#else
#error "Your Dot Pin has a wrong Selection"
#endif

	Local_ErrorState = ES_OK;
    2d60:	19 82       	std	Y+1, r1	; 0x01
	return Local_ErrorState;
    2d62:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d64:	0f 90       	pop	r0
    2d66:	cf 91       	pop	r28
    2d68:	df 91       	pop	r29
    2d6a:	08 95       	ret

00002d6c <Seven_Segment_enuDisableDot>:

ES_t Seven_Segment_enuDisableDot(void)
{
    2d6c:	df 93       	push	r29
    2d6e:	cf 93       	push	r28
    2d70:	0f 92       	push	r0
    2d72:	cd b7       	in	r28, 0x3d	; 61
    2d74:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_ErrorState = ES_NOK;
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	89 83       	std	Y+1, r24	; 0x01

#else
#error "Your Dot Pin has a wrong Selection"
#endif

	Local_ErrorState = ES_OK;
    2d7a:	19 82       	std	Y+1, r1	; 0x01
	return Local_ErrorState;
    2d7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d7e:	0f 90       	pop	r0
    2d80:	cf 91       	pop	r28
    2d82:	df 91       	pop	r29
    2d84:	08 95       	ret

00002d86 <Seven_Segment_enuClear>:

ES_t Seven_Segment_enuClear(void)
{
    2d86:	df 93       	push	r29
    2d88:	cf 93       	push	r28
    2d8a:	cd b7       	in	r28, 0x3d	; 61
    2d8c:	de b7       	in	r29, 0x3e	; 62
    2d8e:	27 97       	sbiw	r28, 0x07	; 7
    2d90:	0f b6       	in	r0, 0x3f	; 63
    2d92:	f8 94       	cli
    2d94:	de bf       	out	0x3e, r29	; 62
    2d96:	0f be       	out	0x3f, r0	; 63
    2d98:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_ErrorState = ES_NOK;
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	8e 83       	std	Y+6, r24	; 0x06

	u32 Local_u32Check = 0;
    2d9e:	1a 82       	std	Y+2, r1	; 0x02
    2da0:	1b 82       	std	Y+3, r1	; 0x03
    2da2:	1c 82       	std	Y+4, r1	; 0x04
    2da4:	1d 82       	std	Y+5, r1	; 0x05

#if SEG_TYPE == COMMON_CTHODE
	Local_u32Check |= (DIO_enuSetPinValue(SEG_APORT, SEG_APIN, DIO_u8LOW)<<0);
    2da6:	82 e0       	ldi	r24, 0x02	; 2
    2da8:	60 e0       	ldi	r22, 0x00	; 0
    2daa:	40 e0       	ldi	r20, 0x00	; 0
    2dac:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    2db0:	28 2f       	mov	r18, r24
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	40 e0       	ldi	r20, 0x00	; 0
    2db6:	50 e0       	ldi	r21, 0x00	; 0
    2db8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dba:	9b 81       	ldd	r25, Y+3	; 0x03
    2dbc:	ac 81       	ldd	r26, Y+4	; 0x04
    2dbe:	bd 81       	ldd	r27, Y+5	; 0x05
    2dc0:	82 2b       	or	r24, r18
    2dc2:	93 2b       	or	r25, r19
    2dc4:	a4 2b       	or	r26, r20
    2dc6:	b5 2b       	or	r27, r21
    2dc8:	8a 83       	std	Y+2, r24	; 0x02
    2dca:	9b 83       	std	Y+3, r25	; 0x03
    2dcc:	ac 83       	std	Y+4, r26	; 0x04
    2dce:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (DIO_enuSetPinValue(SEG_BPORT, SEG_BPIN, DIO_u8LOW)<<3);
    2dd0:	82 e0       	ldi	r24, 0x02	; 2
    2dd2:	61 e0       	ldi	r22, 0x01	; 1
    2dd4:	40 e0       	ldi	r20, 0x00	; 0
    2dd6:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    2dda:	88 2f       	mov	r24, r24
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	88 0f       	add	r24, r24
    2de0:	99 1f       	adc	r25, r25
    2de2:	88 0f       	add	r24, r24
    2de4:	99 1f       	adc	r25, r25
    2de6:	88 0f       	add	r24, r24
    2de8:	99 1f       	adc	r25, r25
    2dea:	9c 01       	movw	r18, r24
    2dec:	44 27       	eor	r20, r20
    2dee:	37 fd       	sbrc	r19, 7
    2df0:	40 95       	com	r20
    2df2:	54 2f       	mov	r21, r20
    2df4:	8a 81       	ldd	r24, Y+2	; 0x02
    2df6:	9b 81       	ldd	r25, Y+3	; 0x03
    2df8:	ac 81       	ldd	r26, Y+4	; 0x04
    2dfa:	bd 81       	ldd	r27, Y+5	; 0x05
    2dfc:	82 2b       	or	r24, r18
    2dfe:	93 2b       	or	r25, r19
    2e00:	a4 2b       	or	r26, r20
    2e02:	b5 2b       	or	r27, r21
    2e04:	8a 83       	std	Y+2, r24	; 0x02
    2e06:	9b 83       	std	Y+3, r25	; 0x03
    2e08:	ac 83       	std	Y+4, r26	; 0x04
    2e0a:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (DIO_enuSetPinValue(SEG_CPORT, SEG_CPIN, DIO_u8LOW)<<6);
    2e0c:	82 e0       	ldi	r24, 0x02	; 2
    2e0e:	62 e0       	ldi	r22, 0x02	; 2
    2e10:	40 e0       	ldi	r20, 0x00	; 0
    2e12:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    2e16:	88 2f       	mov	r24, r24
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	00 24       	eor	r0, r0
    2e1c:	96 95       	lsr	r25
    2e1e:	87 95       	ror	r24
    2e20:	07 94       	ror	r0
    2e22:	96 95       	lsr	r25
    2e24:	87 95       	ror	r24
    2e26:	07 94       	ror	r0
    2e28:	98 2f       	mov	r25, r24
    2e2a:	80 2d       	mov	r24, r0
    2e2c:	9c 01       	movw	r18, r24
    2e2e:	44 27       	eor	r20, r20
    2e30:	37 fd       	sbrc	r19, 7
    2e32:	40 95       	com	r20
    2e34:	54 2f       	mov	r21, r20
    2e36:	8a 81       	ldd	r24, Y+2	; 0x02
    2e38:	9b 81       	ldd	r25, Y+3	; 0x03
    2e3a:	ac 81       	ldd	r26, Y+4	; 0x04
    2e3c:	bd 81       	ldd	r27, Y+5	; 0x05
    2e3e:	82 2b       	or	r24, r18
    2e40:	93 2b       	or	r25, r19
    2e42:	a4 2b       	or	r26, r20
    2e44:	b5 2b       	or	r27, r21
    2e46:	8a 83       	std	Y+2, r24	; 0x02
    2e48:	9b 83       	std	Y+3, r25	; 0x03
    2e4a:	ac 83       	std	Y+4, r26	; 0x04
    2e4c:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= ((u32)DIO_enuSetPinValue(SEG_DPORT, SEG_DPIN, DIO_u8LOW)<<9);
    2e4e:	82 e0       	ldi	r24, 0x02	; 2
    2e50:	63 e0       	ldi	r22, 0x03	; 3
    2e52:	40 e0       	ldi	r20, 0x00	; 0
    2e54:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    2e58:	88 2f       	mov	r24, r24
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	a0 e0       	ldi	r26, 0x00	; 0
    2e5e:	b0 e0       	ldi	r27, 0x00	; 0
    2e60:	9c 01       	movw	r18, r24
    2e62:	ad 01       	movw	r20, r26
    2e64:	01 2e       	mov	r0, r17
    2e66:	19 e0       	ldi	r17, 0x09	; 9
    2e68:	22 0f       	add	r18, r18
    2e6a:	33 1f       	adc	r19, r19
    2e6c:	44 1f       	adc	r20, r20
    2e6e:	55 1f       	adc	r21, r21
    2e70:	1a 95       	dec	r17
    2e72:	d1 f7       	brne	.-12     	; 0x2e68 <Seven_Segment_enuClear+0xe2>
    2e74:	10 2d       	mov	r17, r0
    2e76:	8a 81       	ldd	r24, Y+2	; 0x02
    2e78:	9b 81       	ldd	r25, Y+3	; 0x03
    2e7a:	ac 81       	ldd	r26, Y+4	; 0x04
    2e7c:	bd 81       	ldd	r27, Y+5	; 0x05
    2e7e:	82 2b       	or	r24, r18
    2e80:	93 2b       	or	r25, r19
    2e82:	a4 2b       	or	r26, r20
    2e84:	b5 2b       	or	r27, r21
    2e86:	8a 83       	std	Y+2, r24	; 0x02
    2e88:	9b 83       	std	Y+3, r25	; 0x03
    2e8a:	ac 83       	std	Y+4, r26	; 0x04
    2e8c:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= ((u32)DIO_enuSetPinValue(SEG_EPORT, SEG_EPIN, DIO_u8LOW)<<12);
    2e8e:	82 e0       	ldi	r24, 0x02	; 2
    2e90:	64 e0       	ldi	r22, 0x04	; 4
    2e92:	40 e0       	ldi	r20, 0x00	; 0
    2e94:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    2e98:	88 2f       	mov	r24, r24
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	a0 e0       	ldi	r26, 0x00	; 0
    2e9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ea0:	9c 01       	movw	r18, r24
    2ea2:	ad 01       	movw	r20, r26
    2ea4:	01 2e       	mov	r0, r17
    2ea6:	1c e0       	ldi	r17, 0x0C	; 12
    2ea8:	22 0f       	add	r18, r18
    2eaa:	33 1f       	adc	r19, r19
    2eac:	44 1f       	adc	r20, r20
    2eae:	55 1f       	adc	r21, r21
    2eb0:	1a 95       	dec	r17
    2eb2:	d1 f7       	brne	.-12     	; 0x2ea8 <Seven_Segment_enuClear+0x122>
    2eb4:	10 2d       	mov	r17, r0
    2eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eba:	ac 81       	ldd	r26, Y+4	; 0x04
    2ebc:	bd 81       	ldd	r27, Y+5	; 0x05
    2ebe:	82 2b       	or	r24, r18
    2ec0:	93 2b       	or	r25, r19
    2ec2:	a4 2b       	or	r26, r20
    2ec4:	b5 2b       	or	r27, r21
    2ec6:	8a 83       	std	Y+2, r24	; 0x02
    2ec8:	9b 83       	std	Y+3, r25	; 0x03
    2eca:	ac 83       	std	Y+4, r26	; 0x04
    2ecc:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= ((u32)DIO_enuSetPinValue(SEG_FPORT, SEG_FPIN, DIO_u8LOW)<<15);
    2ece:	82 e0       	ldi	r24, 0x02	; 2
    2ed0:	65 e0       	ldi	r22, 0x05	; 5
    2ed2:	40 e0       	ldi	r20, 0x00	; 0
    2ed4:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    2ed8:	88 2f       	mov	r24, r24
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	a0 e0       	ldi	r26, 0x00	; 0
    2ede:	b0 e0       	ldi	r27, 0x00	; 0
    2ee0:	9c 01       	movw	r18, r24
    2ee2:	ad 01       	movw	r20, r26
    2ee4:	01 2e       	mov	r0, r17
    2ee6:	1f e0       	ldi	r17, 0x0F	; 15
    2ee8:	22 0f       	add	r18, r18
    2eea:	33 1f       	adc	r19, r19
    2eec:	44 1f       	adc	r20, r20
    2eee:	55 1f       	adc	r21, r21
    2ef0:	1a 95       	dec	r17
    2ef2:	d1 f7       	brne	.-12     	; 0x2ee8 <Seven_Segment_enuClear+0x162>
    2ef4:	10 2d       	mov	r17, r0
    2ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef8:	9b 81       	ldd	r25, Y+3	; 0x03
    2efa:	ac 81       	ldd	r26, Y+4	; 0x04
    2efc:	bd 81       	ldd	r27, Y+5	; 0x05
    2efe:	82 2b       	or	r24, r18
    2f00:	93 2b       	or	r25, r19
    2f02:	a4 2b       	or	r26, r20
    2f04:	b5 2b       	or	r27, r21
    2f06:	8a 83       	std	Y+2, r24	; 0x02
    2f08:	9b 83       	std	Y+3, r25	; 0x03
    2f0a:	ac 83       	std	Y+4, r26	; 0x04
    2f0c:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= ((u32)DIO_enuSetPinValue(SEG_GPORT, SEG_GPIN, DIO_u8LOW)<<18);
    2f0e:	82 e0       	ldi	r24, 0x02	; 2
    2f10:	66 e0       	ldi	r22, 0x06	; 6
    2f12:	40 e0       	ldi	r20, 0x00	; 0
    2f14:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    2f18:	88 2f       	mov	r24, r24
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	a0 e0       	ldi	r26, 0x00	; 0
    2f1e:	b0 e0       	ldi	r27, 0x00	; 0
    2f20:	9c 01       	movw	r18, r24
    2f22:	ad 01       	movw	r20, r26
    2f24:	01 2e       	mov	r0, r17
    2f26:	12 e1       	ldi	r17, 0x12	; 18
    2f28:	22 0f       	add	r18, r18
    2f2a:	33 1f       	adc	r19, r19
    2f2c:	44 1f       	adc	r20, r20
    2f2e:	55 1f       	adc	r21, r21
    2f30:	1a 95       	dec	r17
    2f32:	d1 f7       	brne	.-12     	; 0x2f28 <Seven_Segment_enuClear+0x1a2>
    2f34:	10 2d       	mov	r17, r0
    2f36:	8a 81       	ldd	r24, Y+2	; 0x02
    2f38:	9b 81       	ldd	r25, Y+3	; 0x03
    2f3a:	ac 81       	ldd	r26, Y+4	; 0x04
    2f3c:	bd 81       	ldd	r27, Y+5	; 0x05
    2f3e:	82 2b       	or	r24, r18
    2f40:	93 2b       	or	r25, r19
    2f42:	a4 2b       	or	r26, r20
    2f44:	b5 2b       	or	r27, r21
    2f46:	8a 83       	std	Y+2, r24	; 0x02
    2f48:	9b 83       	std	Y+3, r25	; 0x03
    2f4a:	ac 83       	std	Y+4, r26	; 0x04
    2f4c:	bd 83       	std	Y+5, r27	; 0x05
#else
#error "Your Seven_Segment Type has wrong Selection"
#endif

	u8 Local_u8Iterator;
	for(Local_u8Iterator = 0; Local_u8Iterator < BITS_NUM * SEG_PINS_NUM ; Local_u8Iterator += BITS_NUM)
    2f4e:	19 82       	std	Y+1, r1	; 0x01
    2f50:	1d c0       	rjmp	.+58     	; 0x2f8c <Seven_Segment_enuClear+0x206>
	{
		if(((Local_u32Check >> Local_u8Iterator) & 7) != ES_OK)
    2f52:	89 81       	ldd	r24, Y+1	; 0x01
    2f54:	28 2f       	mov	r18, r24
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f5c:	ac 81       	ldd	r26, Y+4	; 0x04
    2f5e:	bd 81       	ldd	r27, Y+5	; 0x05
    2f60:	02 2e       	mov	r0, r18
    2f62:	04 c0       	rjmp	.+8      	; 0x2f6c <Seven_Segment_enuClear+0x1e6>
    2f64:	b6 95       	lsr	r27
    2f66:	a7 95       	ror	r26
    2f68:	97 95       	ror	r25
    2f6a:	87 95       	ror	r24
    2f6c:	0a 94       	dec	r0
    2f6e:	d2 f7       	brpl	.-12     	; 0x2f64 <Seven_Segment_enuClear+0x1de>
    2f70:	87 70       	andi	r24, 0x07	; 7
    2f72:	90 70       	andi	r25, 0x00	; 0
    2f74:	a0 70       	andi	r26, 0x00	; 0
    2f76:	b0 70       	andi	r27, 0x00	; 0
    2f78:	00 97       	sbiw	r24, 0x00	; 0
    2f7a:	a1 05       	cpc	r26, r1
    2f7c:	b1 05       	cpc	r27, r1
    2f7e:	19 f0       	breq	.+6      	; 0x2f86 <Seven_Segment_enuClear+0x200>
		{
			return ES_NOK;
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	8f 83       	std	Y+7, r24	; 0x07
    2f84:	09 c0       	rjmp	.+18     	; 0x2f98 <Seven_Segment_enuClear+0x212>
#else
#error "Your Seven_Segment Type has wrong Selection"
#endif

	u8 Local_u8Iterator;
	for(Local_u8Iterator = 0; Local_u8Iterator < BITS_NUM * SEG_PINS_NUM ; Local_u8Iterator += BITS_NUM)
    2f86:	89 81       	ldd	r24, Y+1	; 0x01
    2f88:	8d 5f       	subi	r24, 0xFD	; 253
    2f8a:	89 83       	std	Y+1, r24	; 0x01
    2f8c:	89 81       	ldd	r24, Y+1	; 0x01
    2f8e:	85 31       	cpi	r24, 0x15	; 21
    2f90:	00 f3       	brcs	.-64     	; 0x2f52 <Seven_Segment_enuClear+0x1cc>

#else
#error "Your Dot Pin has a wrong Selection"
#endif

	Local_ErrorState = ES_OK;
    2f92:	1e 82       	std	Y+6, r1	; 0x06
	return Local_ErrorState;
    2f94:	8e 81       	ldd	r24, Y+6	; 0x06
    2f96:	8f 83       	std	Y+7, r24	; 0x07
    2f98:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2f9a:	27 96       	adiw	r28, 0x07	; 7
    2f9c:	0f b6       	in	r0, 0x3f	; 63
    2f9e:	f8 94       	cli
    2fa0:	de bf       	out	0x3e, r29	; 62
    2fa2:	0f be       	out	0x3f, r0	; 63
    2fa4:	cd bf       	out	0x3d, r28	; 61
    2fa6:	cf 91       	pop	r28
    2fa8:	df 91       	pop	r29
    2faa:	08 95       	ret

00002fac <LM35_u8GetTemp>:
#include "../LCD/LCD_config.h"

#include "LM35_int.h"


ES_t LM35_u8GetTemp (LM35_CONFIG * lm35, u8 * Copy_u8TempValue) {
    2fac:	ef 92       	push	r14
    2fae:	ff 92       	push	r15
    2fb0:	0f 93       	push	r16
    2fb2:	1f 93       	push	r17
    2fb4:	df 93       	push	r29
    2fb6:	cf 93       	push	r28
    2fb8:	cd b7       	in	r28, 0x3d	; 61
    2fba:	de b7       	in	r29, 0x3e	; 62
    2fbc:	2b 97       	sbiw	r28, 0x0b	; 11
    2fbe:	0f b6       	in	r0, 0x3f	; 63
    2fc0:	f8 94       	cli
    2fc2:	de bf       	out	0x3e, r29	; 62
    2fc4:	0f be       	out	0x3f, r0	; 63
    2fc6:	cd bf       	out	0x3d, r28	; 61
    2fc8:	99 87       	std	Y+9, r25	; 0x09
    2fca:	88 87       	std	Y+8, r24	; 0x08
    2fcc:	7b 87       	std	Y+11, r23	; 0x0b
    2fce:	6a 87       	std	Y+10, r22	; 0x0a

	ES_t Local_enuErrorState = ES_OK;
    2fd0:	1d 82       	std	Y+5, r1	; 0x05

	u16 Local_u16ADCResult, Local_u16AnalogValue;

	u16 Local_u8ADCReference = ( lm35->Copy_u8ADCVoltageReference ) * 1000 ;  // To Convert from ( V --> mV )
    2fd2:	e8 85       	ldd	r30, Y+8	; 0x08
    2fd4:	f9 85       	ldd	r31, Y+9	; 0x09
    2fd6:	81 81       	ldd	r24, Z+1	; 0x01
    2fd8:	28 2f       	mov	r18, r24
    2fda:	30 e0       	ldi	r19, 0x00	; 0
    2fdc:	88 ee       	ldi	r24, 0xE8	; 232
    2fde:	93 e0       	ldi	r25, 0x03	; 3
    2fe0:	ac 01       	movw	r20, r24
    2fe2:	24 9f       	mul	r18, r20
    2fe4:	c0 01       	movw	r24, r0
    2fe6:	25 9f       	mul	r18, r21
    2fe8:	90 0d       	add	r25, r0
    2fea:	34 9f       	mul	r19, r20
    2fec:	90 0d       	add	r25, r0
    2fee:	11 24       	eor	r1, r1
    2ff0:	9a 83       	std	Y+2, r25	; 0x02
    2ff2:	89 83       	std	Y+1, r24	; 0x01

	// ADC Digital Reading
	ADC_enuGetReadSync( lm35->Copy_u8LM35Channel , &Local_u16ADCResult) ;
    2ff4:	e8 85       	ldd	r30, Y+8	; 0x08
    2ff6:	f9 85       	ldd	r31, Y+9	; 0x09
    2ff8:	80 81       	ld	r24, Z
    2ffa:	9e 01       	movw	r18, r28
    2ffc:	2a 5f       	subi	r18, 0xFA	; 250
    2ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    3000:	b9 01       	movw	r22, r18
    3002:	0e 94 5f 11 	call	0x22be	; 0x22be <ADC_enuGetReadSync>

	// Check for ADC Resolution
	if ( lm35->Copy_u8ADCResolution == ADC_RESOLUTION_10_BIT ) {
    3006:	e8 85       	ldd	r30, Y+8	; 0x08
    3008:	f9 85       	ldd	r31, Y+9	; 0x09
    300a:	82 81       	ldd	r24, Z+2	; 0x02
    300c:	81 30       	cpi	r24, 0x01	; 1
    300e:	e1 f4       	brne	.+56     	; 0x3048 <LM35_u8GetTemp+0x9c>

		Local_u16AnalogValue = (u16) ( ((u32)Local_u16ADCResult * (u32)Local_u8ADCReference ) / 1024UL) ;
    3010:	8e 81       	ldd	r24, Y+6	; 0x06
    3012:	9f 81       	ldd	r25, Y+7	; 0x07
    3014:	7c 01       	movw	r14, r24
    3016:	00 e0       	ldi	r16, 0x00	; 0
    3018:	10 e0       	ldi	r17, 0x00	; 0
    301a:	89 81       	ldd	r24, Y+1	; 0x01
    301c:	9a 81       	ldd	r25, Y+2	; 0x02
    301e:	9c 01       	movw	r18, r24
    3020:	40 e0       	ldi	r20, 0x00	; 0
    3022:	50 e0       	ldi	r21, 0x00	; 0
    3024:	c8 01       	movw	r24, r16
    3026:	b7 01       	movw	r22, r14
    3028:	0e 94 41 30 	call	0x6082	; 0x6082 <__mulsi3>
    302c:	dc 01       	movw	r26, r24
    302e:	cb 01       	movw	r24, r22
    3030:	07 2e       	mov	r0, r23
    3032:	7a e0       	ldi	r23, 0x0A	; 10
    3034:	b6 95       	lsr	r27
    3036:	a7 95       	ror	r26
    3038:	97 95       	ror	r25
    303a:	87 95       	ror	r24
    303c:	7a 95       	dec	r23
    303e:	d1 f7       	brne	.-12     	; 0x3034 <LM35_u8GetTemp+0x88>
    3040:	70 2d       	mov	r23, r0
    3042:	9c 83       	std	Y+4, r25	; 0x04
    3044:	8b 83       	std	Y+3, r24	; 0x03
    3046:	1e c0       	rjmp	.+60     	; 0x3084 <LM35_u8GetTemp+0xd8>

	}
	else if ( lm35->Copy_u8ADCResolution == ADC_RESOLUTION_8_BIT ) {
    3048:	e8 85       	ldd	r30, Y+8	; 0x08
    304a:	f9 85       	ldd	r31, Y+9	; 0x09
    304c:	82 81       	ldd	r24, Z+2	; 0x02
    304e:	82 30       	cpi	r24, 0x02	; 2
    3050:	b9 f4       	brne	.+46     	; 0x3080 <LM35_u8GetTemp+0xd4>

		Local_u16AnalogValue = (u16) ( ((u32)Local_u16ADCResult * (u32)Local_u8ADCReference ) / 256UL) ;
    3052:	8e 81       	ldd	r24, Y+6	; 0x06
    3054:	9f 81       	ldd	r25, Y+7	; 0x07
    3056:	7c 01       	movw	r14, r24
    3058:	00 e0       	ldi	r16, 0x00	; 0
    305a:	10 e0       	ldi	r17, 0x00	; 0
    305c:	89 81       	ldd	r24, Y+1	; 0x01
    305e:	9a 81       	ldd	r25, Y+2	; 0x02
    3060:	9c 01       	movw	r18, r24
    3062:	40 e0       	ldi	r20, 0x00	; 0
    3064:	50 e0       	ldi	r21, 0x00	; 0
    3066:	c8 01       	movw	r24, r16
    3068:	b7 01       	movw	r22, r14
    306a:	0e 94 41 30 	call	0x6082	; 0x6082 <__mulsi3>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	89 2f       	mov	r24, r25
    3074:	9a 2f       	mov	r25, r26
    3076:	ab 2f       	mov	r26, r27
    3078:	bb 27       	eor	r27, r27
    307a:	9c 83       	std	Y+4, r25	; 0x04
    307c:	8b 83       	std	Y+3, r24	; 0x03
    307e:	02 c0       	rjmp	.+4      	; 0x3084 <LM35_u8GetTemp+0xd8>
	}
	else {

		Local_enuErrorState = ES_OUT_OF_RANGE;
    3080:	83 e0       	ldi	r24, 0x03	; 3
    3082:	8d 83       	std	Y+5, r24	; 0x05
	}


	// Convert ( mV --> Temp )
	* Copy_u8TempValue = Local_u16AnalogValue / 10 ;
    3084:	8b 81       	ldd	r24, Y+3	; 0x03
    3086:	9c 81       	ldd	r25, Y+4	; 0x04
    3088:	2a e0       	ldi	r18, 0x0A	; 10
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	b9 01       	movw	r22, r18
    308e:	0e 94 60 30 	call	0x60c0	; 0x60c0 <__udivmodhi4>
    3092:	cb 01       	movw	r24, r22
    3094:	ea 85       	ldd	r30, Y+10	; 0x0a
    3096:	fb 85       	ldd	r31, Y+11	; 0x0b
    3098:	80 83       	st	Z, r24

	return Local_enuErrorState;
    309a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    309c:	2b 96       	adiw	r28, 0x0b	; 11
    309e:	0f b6       	in	r0, 0x3f	; 63
    30a0:	f8 94       	cli
    30a2:	de bf       	out	0x3e, r29	; 62
    30a4:	0f be       	out	0x3f, r0	; 63
    30a6:	cd bf       	out	0x3d, r28	; 61
    30a8:	cf 91       	pop	r28
    30aa:	df 91       	pop	r29
    30ac:	1f 91       	pop	r17
    30ae:	0f 91       	pop	r16
    30b0:	ff 90       	pop	r15
    30b2:	ef 90       	pop	r14
    30b4:	08 95       	ret

000030b6 <LED_enuInit>:
#include "LED_config.h"



ES_t LED_enuInit(LED_t * Copy_AstrLeds)
{
    30b6:	df 93       	push	r29
    30b8:	cf 93       	push	r28
    30ba:	00 d0       	rcall	.+0      	; 0x30bc <LED_enuInit+0x6>
    30bc:	00 d0       	rcall	.+0      	; 0x30be <LED_enuInit+0x8>
    30be:	0f 92       	push	r0
    30c0:	cd b7       	in	r28, 0x3d	; 61
    30c2:	de b7       	in	r29, 0x3e	; 62
    30c4:	9c 83       	std	Y+4, r25	; 0x04
    30c6:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_ErrorState = ES_NOK;
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_AstrLeds != NULL)
    30cc:	8b 81       	ldd	r24, Y+3	; 0x03
    30ce:	9c 81       	ldd	r25, Y+4	; 0x04
    30d0:	00 97       	sbiw	r24, 0x00	; 0
    30d2:	09 f4       	brne	.+2      	; 0x30d6 <LED_enuInit+0x20>
    30d4:	25 c1       	rjmp	.+586    	; 0x3320 <LED_enuInit+0x26a>
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < LED_NUM; ++Local_u8Iterator)
    30d6:	19 82       	std	Y+1, r1	; 0x01
    30d8:	1e c1       	rjmp	.+572    	; 0x3316 <LED_enuInit+0x260>
		{
			Local_ErrorState = DIO_enuSetPinDirection(Copy_AstrLeds[Local_u8Iterator].LED_u8PortID, Copy_AstrLeds[Local_u8Iterator].LED_u8PinID, DIO_u8OUTPUT);
    30da:	89 81       	ldd	r24, Y+1	; 0x01
    30dc:	88 2f       	mov	r24, r24
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	9c 01       	movw	r18, r24
    30e2:	22 0f       	add	r18, r18
    30e4:	33 1f       	adc	r19, r19
    30e6:	22 0f       	add	r18, r18
    30e8:	33 1f       	adc	r19, r19
    30ea:	8b 81       	ldd	r24, Y+3	; 0x03
    30ec:	9c 81       	ldd	r25, Y+4	; 0x04
    30ee:	fc 01       	movw	r30, r24
    30f0:	e2 0f       	add	r30, r18
    30f2:	f3 1f       	adc	r31, r19
    30f4:	40 81       	ld	r20, Z
    30f6:	89 81       	ldd	r24, Y+1	; 0x01
    30f8:	88 2f       	mov	r24, r24
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	9c 01       	movw	r18, r24
    30fe:	22 0f       	add	r18, r18
    3100:	33 1f       	adc	r19, r19
    3102:	22 0f       	add	r18, r18
    3104:	33 1f       	adc	r19, r19
    3106:	8b 81       	ldd	r24, Y+3	; 0x03
    3108:	9c 81       	ldd	r25, Y+4	; 0x04
    310a:	fc 01       	movw	r30, r24
    310c:	e2 0f       	add	r30, r18
    310e:	f3 1f       	adc	r31, r19
    3110:	91 81       	ldd	r25, Z+1	; 0x01
    3112:	84 2f       	mov	r24, r20
    3114:	69 2f       	mov	r22, r25
    3116:	41 e0       	ldi	r20, 0x01	; 1
    3118:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    311c:	8a 83       	std	Y+2, r24	; 0x02
			if(Copy_AstrLeds[Local_u8Iterator].LED_u8Connection == LED_SOURCE)
    311e:	89 81       	ldd	r24, Y+1	; 0x01
    3120:	88 2f       	mov	r24, r24
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	9c 01       	movw	r18, r24
    3126:	22 0f       	add	r18, r18
    3128:	33 1f       	adc	r19, r19
    312a:	22 0f       	add	r18, r18
    312c:	33 1f       	adc	r19, r19
    312e:	8b 81       	ldd	r24, Y+3	; 0x03
    3130:	9c 81       	ldd	r25, Y+4	; 0x04
    3132:	fc 01       	movw	r30, r24
    3134:	e2 0f       	add	r30, r18
    3136:	f3 1f       	adc	r31, r19
    3138:	82 81       	ldd	r24, Z+2	; 0x02
    313a:	81 30       	cpi	r24, 0x01	; 1
    313c:	09 f0       	breq	.+2      	; 0x3140 <LED_enuInit+0x8a>
    313e:	67 c0       	rjmp	.+206    	; 0x320e <LED_enuInit+0x158>
			{
				if(Copy_AstrLeds[Local_u8Iterator].LED_Status == LED_ON)
    3140:	89 81       	ldd	r24, Y+1	; 0x01
    3142:	88 2f       	mov	r24, r24
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	9c 01       	movw	r18, r24
    3148:	22 0f       	add	r18, r18
    314a:	33 1f       	adc	r19, r19
    314c:	22 0f       	add	r18, r18
    314e:	33 1f       	adc	r19, r19
    3150:	8b 81       	ldd	r24, Y+3	; 0x03
    3152:	9c 81       	ldd	r25, Y+4	; 0x04
    3154:	fc 01       	movw	r30, r24
    3156:	e2 0f       	add	r30, r18
    3158:	f3 1f       	adc	r31, r19
    315a:	83 81       	ldd	r24, Z+3	; 0x03
    315c:	81 30       	cpi	r24, 0x01	; 1
    315e:	11 f5       	brne	.+68     	; 0x31a4 <LED_enuInit+0xee>
				{
					DIO_enuSetPinValue(Copy_AstrLeds[Local_u8Iterator].LED_u8PortID, Copy_AstrLeds[Local_u8Iterator].LED_u8PinID, DIO_u8HIGH);
    3160:	89 81       	ldd	r24, Y+1	; 0x01
    3162:	88 2f       	mov	r24, r24
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	9c 01       	movw	r18, r24
    3168:	22 0f       	add	r18, r18
    316a:	33 1f       	adc	r19, r19
    316c:	22 0f       	add	r18, r18
    316e:	33 1f       	adc	r19, r19
    3170:	8b 81       	ldd	r24, Y+3	; 0x03
    3172:	9c 81       	ldd	r25, Y+4	; 0x04
    3174:	fc 01       	movw	r30, r24
    3176:	e2 0f       	add	r30, r18
    3178:	f3 1f       	adc	r31, r19
    317a:	40 81       	ld	r20, Z
    317c:	89 81       	ldd	r24, Y+1	; 0x01
    317e:	88 2f       	mov	r24, r24
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	9c 01       	movw	r18, r24
    3184:	22 0f       	add	r18, r18
    3186:	33 1f       	adc	r19, r19
    3188:	22 0f       	add	r18, r18
    318a:	33 1f       	adc	r19, r19
    318c:	8b 81       	ldd	r24, Y+3	; 0x03
    318e:	9c 81       	ldd	r25, Y+4	; 0x04
    3190:	fc 01       	movw	r30, r24
    3192:	e2 0f       	add	r30, r18
    3194:	f3 1f       	adc	r31, r19
    3196:	91 81       	ldd	r25, Z+1	; 0x01
    3198:	84 2f       	mov	r24, r20
    319a:	69 2f       	mov	r22, r25
    319c:	41 e0       	ldi	r20, 0x01	; 1
    319e:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    31a2:	b0 c0       	rjmp	.+352    	; 0x3304 <LED_enuInit+0x24e>
				}
				else if(Copy_AstrLeds[Local_u8Iterator].LED_u8Connection == LED_OFF)
    31a4:	89 81       	ldd	r24, Y+1	; 0x01
    31a6:	88 2f       	mov	r24, r24
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	9c 01       	movw	r18, r24
    31ac:	22 0f       	add	r18, r18
    31ae:	33 1f       	adc	r19, r19
    31b0:	22 0f       	add	r18, r18
    31b2:	33 1f       	adc	r19, r19
    31b4:	8b 81       	ldd	r24, Y+3	; 0x03
    31b6:	9c 81       	ldd	r25, Y+4	; 0x04
    31b8:	fc 01       	movw	r30, r24
    31ba:	e2 0f       	add	r30, r18
    31bc:	f3 1f       	adc	r31, r19
    31be:	82 81       	ldd	r24, Z+2	; 0x02
    31c0:	88 23       	and	r24, r24
    31c2:	11 f5       	brne	.+68     	; 0x3208 <LED_enuInit+0x152>
				{
					DIO_enuSetPinValue(Copy_AstrLeds[Local_u8Iterator].LED_u8PortID, Copy_AstrLeds[Local_u8Iterator].LED_u8PinID, DIO_u8LOW);
    31c4:	89 81       	ldd	r24, Y+1	; 0x01
    31c6:	88 2f       	mov	r24, r24
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	9c 01       	movw	r18, r24
    31cc:	22 0f       	add	r18, r18
    31ce:	33 1f       	adc	r19, r19
    31d0:	22 0f       	add	r18, r18
    31d2:	33 1f       	adc	r19, r19
    31d4:	8b 81       	ldd	r24, Y+3	; 0x03
    31d6:	9c 81       	ldd	r25, Y+4	; 0x04
    31d8:	fc 01       	movw	r30, r24
    31da:	e2 0f       	add	r30, r18
    31dc:	f3 1f       	adc	r31, r19
    31de:	40 81       	ld	r20, Z
    31e0:	89 81       	ldd	r24, Y+1	; 0x01
    31e2:	88 2f       	mov	r24, r24
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	9c 01       	movw	r18, r24
    31e8:	22 0f       	add	r18, r18
    31ea:	33 1f       	adc	r19, r19
    31ec:	22 0f       	add	r18, r18
    31ee:	33 1f       	adc	r19, r19
    31f0:	8b 81       	ldd	r24, Y+3	; 0x03
    31f2:	9c 81       	ldd	r25, Y+4	; 0x04
    31f4:	fc 01       	movw	r30, r24
    31f6:	e2 0f       	add	r30, r18
    31f8:	f3 1f       	adc	r31, r19
    31fa:	91 81       	ldd	r25, Z+1	; 0x01
    31fc:	84 2f       	mov	r24, r20
    31fe:	69 2f       	mov	r22, r25
    3200:	40 e0       	ldi	r20, 0x00	; 0
    3202:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    3206:	7e c0       	rjmp	.+252    	; 0x3304 <LED_enuInit+0x24e>
				}
				else
				{
					return ES_OUT_OF_RANGE;
    3208:	83 e0       	ldi	r24, 0x03	; 3
    320a:	8d 83       	std	Y+5, r24	; 0x05
    320c:	8d c0       	rjmp	.+282    	; 0x3328 <LED_enuInit+0x272>
				}
			}
			else if(Copy_AstrLeds[Local_u8Iterator].LED_u8Connection == LED_SINK)
    320e:	89 81       	ldd	r24, Y+1	; 0x01
    3210:	88 2f       	mov	r24, r24
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	9c 01       	movw	r18, r24
    3216:	22 0f       	add	r18, r18
    3218:	33 1f       	adc	r19, r19
    321a:	22 0f       	add	r18, r18
    321c:	33 1f       	adc	r19, r19
    321e:	8b 81       	ldd	r24, Y+3	; 0x03
    3220:	9c 81       	ldd	r25, Y+4	; 0x04
    3222:	fc 01       	movw	r30, r24
    3224:	e2 0f       	add	r30, r18
    3226:	f3 1f       	adc	r31, r19
    3228:	82 81       	ldd	r24, Z+2	; 0x02
    322a:	88 23       	and	r24, r24
    322c:	09 f0       	breq	.+2      	; 0x3230 <LED_enuInit+0x17a>
    322e:	67 c0       	rjmp	.+206    	; 0x32fe <LED_enuInit+0x248>
			{
				if(Copy_AstrLeds[Local_u8Iterator].LED_Status == LED_ON)
    3230:	89 81       	ldd	r24, Y+1	; 0x01
    3232:	88 2f       	mov	r24, r24
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	9c 01       	movw	r18, r24
    3238:	22 0f       	add	r18, r18
    323a:	33 1f       	adc	r19, r19
    323c:	22 0f       	add	r18, r18
    323e:	33 1f       	adc	r19, r19
    3240:	8b 81       	ldd	r24, Y+3	; 0x03
    3242:	9c 81       	ldd	r25, Y+4	; 0x04
    3244:	fc 01       	movw	r30, r24
    3246:	e2 0f       	add	r30, r18
    3248:	f3 1f       	adc	r31, r19
    324a:	83 81       	ldd	r24, Z+3	; 0x03
    324c:	81 30       	cpi	r24, 0x01	; 1
    324e:	11 f5       	brne	.+68     	; 0x3294 <LED_enuInit+0x1de>
				{
					DIO_enuSetPinValue(Copy_AstrLeds[Local_u8Iterator].LED_u8PortID, Copy_AstrLeds[Local_u8Iterator].LED_u8PinID, DIO_u8LOW);
    3250:	89 81       	ldd	r24, Y+1	; 0x01
    3252:	88 2f       	mov	r24, r24
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	9c 01       	movw	r18, r24
    3258:	22 0f       	add	r18, r18
    325a:	33 1f       	adc	r19, r19
    325c:	22 0f       	add	r18, r18
    325e:	33 1f       	adc	r19, r19
    3260:	8b 81       	ldd	r24, Y+3	; 0x03
    3262:	9c 81       	ldd	r25, Y+4	; 0x04
    3264:	fc 01       	movw	r30, r24
    3266:	e2 0f       	add	r30, r18
    3268:	f3 1f       	adc	r31, r19
    326a:	40 81       	ld	r20, Z
    326c:	89 81       	ldd	r24, Y+1	; 0x01
    326e:	88 2f       	mov	r24, r24
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	9c 01       	movw	r18, r24
    3274:	22 0f       	add	r18, r18
    3276:	33 1f       	adc	r19, r19
    3278:	22 0f       	add	r18, r18
    327a:	33 1f       	adc	r19, r19
    327c:	8b 81       	ldd	r24, Y+3	; 0x03
    327e:	9c 81       	ldd	r25, Y+4	; 0x04
    3280:	fc 01       	movw	r30, r24
    3282:	e2 0f       	add	r30, r18
    3284:	f3 1f       	adc	r31, r19
    3286:	91 81       	ldd	r25, Z+1	; 0x01
    3288:	84 2f       	mov	r24, r20
    328a:	69 2f       	mov	r22, r25
    328c:	40 e0       	ldi	r20, 0x00	; 0
    328e:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    3292:	38 c0       	rjmp	.+112    	; 0x3304 <LED_enuInit+0x24e>
				}
				else if(Copy_AstrLeds[Local_u8Iterator].LED_u8Connection == LED_OFF)
    3294:	89 81       	ldd	r24, Y+1	; 0x01
    3296:	88 2f       	mov	r24, r24
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	9c 01       	movw	r18, r24
    329c:	22 0f       	add	r18, r18
    329e:	33 1f       	adc	r19, r19
    32a0:	22 0f       	add	r18, r18
    32a2:	33 1f       	adc	r19, r19
    32a4:	8b 81       	ldd	r24, Y+3	; 0x03
    32a6:	9c 81       	ldd	r25, Y+4	; 0x04
    32a8:	fc 01       	movw	r30, r24
    32aa:	e2 0f       	add	r30, r18
    32ac:	f3 1f       	adc	r31, r19
    32ae:	82 81       	ldd	r24, Z+2	; 0x02
    32b0:	88 23       	and	r24, r24
    32b2:	11 f5       	brne	.+68     	; 0x32f8 <LED_enuInit+0x242>
				{
					DIO_enuSetPinValue(Copy_AstrLeds[Local_u8Iterator].LED_u8PortID, Copy_AstrLeds[Local_u8Iterator].LED_u8PinID, DIO_u8HIGH);
    32b4:	89 81       	ldd	r24, Y+1	; 0x01
    32b6:	88 2f       	mov	r24, r24
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	9c 01       	movw	r18, r24
    32bc:	22 0f       	add	r18, r18
    32be:	33 1f       	adc	r19, r19
    32c0:	22 0f       	add	r18, r18
    32c2:	33 1f       	adc	r19, r19
    32c4:	8b 81       	ldd	r24, Y+3	; 0x03
    32c6:	9c 81       	ldd	r25, Y+4	; 0x04
    32c8:	fc 01       	movw	r30, r24
    32ca:	e2 0f       	add	r30, r18
    32cc:	f3 1f       	adc	r31, r19
    32ce:	40 81       	ld	r20, Z
    32d0:	89 81       	ldd	r24, Y+1	; 0x01
    32d2:	88 2f       	mov	r24, r24
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	9c 01       	movw	r18, r24
    32d8:	22 0f       	add	r18, r18
    32da:	33 1f       	adc	r19, r19
    32dc:	22 0f       	add	r18, r18
    32de:	33 1f       	adc	r19, r19
    32e0:	8b 81       	ldd	r24, Y+3	; 0x03
    32e2:	9c 81       	ldd	r25, Y+4	; 0x04
    32e4:	fc 01       	movw	r30, r24
    32e6:	e2 0f       	add	r30, r18
    32e8:	f3 1f       	adc	r31, r19
    32ea:	91 81       	ldd	r25, Z+1	; 0x01
    32ec:	84 2f       	mov	r24, r20
    32ee:	69 2f       	mov	r22, r25
    32f0:	41 e0       	ldi	r20, 0x01	; 1
    32f2:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    32f6:	06 c0       	rjmp	.+12     	; 0x3304 <LED_enuInit+0x24e>
				}
				else
				{
					return ES_OUT_OF_RANGE;
    32f8:	83 e0       	ldi	r24, 0x03	; 3
    32fa:	8d 83       	std	Y+5, r24	; 0x05
    32fc:	15 c0       	rjmp	.+42     	; 0x3328 <LED_enuInit+0x272>
				}
			}
			else
			{
				return ES_OUT_OF_RANGE;
    32fe:	83 e0       	ldi	r24, 0x03	; 3
    3300:	8d 83       	std	Y+5, r24	; 0x05
    3302:	12 c0       	rjmp	.+36     	; 0x3328 <LED_enuInit+0x272>
			}

			if(Local_ErrorState != ES_OK) return Local_ErrorState;
    3304:	8a 81       	ldd	r24, Y+2	; 0x02
    3306:	88 23       	and	r24, r24
    3308:	19 f0       	breq	.+6      	; 0x3310 <LED_enuInit+0x25a>
    330a:	8a 81       	ldd	r24, Y+2	; 0x02
    330c:	8d 83       	std	Y+5, r24	; 0x05
    330e:	0c c0       	rjmp	.+24     	; 0x3328 <LED_enuInit+0x272>
	ES_t Local_ErrorState = ES_NOK;

	if(Copy_AstrLeds != NULL)
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < LED_NUM; ++Local_u8Iterator)
    3310:	89 81       	ldd	r24, Y+1	; 0x01
    3312:	8f 5f       	subi	r24, 0xFF	; 255
    3314:	89 83       	std	Y+1, r24	; 0x01
    3316:	89 81       	ldd	r24, Y+1	; 0x01
    3318:	83 30       	cpi	r24, 0x03	; 3
    331a:	08 f4       	brcc	.+2      	; 0x331e <LED_enuInit+0x268>
    331c:	de ce       	rjmp	.-580    	; 0x30da <LED_enuInit+0x24>
    331e:	02 c0       	rjmp	.+4      	; 0x3324 <LED_enuInit+0x26e>
			if(Local_ErrorState != ES_OK) return Local_ErrorState;
		}
	}
	else
	{
		Local_ErrorState = ES_NULL_POINTER;
    3320:	82 e0       	ldi	r24, 0x02	; 2
    3322:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_ErrorState;
    3324:	8a 81       	ldd	r24, Y+2	; 0x02
    3326:	8d 83       	std	Y+5, r24	; 0x05
    3328:	8d 81       	ldd	r24, Y+5	; 0x05
}
    332a:	0f 90       	pop	r0
    332c:	0f 90       	pop	r0
    332e:	0f 90       	pop	r0
    3330:	0f 90       	pop	r0
    3332:	0f 90       	pop	r0
    3334:	cf 91       	pop	r28
    3336:	df 91       	pop	r29
    3338:	08 95       	ret

0000333a <LED_enuTrunOn>:

ES_t LED_enuTrunOn(LED_t * Copy_pstrLedConfig)
{
    333a:	df 93       	push	r29
    333c:	cf 93       	push	r28
    333e:	00 d0       	rcall	.+0      	; 0x3340 <LED_enuTrunOn+0x6>
    3340:	00 d0       	rcall	.+0      	; 0x3342 <LED_enuTrunOn+0x8>
    3342:	cd b7       	in	r28, 0x3d	; 61
    3344:	de b7       	in	r29, 0x3e	; 62
    3346:	9b 83       	std	Y+3, r25	; 0x03
    3348:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_ErrorState = ES_NOK;
    334a:	81 e0       	ldi	r24, 0x01	; 1
    334c:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pstrLedConfig != NULL)
    334e:	8a 81       	ldd	r24, Y+2	; 0x02
    3350:	9b 81       	ldd	r25, Y+3	; 0x03
    3352:	00 97       	sbiw	r24, 0x00	; 0
    3354:	19 f1       	breq	.+70     	; 0x339c <LED_enuTrunOn+0x62>
	{
		if(Copy_pstrLedConfig->LED_u8Connection == LED_SOURCE)
    3356:	ea 81       	ldd	r30, Y+2	; 0x02
    3358:	fb 81       	ldd	r31, Y+3	; 0x03
    335a:	82 81       	ldd	r24, Z+2	; 0x02
    335c:	81 30       	cpi	r24, 0x01	; 1
    335e:	59 f4       	brne	.+22     	; 0x3376 <LED_enuTrunOn+0x3c>
		{
			DIO_enuSetPinValue(Copy_pstrLedConfig->LED_u8PortID, Copy_pstrLedConfig->LED_u8PinID, DIO_u8HIGH);
    3360:	ea 81       	ldd	r30, Y+2	; 0x02
    3362:	fb 81       	ldd	r31, Y+3	; 0x03
    3364:	80 81       	ld	r24, Z
    3366:	ea 81       	ldd	r30, Y+2	; 0x02
    3368:	fb 81       	ldd	r31, Y+3	; 0x03
    336a:	91 81       	ldd	r25, Z+1	; 0x01
    336c:	69 2f       	mov	r22, r25
    336e:	41 e0       	ldi	r20, 0x01	; 1
    3370:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    3374:	15 c0       	rjmp	.+42     	; 0x33a0 <LED_enuTrunOn+0x66>
		}
		else if(Copy_pstrLedConfig->LED_u8Connection == LED_SINK)
    3376:	ea 81       	ldd	r30, Y+2	; 0x02
    3378:	fb 81       	ldd	r31, Y+3	; 0x03
    337a:	82 81       	ldd	r24, Z+2	; 0x02
    337c:	88 23       	and	r24, r24
    337e:	59 f4       	brne	.+22     	; 0x3396 <LED_enuTrunOn+0x5c>
		{
			DIO_enuSetPinValue(Copy_pstrLedConfig->LED_u8PortID, Copy_pstrLedConfig->LED_u8PinID, DIO_u8LOW);
    3380:	ea 81       	ldd	r30, Y+2	; 0x02
    3382:	fb 81       	ldd	r31, Y+3	; 0x03
    3384:	80 81       	ld	r24, Z
    3386:	ea 81       	ldd	r30, Y+2	; 0x02
    3388:	fb 81       	ldd	r31, Y+3	; 0x03
    338a:	91 81       	ldd	r25, Z+1	; 0x01
    338c:	69 2f       	mov	r22, r25
    338e:	40 e0       	ldi	r20, 0x00	; 0
    3390:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    3394:	05 c0       	rjmp	.+10     	; 0x33a0 <LED_enuTrunOn+0x66>
		}
		else
		{
			return ES_OUT_OF_RANGE;
    3396:	83 e0       	ldi	r24, 0x03	; 3
    3398:	8c 83       	std	Y+4, r24	; 0x04
    339a:	04 c0       	rjmp	.+8      	; 0x33a4 <LED_enuTrunOn+0x6a>
		}
	}

	else
	{
		Local_ErrorState = ES_NULL_POINTER;
    339c:	82 e0       	ldi	r24, 0x02	; 2
    339e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
    33a0:	89 81       	ldd	r24, Y+1	; 0x01
    33a2:	8c 83       	std	Y+4, r24	; 0x04
    33a4:	8c 81       	ldd	r24, Y+4	; 0x04
}
    33a6:	0f 90       	pop	r0
    33a8:	0f 90       	pop	r0
    33aa:	0f 90       	pop	r0
    33ac:	0f 90       	pop	r0
    33ae:	cf 91       	pop	r28
    33b0:	df 91       	pop	r29
    33b2:	08 95       	ret

000033b4 <LED_enuTrunOff>:

ES_t LED_enuTrunOff(LED_t * Copy_pstrLedConfig)
{
    33b4:	df 93       	push	r29
    33b6:	cf 93       	push	r28
    33b8:	00 d0       	rcall	.+0      	; 0x33ba <LED_enuTrunOff+0x6>
    33ba:	00 d0       	rcall	.+0      	; 0x33bc <LED_enuTrunOff+0x8>
    33bc:	cd b7       	in	r28, 0x3d	; 61
    33be:	de b7       	in	r29, 0x3e	; 62
    33c0:	9b 83       	std	Y+3, r25	; 0x03
    33c2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_ErrorState = ES_NOK;
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pstrLedConfig != NULL)
    33c8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ca:	9b 81       	ldd	r25, Y+3	; 0x03
    33cc:	00 97       	sbiw	r24, 0x00	; 0
    33ce:	19 f1       	breq	.+70     	; 0x3416 <LED_enuTrunOff+0x62>
	{
		if(Copy_pstrLedConfig->LED_u8Connection == LED_SOURCE)
    33d0:	ea 81       	ldd	r30, Y+2	; 0x02
    33d2:	fb 81       	ldd	r31, Y+3	; 0x03
    33d4:	82 81       	ldd	r24, Z+2	; 0x02
    33d6:	81 30       	cpi	r24, 0x01	; 1
    33d8:	59 f4       	brne	.+22     	; 0x33f0 <LED_enuTrunOff+0x3c>
		{
			DIO_enuSetPinValue(Copy_pstrLedConfig->LED_u8PortID, Copy_pstrLedConfig->LED_u8PinID, DIO_u8LOW);
    33da:	ea 81       	ldd	r30, Y+2	; 0x02
    33dc:	fb 81       	ldd	r31, Y+3	; 0x03
    33de:	80 81       	ld	r24, Z
    33e0:	ea 81       	ldd	r30, Y+2	; 0x02
    33e2:	fb 81       	ldd	r31, Y+3	; 0x03
    33e4:	91 81       	ldd	r25, Z+1	; 0x01
    33e6:	69 2f       	mov	r22, r25
    33e8:	40 e0       	ldi	r20, 0x00	; 0
    33ea:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    33ee:	15 c0       	rjmp	.+42     	; 0x341a <LED_enuTrunOff+0x66>
		}
		else if(Copy_pstrLedConfig->LED_u8Connection == LED_SINK)
    33f0:	ea 81       	ldd	r30, Y+2	; 0x02
    33f2:	fb 81       	ldd	r31, Y+3	; 0x03
    33f4:	82 81       	ldd	r24, Z+2	; 0x02
    33f6:	88 23       	and	r24, r24
    33f8:	59 f4       	brne	.+22     	; 0x3410 <LED_enuTrunOff+0x5c>
		{
			DIO_enuSetPinValue(Copy_pstrLedConfig->LED_u8PortID, Copy_pstrLedConfig->LED_u8PinID, DIO_u8HIGH);
    33fa:	ea 81       	ldd	r30, Y+2	; 0x02
    33fc:	fb 81       	ldd	r31, Y+3	; 0x03
    33fe:	80 81       	ld	r24, Z
    3400:	ea 81       	ldd	r30, Y+2	; 0x02
    3402:	fb 81       	ldd	r31, Y+3	; 0x03
    3404:	91 81       	ldd	r25, Z+1	; 0x01
    3406:	69 2f       	mov	r22, r25
    3408:	41 e0       	ldi	r20, 0x01	; 1
    340a:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    340e:	05 c0       	rjmp	.+10     	; 0x341a <LED_enuTrunOff+0x66>
		}
		else
		{
			return ES_OUT_OF_RANGE;
    3410:	83 e0       	ldi	r24, 0x03	; 3
    3412:	8c 83       	std	Y+4, r24	; 0x04
    3414:	04 c0       	rjmp	.+8      	; 0x341e <LED_enuTrunOff+0x6a>
		}
	}

	else
	{
		Local_ErrorState = ES_NULL_POINTER;
    3416:	82 e0       	ldi	r24, 0x02	; 2
    3418:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
    341a:	89 81       	ldd	r24, Y+1	; 0x01
    341c:	8c 83       	std	Y+4, r24	; 0x04
    341e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3420:	0f 90       	pop	r0
    3422:	0f 90       	pop	r0
    3424:	0f 90       	pop	r0
    3426:	0f 90       	pop	r0
    3428:	cf 91       	pop	r28
    342a:	df 91       	pop	r29
    342c:	08 95       	ret

0000342e <LCD_enuInit>:


u8 Global_u8Flag = 0;

ES_t LCD_enuInit(void)
{
    342e:	2f 92       	push	r2
    3430:	3f 92       	push	r3
    3432:	4f 92       	push	r4
    3434:	5f 92       	push	r5
    3436:	6f 92       	push	r6
    3438:	7f 92       	push	r7
    343a:	8f 92       	push	r8
    343c:	9f 92       	push	r9
    343e:	af 92       	push	r10
    3440:	bf 92       	push	r11
    3442:	cf 92       	push	r12
    3444:	df 92       	push	r13
    3446:	ef 92       	push	r14
    3448:	ff 92       	push	r15
    344a:	0f 93       	push	r16
    344c:	1f 93       	push	r17
    344e:	df 93       	push	r29
    3450:	cf 93       	push	r28
    3452:	cd b7       	in	r28, 0x3d	; 61
    3454:	de b7       	in	r29, 0x3e	; 62
    3456:	c3 54       	subi	r28, 0x43	; 67
    3458:	d0 40       	sbci	r29, 0x00	; 0
    345a:	0f b6       	in	r0, 0x3f	; 63
    345c:	f8 94       	cli
    345e:	de bf       	out	0x3e, r29	; 62
    3460:	0f be       	out	0x3f, r0	; 63
    3462:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_ErrorState = ES_NOK;
    3464:	fe 01       	movw	r30, r28
    3466:	ee 5b       	subi	r30, 0xBE	; 190
    3468:	ff 4f       	sbci	r31, 0xFF	; 255
    346a:	81 e0       	ldi	r24, 0x01	; 1
    346c:	80 83       	st	Z, r24
    346e:	80 e0       	ldi	r24, 0x00	; 0
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	a0 e2       	ldi	r26, 0x20	; 32
    3474:	b2 e4       	ldi	r27, 0x42	; 66
    3476:	8d ab       	std	Y+53, r24	; 0x35
    3478:	9e ab       	std	Y+54, r25	; 0x36
    347a:	af ab       	std	Y+55, r26	; 0x37
    347c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    347e:	6d a9       	ldd	r22, Y+53	; 0x35
    3480:	7e a9       	ldd	r23, Y+54	; 0x36
    3482:	8f a9       	ldd	r24, Y+55	; 0x37
    3484:	98 ad       	ldd	r25, Y+56	; 0x38
    3486:	20 e0       	ldi	r18, 0x00	; 0
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	4a e7       	ldi	r20, 0x7A	; 122
    348c:	53 e4       	ldi	r21, 0x43	; 67
    348e:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3492:	dc 01       	movw	r26, r24
    3494:	cb 01       	movw	r24, r22
    3496:	89 ab       	std	Y+49, r24	; 0x31
    3498:	9a ab       	std	Y+50, r25	; 0x32
    349a:	ab ab       	std	Y+51, r26	; 0x33
    349c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    349e:	69 a9       	ldd	r22, Y+49	; 0x31
    34a0:	7a a9       	ldd	r23, Y+50	; 0x32
    34a2:	8b a9       	ldd	r24, Y+51	; 0x33
    34a4:	9c a9       	ldd	r25, Y+52	; 0x34
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	40 e8       	ldi	r20, 0x80	; 128
    34ac:	5f e3       	ldi	r21, 0x3F	; 63
    34ae:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__ltsf2>
    34b2:	88 23       	and	r24, r24
    34b4:	2c f4       	brge	.+10     	; 0x34c0 <LCD_enuInit+0x92>
		__ticks = 1;
    34b6:	81 e0       	ldi	r24, 0x01	; 1
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	98 ab       	std	Y+48, r25	; 0x30
    34bc:	8f a7       	std	Y+47, r24	; 0x2f
    34be:	3f c0       	rjmp	.+126    	; 0x353e <LCD_enuInit+0x110>
	else if (__tmp > 65535)
    34c0:	69 a9       	ldd	r22, Y+49	; 0x31
    34c2:	7a a9       	ldd	r23, Y+50	; 0x32
    34c4:	8b a9       	ldd	r24, Y+51	; 0x33
    34c6:	9c a9       	ldd	r25, Y+52	; 0x34
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	3f ef       	ldi	r19, 0xFF	; 255
    34cc:	4f e7       	ldi	r20, 0x7F	; 127
    34ce:	57 e4       	ldi	r21, 0x47	; 71
    34d0:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gtsf2>
    34d4:	18 16       	cp	r1, r24
    34d6:	4c f5       	brge	.+82     	; 0x352a <LCD_enuInit+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34d8:	6d a9       	ldd	r22, Y+53	; 0x35
    34da:	7e a9       	ldd	r23, Y+54	; 0x36
    34dc:	8f a9       	ldd	r24, Y+55	; 0x37
    34de:	98 ad       	ldd	r25, Y+56	; 0x38
    34e0:	20 e0       	ldi	r18, 0x00	; 0
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	40 e2       	ldi	r20, 0x20	; 32
    34e6:	51 e4       	ldi	r21, 0x41	; 65
    34e8:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    34ec:	dc 01       	movw	r26, r24
    34ee:	cb 01       	movw	r24, r22
    34f0:	bc 01       	movw	r22, r24
    34f2:	cd 01       	movw	r24, r26
    34f4:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    34f8:	dc 01       	movw	r26, r24
    34fa:	cb 01       	movw	r24, r22
    34fc:	98 ab       	std	Y+48, r25	; 0x30
    34fe:	8f a7       	std	Y+47, r24	; 0x2f
    3500:	0f c0       	rjmp	.+30     	; 0x3520 <LCD_enuInit+0xf2>
    3502:	89 e1       	ldi	r24, 0x19	; 25
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	9e a7       	std	Y+46, r25	; 0x2e
    3508:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    350a:	8d a5       	ldd	r24, Y+45	; 0x2d
    350c:	9e a5       	ldd	r25, Y+46	; 0x2e
    350e:	01 97       	sbiw	r24, 0x01	; 1
    3510:	f1 f7       	brne	.-4      	; 0x350e <LCD_enuInit+0xe0>
    3512:	9e a7       	std	Y+46, r25	; 0x2e
    3514:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3516:	8f a5       	ldd	r24, Y+47	; 0x2f
    3518:	98 a9       	ldd	r25, Y+48	; 0x30
    351a:	01 97       	sbiw	r24, 0x01	; 1
    351c:	98 ab       	std	Y+48, r25	; 0x30
    351e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3520:	8f a5       	ldd	r24, Y+47	; 0x2f
    3522:	98 a9       	ldd	r25, Y+48	; 0x30
    3524:	00 97       	sbiw	r24, 0x00	; 0
    3526:	69 f7       	brne	.-38     	; 0x3502 <LCD_enuInit+0xd4>
    3528:	14 c0       	rjmp	.+40     	; 0x3552 <LCD_enuInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    352a:	69 a9       	ldd	r22, Y+49	; 0x31
    352c:	7a a9       	ldd	r23, Y+50	; 0x32
    352e:	8b a9       	ldd	r24, Y+51	; 0x33
    3530:	9c a9       	ldd	r25, Y+52	; 0x34
    3532:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3536:	dc 01       	movw	r26, r24
    3538:	cb 01       	movw	r24, r22
    353a:	98 ab       	std	Y+48, r25	; 0x30
    353c:	8f a7       	std	Y+47, r24	; 0x2f
    353e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3540:	98 a9       	ldd	r25, Y+48	; 0x30
    3542:	9c a7       	std	Y+44, r25	; 0x2c
    3544:	8b a7       	std	Y+43, r24	; 0x2b
    3546:	8b a5       	ldd	r24, Y+43	; 0x2b
    3548:	9c a5       	ldd	r25, Y+44	; 0x2c
    354a:	01 97       	sbiw	r24, 0x01	; 1
    354c:	f1 f7       	brne	.-4      	; 0x354a <LCD_enuInit+0x11c>
    354e:	9c a7       	std	Y+44, r25	; 0x2c
    3550:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(40);

	u64 Local_u64Check = 0;
    3552:	fe 01       	movw	r30, r28
    3554:	fa 96       	adiw	r30, 0x3a	; 58
    3556:	10 82       	st	Z, r1
    3558:	11 82       	std	Z+1, r1	; 0x01
    355a:	12 82       	std	Z+2, r1	; 0x02
    355c:	13 82       	std	Z+3, r1	; 0x03
    355e:	14 82       	std	Z+4, r1	; 0x04
    3560:	15 82       	std	Z+5, r1	; 0x05
    3562:	16 82       	std	Z+6, r1	; 0x06
    3564:	17 82       	std	Z+7, r1	; 0x07

	Local_u64Check |= (DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT) << 0);
    3566:	82 e0       	ldi	r24, 0x02	; 2
    3568:	60 e0       	ldi	r22, 0x00	; 0
    356a:	41 e0       	ldi	r20, 0x01	; 1
    356c:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    3570:	28 2f       	mov	r18, r24
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	40 e0       	ldi	r20, 0x00	; 0
    3576:	50 e0       	ldi	r21, 0x00	; 0
    3578:	60 e0       	ldi	r22, 0x00	; 0
    357a:	70 e0       	ldi	r23, 0x00	; 0
    357c:	80 e0       	ldi	r24, 0x00	; 0
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	de 01       	movw	r26, r28
    3582:	da 96       	adiw	r26, 0x3a	; 58
    3584:	fe 01       	movw	r30, r28
    3586:	fa 96       	adiw	r30, 0x3a	; 58
    3588:	10 81       	ld	r17, Z
    358a:	12 2b       	or	r17, r18
    358c:	1c 93       	st	X, r17
    358e:	11 81       	ldd	r17, Z+1	; 0x01
    3590:	13 2b       	or	r17, r19
    3592:	11 96       	adiw	r26, 0x01	; 1
    3594:	1c 93       	st	X, r17
    3596:	11 97       	sbiw	r26, 0x01	; 1
    3598:	12 81       	ldd	r17, Z+2	; 0x02
    359a:	14 2b       	or	r17, r20
    359c:	12 96       	adiw	r26, 0x02	; 2
    359e:	1c 93       	st	X, r17
    35a0:	12 97       	sbiw	r26, 0x02	; 2
    35a2:	13 81       	ldd	r17, Z+3	; 0x03
    35a4:	15 2b       	or	r17, r21
    35a6:	13 96       	adiw	r26, 0x03	; 3
    35a8:	1c 93       	st	X, r17
    35aa:	13 97       	sbiw	r26, 0x03	; 3
    35ac:	14 81       	ldd	r17, Z+4	; 0x04
    35ae:	16 2b       	or	r17, r22
    35b0:	14 96       	adiw	r26, 0x04	; 4
    35b2:	1c 93       	st	X, r17
    35b4:	14 97       	sbiw	r26, 0x04	; 4
    35b6:	15 81       	ldd	r17, Z+5	; 0x05
    35b8:	17 2b       	or	r17, r23
    35ba:	15 96       	adiw	r26, 0x05	; 5
    35bc:	1c 93       	st	X, r17
    35be:	15 97       	sbiw	r26, 0x05	; 5
    35c0:	16 81       	ldd	r17, Z+6	; 0x06
    35c2:	18 2b       	or	r17, r24
    35c4:	16 96       	adiw	r26, 0x06	; 6
    35c6:	1c 93       	st	X, r17
    35c8:	16 97       	sbiw	r26, 0x06	; 6
    35ca:	e7 81       	ldd	r30, Z+7	; 0x07
    35cc:	8e 2f       	mov	r24, r30
    35ce:	89 2b       	or	r24, r25
    35d0:	17 96       	adiw	r26, 0x07	; 7
    35d2:	8c 93       	st	X, r24
	Local_u64Check |= (DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT) << 3);
    35d4:	82 e0       	ldi	r24, 0x02	; 2
    35d6:	61 e0       	ldi	r22, 0x01	; 1
    35d8:	41 e0       	ldi	r20, 0x01	; 1
    35da:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    35de:	88 2f       	mov	r24, r24
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	dc 01       	movw	r26, r24
    35e4:	aa 0f       	add	r26, r26
    35e6:	bb 1f       	adc	r27, r27
    35e8:	aa 0f       	add	r26, r26
    35ea:	bb 1f       	adc	r27, r27
    35ec:	aa 0f       	add	r26, r26
    35ee:	bb 1f       	adc	r27, r27
    35f0:	fd 01       	movw	r30, r26
    35f2:	ff 0f       	add	r31, r31
    35f4:	ee 0b       	sbc	r30, r30
    35f6:	fe 2f       	mov	r31, r30
    35f8:	9d 01       	movw	r18, r26
    35fa:	4e 2f       	mov	r20, r30
    35fc:	5e 2f       	mov	r21, r30
    35fe:	6e 2f       	mov	r22, r30
    3600:	7e 2f       	mov	r23, r30
    3602:	8e 2f       	mov	r24, r30
    3604:	9e 2f       	mov	r25, r30
    3606:	de 01       	movw	r26, r28
    3608:	da 96       	adiw	r26, 0x3a	; 58
    360a:	fe 01       	movw	r30, r28
    360c:	fa 96       	adiw	r30, 0x3a	; 58
    360e:	10 81       	ld	r17, Z
    3610:	12 2b       	or	r17, r18
    3612:	1c 93       	st	X, r17
    3614:	11 81       	ldd	r17, Z+1	; 0x01
    3616:	13 2b       	or	r17, r19
    3618:	11 96       	adiw	r26, 0x01	; 1
    361a:	1c 93       	st	X, r17
    361c:	11 97       	sbiw	r26, 0x01	; 1
    361e:	12 81       	ldd	r17, Z+2	; 0x02
    3620:	14 2b       	or	r17, r20
    3622:	12 96       	adiw	r26, 0x02	; 2
    3624:	1c 93       	st	X, r17
    3626:	12 97       	sbiw	r26, 0x02	; 2
    3628:	13 81       	ldd	r17, Z+3	; 0x03
    362a:	15 2b       	or	r17, r21
    362c:	13 96       	adiw	r26, 0x03	; 3
    362e:	1c 93       	st	X, r17
    3630:	13 97       	sbiw	r26, 0x03	; 3
    3632:	14 81       	ldd	r17, Z+4	; 0x04
    3634:	16 2b       	or	r17, r22
    3636:	14 96       	adiw	r26, 0x04	; 4
    3638:	1c 93       	st	X, r17
    363a:	14 97       	sbiw	r26, 0x04	; 4
    363c:	15 81       	ldd	r17, Z+5	; 0x05
    363e:	17 2b       	or	r17, r23
    3640:	15 96       	adiw	r26, 0x05	; 5
    3642:	1c 93       	st	X, r17
    3644:	15 97       	sbiw	r26, 0x05	; 5
    3646:	16 81       	ldd	r17, Z+6	; 0x06
    3648:	18 2b       	or	r17, r24
    364a:	16 96       	adiw	r26, 0x06	; 6
    364c:	1c 93       	st	X, r17
    364e:	16 97       	sbiw	r26, 0x06	; 6
    3650:	e7 81       	ldd	r30, Z+7	; 0x07
    3652:	8e 2f       	mov	r24, r30
    3654:	89 2b       	or	r24, r25
    3656:	17 96       	adiw	r26, 0x07	; 7
    3658:	8c 93       	st	X, r24
	Local_u64Check |= (DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT) << 6);
    365a:	82 e0       	ldi	r24, 0x02	; 2
    365c:	62 e0       	ldi	r22, 0x02	; 2
    365e:	41 e0       	ldi	r20, 0x01	; 1
    3660:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    3664:	88 2f       	mov	r24, r24
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	dc 01       	movw	r26, r24
    366a:	00 24       	eor	r0, r0
    366c:	b6 95       	lsr	r27
    366e:	a7 95       	ror	r26
    3670:	07 94       	ror	r0
    3672:	b6 95       	lsr	r27
    3674:	a7 95       	ror	r26
    3676:	07 94       	ror	r0
    3678:	ba 2f       	mov	r27, r26
    367a:	a0 2d       	mov	r26, r0
    367c:	fd 01       	movw	r30, r26
    367e:	ff 0f       	add	r31, r31
    3680:	ee 0b       	sbc	r30, r30
    3682:	fe 2f       	mov	r31, r30
    3684:	9d 01       	movw	r18, r26
    3686:	4e 2f       	mov	r20, r30
    3688:	5e 2f       	mov	r21, r30
    368a:	6e 2f       	mov	r22, r30
    368c:	7e 2f       	mov	r23, r30
    368e:	8e 2f       	mov	r24, r30
    3690:	9e 2f       	mov	r25, r30
    3692:	de 01       	movw	r26, r28
    3694:	da 96       	adiw	r26, 0x3a	; 58
    3696:	fe 01       	movw	r30, r28
    3698:	fa 96       	adiw	r30, 0x3a	; 58
    369a:	10 81       	ld	r17, Z
    369c:	12 2b       	or	r17, r18
    369e:	1c 93       	st	X, r17
    36a0:	11 81       	ldd	r17, Z+1	; 0x01
    36a2:	13 2b       	or	r17, r19
    36a4:	11 96       	adiw	r26, 0x01	; 1
    36a6:	1c 93       	st	X, r17
    36a8:	11 97       	sbiw	r26, 0x01	; 1
    36aa:	12 81       	ldd	r17, Z+2	; 0x02
    36ac:	14 2b       	or	r17, r20
    36ae:	12 96       	adiw	r26, 0x02	; 2
    36b0:	1c 93       	st	X, r17
    36b2:	12 97       	sbiw	r26, 0x02	; 2
    36b4:	13 81       	ldd	r17, Z+3	; 0x03
    36b6:	15 2b       	or	r17, r21
    36b8:	13 96       	adiw	r26, 0x03	; 3
    36ba:	1c 93       	st	X, r17
    36bc:	13 97       	sbiw	r26, 0x03	; 3
    36be:	14 81       	ldd	r17, Z+4	; 0x04
    36c0:	16 2b       	or	r17, r22
    36c2:	14 96       	adiw	r26, 0x04	; 4
    36c4:	1c 93       	st	X, r17
    36c6:	14 97       	sbiw	r26, 0x04	; 4
    36c8:	15 81       	ldd	r17, Z+5	; 0x05
    36ca:	17 2b       	or	r17, r23
    36cc:	15 96       	adiw	r26, 0x05	; 5
    36ce:	1c 93       	st	X, r17
    36d0:	15 97       	sbiw	r26, 0x05	; 5
    36d2:	16 81       	ldd	r17, Z+6	; 0x06
    36d4:	18 2b       	or	r17, r24
    36d6:	16 96       	adiw	r26, 0x06	; 6
    36d8:	1c 93       	st	X, r17
    36da:	16 97       	sbiw	r26, 0x06	; 6
    36dc:	e7 81       	ldd	r30, Z+7	; 0x07
    36de:	8e 2f       	mov	r24, r30
    36e0:	89 2b       	or	r24, r25
    36e2:	17 96       	adiw	r26, 0x07	; 7
    36e4:	8c 93       	st	X, r24

	Local_u64Check |= ((u64)DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT) << 9 );
    36e6:	82 e0       	ldi	r24, 0x02	; 2
    36e8:	63 e0       	ldi	r22, 0x03	; 3
    36ea:	41 e0       	ldi	r20, 0x01	; 1
    36ec:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    36f0:	a8 2e       	mov	r10, r24
    36f2:	bb 24       	eor	r11, r11
    36f4:	cc 24       	eor	r12, r12
    36f6:	dd 24       	eor	r13, r13
    36f8:	ee 24       	eor	r14, r14
    36fa:	ff 24       	eor	r15, r15
    36fc:	87 01       	movw	r16, r14
    36fe:	2a 2d       	mov	r18, r10
    3700:	3b 2d       	mov	r19, r11
    3702:	4c 2d       	mov	r20, r12
    3704:	5d 2d       	mov	r21, r13
    3706:	6e 2d       	mov	r22, r14
    3708:	7f 2d       	mov	r23, r15
    370a:	80 2f       	mov	r24, r16
    370c:	91 2f       	mov	r25, r17
    370e:	09 e0       	ldi	r16, 0x09	; 9
    3710:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    3714:	a2 2e       	mov	r10, r18
    3716:	b3 2e       	mov	r11, r19
    3718:	c4 2e       	mov	r12, r20
    371a:	d5 2e       	mov	r13, r21
    371c:	e6 2e       	mov	r14, r22
    371e:	f7 2e       	mov	r15, r23
    3720:	08 2f       	mov	r16, r24
    3722:	19 2f       	mov	r17, r25
    3724:	2a 2d       	mov	r18, r10
    3726:	3b 2d       	mov	r19, r11
    3728:	4c 2d       	mov	r20, r12
    372a:	5d 2d       	mov	r21, r13
    372c:	6e 2d       	mov	r22, r14
    372e:	7f 2d       	mov	r23, r15
    3730:	80 2f       	mov	r24, r16
    3732:	91 2f       	mov	r25, r17
    3734:	de 01       	movw	r26, r28
    3736:	da 96       	adiw	r26, 0x3a	; 58
    3738:	fe 01       	movw	r30, r28
    373a:	fa 96       	adiw	r30, 0x3a	; 58
    373c:	10 81       	ld	r17, Z
    373e:	12 2b       	or	r17, r18
    3740:	1c 93       	st	X, r17
    3742:	11 81       	ldd	r17, Z+1	; 0x01
    3744:	13 2b       	or	r17, r19
    3746:	11 96       	adiw	r26, 0x01	; 1
    3748:	1c 93       	st	X, r17
    374a:	11 97       	sbiw	r26, 0x01	; 1
    374c:	12 81       	ldd	r17, Z+2	; 0x02
    374e:	14 2b       	or	r17, r20
    3750:	12 96       	adiw	r26, 0x02	; 2
    3752:	1c 93       	st	X, r17
    3754:	12 97       	sbiw	r26, 0x02	; 2
    3756:	13 81       	ldd	r17, Z+3	; 0x03
    3758:	15 2b       	or	r17, r21
    375a:	13 96       	adiw	r26, 0x03	; 3
    375c:	1c 93       	st	X, r17
    375e:	13 97       	sbiw	r26, 0x03	; 3
    3760:	14 81       	ldd	r17, Z+4	; 0x04
    3762:	16 2b       	or	r17, r22
    3764:	14 96       	adiw	r26, 0x04	; 4
    3766:	1c 93       	st	X, r17
    3768:	14 97       	sbiw	r26, 0x04	; 4
    376a:	15 81       	ldd	r17, Z+5	; 0x05
    376c:	17 2b       	or	r17, r23
    376e:	15 96       	adiw	r26, 0x05	; 5
    3770:	1c 93       	st	X, r17
    3772:	15 97       	sbiw	r26, 0x05	; 5
    3774:	16 81       	ldd	r17, Z+6	; 0x06
    3776:	18 2b       	or	r17, r24
    3778:	16 96       	adiw	r26, 0x06	; 6
    377a:	1c 93       	st	X, r17
    377c:	16 97       	sbiw	r26, 0x06	; 6
    377e:	e7 81       	ldd	r30, Z+7	; 0x07
    3780:	8e 2f       	mov	r24, r30
    3782:	89 2b       	or	r24, r25
    3784:	17 96       	adiw	r26, 0x07	; 7
    3786:	8c 93       	st	X, r24
	Local_u64Check |= ((u64)DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT) << 12);
    3788:	82 e0       	ldi	r24, 0x02	; 2
    378a:	64 e0       	ldi	r22, 0x04	; 4
    378c:	41 e0       	ldi	r20, 0x01	; 1
    378e:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    3792:	a8 2e       	mov	r10, r24
    3794:	bb 24       	eor	r11, r11
    3796:	cc 24       	eor	r12, r12
    3798:	dd 24       	eor	r13, r13
    379a:	ee 24       	eor	r14, r14
    379c:	ff 24       	eor	r15, r15
    379e:	87 01       	movw	r16, r14
    37a0:	2a 2d       	mov	r18, r10
    37a2:	3b 2d       	mov	r19, r11
    37a4:	4c 2d       	mov	r20, r12
    37a6:	5d 2d       	mov	r21, r13
    37a8:	6e 2d       	mov	r22, r14
    37aa:	7f 2d       	mov	r23, r15
    37ac:	80 2f       	mov	r24, r16
    37ae:	91 2f       	mov	r25, r17
    37b0:	0c e0       	ldi	r16, 0x0C	; 12
    37b2:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    37b6:	a2 2e       	mov	r10, r18
    37b8:	b3 2e       	mov	r11, r19
    37ba:	c4 2e       	mov	r12, r20
    37bc:	d5 2e       	mov	r13, r21
    37be:	e6 2e       	mov	r14, r22
    37c0:	f7 2e       	mov	r15, r23
    37c2:	08 2f       	mov	r16, r24
    37c4:	19 2f       	mov	r17, r25
    37c6:	2a 2d       	mov	r18, r10
    37c8:	3b 2d       	mov	r19, r11
    37ca:	4c 2d       	mov	r20, r12
    37cc:	5d 2d       	mov	r21, r13
    37ce:	6e 2d       	mov	r22, r14
    37d0:	7f 2d       	mov	r23, r15
    37d2:	80 2f       	mov	r24, r16
    37d4:	91 2f       	mov	r25, r17
    37d6:	de 01       	movw	r26, r28
    37d8:	da 96       	adiw	r26, 0x3a	; 58
    37da:	fe 01       	movw	r30, r28
    37dc:	fa 96       	adiw	r30, 0x3a	; 58
    37de:	10 81       	ld	r17, Z
    37e0:	12 2b       	or	r17, r18
    37e2:	1c 93       	st	X, r17
    37e4:	11 81       	ldd	r17, Z+1	; 0x01
    37e6:	13 2b       	or	r17, r19
    37e8:	11 96       	adiw	r26, 0x01	; 1
    37ea:	1c 93       	st	X, r17
    37ec:	11 97       	sbiw	r26, 0x01	; 1
    37ee:	12 81       	ldd	r17, Z+2	; 0x02
    37f0:	14 2b       	or	r17, r20
    37f2:	12 96       	adiw	r26, 0x02	; 2
    37f4:	1c 93       	st	X, r17
    37f6:	12 97       	sbiw	r26, 0x02	; 2
    37f8:	13 81       	ldd	r17, Z+3	; 0x03
    37fa:	15 2b       	or	r17, r21
    37fc:	13 96       	adiw	r26, 0x03	; 3
    37fe:	1c 93       	st	X, r17
    3800:	13 97       	sbiw	r26, 0x03	; 3
    3802:	14 81       	ldd	r17, Z+4	; 0x04
    3804:	16 2b       	or	r17, r22
    3806:	14 96       	adiw	r26, 0x04	; 4
    3808:	1c 93       	st	X, r17
    380a:	14 97       	sbiw	r26, 0x04	; 4
    380c:	15 81       	ldd	r17, Z+5	; 0x05
    380e:	17 2b       	or	r17, r23
    3810:	15 96       	adiw	r26, 0x05	; 5
    3812:	1c 93       	st	X, r17
    3814:	15 97       	sbiw	r26, 0x05	; 5
    3816:	16 81       	ldd	r17, Z+6	; 0x06
    3818:	18 2b       	or	r17, r24
    381a:	16 96       	adiw	r26, 0x06	; 6
    381c:	1c 93       	st	X, r17
    381e:	16 97       	sbiw	r26, 0x06	; 6
    3820:	e7 81       	ldd	r30, Z+7	; 0x07
    3822:	8e 2f       	mov	r24, r30
    3824:	89 2b       	or	r24, r25
    3826:	17 96       	adiw	r26, 0x07	; 7
    3828:	8c 93       	st	X, r24
	Local_u64Check |= ((u64)DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT) << 15);
    382a:	82 e0       	ldi	r24, 0x02	; 2
    382c:	65 e0       	ldi	r22, 0x05	; 5
    382e:	41 e0       	ldi	r20, 0x01	; 1
    3830:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    3834:	a8 2e       	mov	r10, r24
    3836:	bb 24       	eor	r11, r11
    3838:	cc 24       	eor	r12, r12
    383a:	dd 24       	eor	r13, r13
    383c:	ee 24       	eor	r14, r14
    383e:	ff 24       	eor	r15, r15
    3840:	87 01       	movw	r16, r14
    3842:	2a 2d       	mov	r18, r10
    3844:	3b 2d       	mov	r19, r11
    3846:	4c 2d       	mov	r20, r12
    3848:	5d 2d       	mov	r21, r13
    384a:	6e 2d       	mov	r22, r14
    384c:	7f 2d       	mov	r23, r15
    384e:	80 2f       	mov	r24, r16
    3850:	91 2f       	mov	r25, r17
    3852:	0f e0       	ldi	r16, 0x0F	; 15
    3854:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    3858:	a2 2e       	mov	r10, r18
    385a:	b3 2e       	mov	r11, r19
    385c:	c4 2e       	mov	r12, r20
    385e:	d5 2e       	mov	r13, r21
    3860:	e6 2e       	mov	r14, r22
    3862:	f7 2e       	mov	r15, r23
    3864:	08 2f       	mov	r16, r24
    3866:	19 2f       	mov	r17, r25
    3868:	2a 2d       	mov	r18, r10
    386a:	3b 2d       	mov	r19, r11
    386c:	4c 2d       	mov	r20, r12
    386e:	5d 2d       	mov	r21, r13
    3870:	6e 2d       	mov	r22, r14
    3872:	7f 2d       	mov	r23, r15
    3874:	80 2f       	mov	r24, r16
    3876:	91 2f       	mov	r25, r17
    3878:	de 01       	movw	r26, r28
    387a:	da 96       	adiw	r26, 0x3a	; 58
    387c:	fe 01       	movw	r30, r28
    387e:	fa 96       	adiw	r30, 0x3a	; 58
    3880:	10 81       	ld	r17, Z
    3882:	12 2b       	or	r17, r18
    3884:	1c 93       	st	X, r17
    3886:	11 81       	ldd	r17, Z+1	; 0x01
    3888:	13 2b       	or	r17, r19
    388a:	11 96       	adiw	r26, 0x01	; 1
    388c:	1c 93       	st	X, r17
    388e:	11 97       	sbiw	r26, 0x01	; 1
    3890:	12 81       	ldd	r17, Z+2	; 0x02
    3892:	14 2b       	or	r17, r20
    3894:	12 96       	adiw	r26, 0x02	; 2
    3896:	1c 93       	st	X, r17
    3898:	12 97       	sbiw	r26, 0x02	; 2
    389a:	13 81       	ldd	r17, Z+3	; 0x03
    389c:	15 2b       	or	r17, r21
    389e:	13 96       	adiw	r26, 0x03	; 3
    38a0:	1c 93       	st	X, r17
    38a2:	13 97       	sbiw	r26, 0x03	; 3
    38a4:	14 81       	ldd	r17, Z+4	; 0x04
    38a6:	16 2b       	or	r17, r22
    38a8:	14 96       	adiw	r26, 0x04	; 4
    38aa:	1c 93       	st	X, r17
    38ac:	14 97       	sbiw	r26, 0x04	; 4
    38ae:	15 81       	ldd	r17, Z+5	; 0x05
    38b0:	17 2b       	or	r17, r23
    38b2:	15 96       	adiw	r26, 0x05	; 5
    38b4:	1c 93       	st	X, r17
    38b6:	15 97       	sbiw	r26, 0x05	; 5
    38b8:	16 81       	ldd	r17, Z+6	; 0x06
    38ba:	18 2b       	or	r17, r24
    38bc:	16 96       	adiw	r26, 0x06	; 6
    38be:	1c 93       	st	X, r17
    38c0:	16 97       	sbiw	r26, 0x06	; 6
    38c2:	e7 81       	ldd	r30, Z+7	; 0x07
    38c4:	8e 2f       	mov	r24, r30
    38c6:	89 2b       	or	r24, r25
    38c8:	17 96       	adiw	r26, 0x07	; 7
    38ca:	8c 93       	st	X, r24
	Local_u64Check |= ((u64)DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT) << 18);
    38cc:	82 e0       	ldi	r24, 0x02	; 2
    38ce:	66 e0       	ldi	r22, 0x06	; 6
    38d0:	41 e0       	ldi	r20, 0x01	; 1
    38d2:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    38d6:	a8 2e       	mov	r10, r24
    38d8:	bb 24       	eor	r11, r11
    38da:	cc 24       	eor	r12, r12
    38dc:	dd 24       	eor	r13, r13
    38de:	ee 24       	eor	r14, r14
    38e0:	ff 24       	eor	r15, r15
    38e2:	87 01       	movw	r16, r14
    38e4:	2a 2d       	mov	r18, r10
    38e6:	3b 2d       	mov	r19, r11
    38e8:	4c 2d       	mov	r20, r12
    38ea:	5d 2d       	mov	r21, r13
    38ec:	6e 2d       	mov	r22, r14
    38ee:	7f 2d       	mov	r23, r15
    38f0:	80 2f       	mov	r24, r16
    38f2:	91 2f       	mov	r25, r17
    38f4:	02 e1       	ldi	r16, 0x12	; 18
    38f6:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    38fa:	a2 2e       	mov	r10, r18
    38fc:	b3 2e       	mov	r11, r19
    38fe:	c4 2e       	mov	r12, r20
    3900:	d5 2e       	mov	r13, r21
    3902:	e6 2e       	mov	r14, r22
    3904:	f7 2e       	mov	r15, r23
    3906:	08 2f       	mov	r16, r24
    3908:	19 2f       	mov	r17, r25
    390a:	2a 2d       	mov	r18, r10
    390c:	3b 2d       	mov	r19, r11
    390e:	4c 2d       	mov	r20, r12
    3910:	5d 2d       	mov	r21, r13
    3912:	6e 2d       	mov	r22, r14
    3914:	7f 2d       	mov	r23, r15
    3916:	80 2f       	mov	r24, r16
    3918:	91 2f       	mov	r25, r17
    391a:	de 01       	movw	r26, r28
    391c:	da 96       	adiw	r26, 0x3a	; 58
    391e:	fe 01       	movw	r30, r28
    3920:	fa 96       	adiw	r30, 0x3a	; 58
    3922:	10 81       	ld	r17, Z
    3924:	12 2b       	or	r17, r18
    3926:	1c 93       	st	X, r17
    3928:	11 81       	ldd	r17, Z+1	; 0x01
    392a:	13 2b       	or	r17, r19
    392c:	11 96       	adiw	r26, 0x01	; 1
    392e:	1c 93       	st	X, r17
    3930:	11 97       	sbiw	r26, 0x01	; 1
    3932:	12 81       	ldd	r17, Z+2	; 0x02
    3934:	14 2b       	or	r17, r20
    3936:	12 96       	adiw	r26, 0x02	; 2
    3938:	1c 93       	st	X, r17
    393a:	12 97       	sbiw	r26, 0x02	; 2
    393c:	13 81       	ldd	r17, Z+3	; 0x03
    393e:	15 2b       	or	r17, r21
    3940:	13 96       	adiw	r26, 0x03	; 3
    3942:	1c 93       	st	X, r17
    3944:	13 97       	sbiw	r26, 0x03	; 3
    3946:	14 81       	ldd	r17, Z+4	; 0x04
    3948:	16 2b       	or	r17, r22
    394a:	14 96       	adiw	r26, 0x04	; 4
    394c:	1c 93       	st	X, r17
    394e:	14 97       	sbiw	r26, 0x04	; 4
    3950:	15 81       	ldd	r17, Z+5	; 0x05
    3952:	17 2b       	or	r17, r23
    3954:	15 96       	adiw	r26, 0x05	; 5
    3956:	1c 93       	st	X, r17
    3958:	15 97       	sbiw	r26, 0x05	; 5
    395a:	16 81       	ldd	r17, Z+6	; 0x06
    395c:	18 2b       	or	r17, r24
    395e:	16 96       	adiw	r26, 0x06	; 6
    3960:	1c 93       	st	X, r17
    3962:	16 97       	sbiw	r26, 0x06	; 6
    3964:	e7 81       	ldd	r30, Z+7	; 0x07
    3966:	8e 2f       	mov	r24, r30
    3968:	89 2b       	or	r24, r25
    396a:	17 96       	adiw	r26, 0x07	; 7
    396c:	8c 93       	st	X, r24
	}

#elif  LCD_MODE == FOUR_BIT

	// Function Set
	Local_u64Check |= ((u64)LCD_inenuSendCommand(0x20) << 21);
    396e:	80 e2       	ldi	r24, 0x20	; 32
    3970:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <LCD_inenuSendCommand>
    3974:	a8 2e       	mov	r10, r24
    3976:	bb 24       	eor	r11, r11
    3978:	cc 24       	eor	r12, r12
    397a:	dd 24       	eor	r13, r13
    397c:	ee 24       	eor	r14, r14
    397e:	ff 24       	eor	r15, r15
    3980:	87 01       	movw	r16, r14
    3982:	2a 2d       	mov	r18, r10
    3984:	3b 2d       	mov	r19, r11
    3986:	4c 2d       	mov	r20, r12
    3988:	5d 2d       	mov	r21, r13
    398a:	6e 2d       	mov	r22, r14
    398c:	7f 2d       	mov	r23, r15
    398e:	80 2f       	mov	r24, r16
    3990:	91 2f       	mov	r25, r17
    3992:	05 e1       	ldi	r16, 0x15	; 21
    3994:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    3998:	a2 2e       	mov	r10, r18
    399a:	b3 2e       	mov	r11, r19
    399c:	c4 2e       	mov	r12, r20
    399e:	d5 2e       	mov	r13, r21
    39a0:	e6 2e       	mov	r14, r22
    39a2:	f7 2e       	mov	r15, r23
    39a4:	08 2f       	mov	r16, r24
    39a6:	19 2f       	mov	r17, r25
    39a8:	2a 2d       	mov	r18, r10
    39aa:	3b 2d       	mov	r19, r11
    39ac:	4c 2d       	mov	r20, r12
    39ae:	5d 2d       	mov	r21, r13
    39b0:	6e 2d       	mov	r22, r14
    39b2:	7f 2d       	mov	r23, r15
    39b4:	80 2f       	mov	r24, r16
    39b6:	91 2f       	mov	r25, r17
    39b8:	de 01       	movw	r26, r28
    39ba:	da 96       	adiw	r26, 0x3a	; 58
    39bc:	fe 01       	movw	r30, r28
    39be:	fa 96       	adiw	r30, 0x3a	; 58
    39c0:	10 81       	ld	r17, Z
    39c2:	12 2b       	or	r17, r18
    39c4:	1c 93       	st	X, r17
    39c6:	11 81       	ldd	r17, Z+1	; 0x01
    39c8:	13 2b       	or	r17, r19
    39ca:	11 96       	adiw	r26, 0x01	; 1
    39cc:	1c 93       	st	X, r17
    39ce:	11 97       	sbiw	r26, 0x01	; 1
    39d0:	12 81       	ldd	r17, Z+2	; 0x02
    39d2:	14 2b       	or	r17, r20
    39d4:	12 96       	adiw	r26, 0x02	; 2
    39d6:	1c 93       	st	X, r17
    39d8:	12 97       	sbiw	r26, 0x02	; 2
    39da:	13 81       	ldd	r17, Z+3	; 0x03
    39dc:	15 2b       	or	r17, r21
    39de:	13 96       	adiw	r26, 0x03	; 3
    39e0:	1c 93       	st	X, r17
    39e2:	13 97       	sbiw	r26, 0x03	; 3
    39e4:	14 81       	ldd	r17, Z+4	; 0x04
    39e6:	16 2b       	or	r17, r22
    39e8:	14 96       	adiw	r26, 0x04	; 4
    39ea:	1c 93       	st	X, r17
    39ec:	14 97       	sbiw	r26, 0x04	; 4
    39ee:	15 81       	ldd	r17, Z+5	; 0x05
    39f0:	17 2b       	or	r17, r23
    39f2:	15 96       	adiw	r26, 0x05	; 5
    39f4:	1c 93       	st	X, r17
    39f6:	15 97       	sbiw	r26, 0x05	; 5
    39f8:	16 81       	ldd	r17, Z+6	; 0x06
    39fa:	18 2b       	or	r17, r24
    39fc:	16 96       	adiw	r26, 0x06	; 6
    39fe:	1c 93       	st	X, r17
    3a00:	16 97       	sbiw	r26, 0x06	; 6
    3a02:	e7 81       	ldd	r30, Z+7	; 0x07
    3a04:	8e 2f       	mov	r24, r30
    3a06:	89 2b       	or	r24, r25
    3a08:	17 96       	adiw	r26, 0x07	; 7
    3a0a:	8c 93       	st	X, r24
	Local_u64Check |= ((u64)LCD_inenuSendCommand(0x20) << 24);
    3a0c:	80 e2       	ldi	r24, 0x20	; 32
    3a0e:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <LCD_inenuSendCommand>
    3a12:	a8 2e       	mov	r10, r24
    3a14:	bb 24       	eor	r11, r11
    3a16:	cc 24       	eor	r12, r12
    3a18:	dd 24       	eor	r13, r13
    3a1a:	ee 24       	eor	r14, r14
    3a1c:	ff 24       	eor	r15, r15
    3a1e:	87 01       	movw	r16, r14
    3a20:	2a 2d       	mov	r18, r10
    3a22:	3b 2d       	mov	r19, r11
    3a24:	4c 2d       	mov	r20, r12
    3a26:	5d 2d       	mov	r21, r13
    3a28:	6e 2d       	mov	r22, r14
    3a2a:	7f 2d       	mov	r23, r15
    3a2c:	80 2f       	mov	r24, r16
    3a2e:	91 2f       	mov	r25, r17
    3a30:	08 e1       	ldi	r16, 0x18	; 24
    3a32:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    3a36:	a2 2e       	mov	r10, r18
    3a38:	b3 2e       	mov	r11, r19
    3a3a:	c4 2e       	mov	r12, r20
    3a3c:	d5 2e       	mov	r13, r21
    3a3e:	e6 2e       	mov	r14, r22
    3a40:	f7 2e       	mov	r15, r23
    3a42:	08 2f       	mov	r16, r24
    3a44:	19 2f       	mov	r17, r25
    3a46:	2a 2d       	mov	r18, r10
    3a48:	3b 2d       	mov	r19, r11
    3a4a:	4c 2d       	mov	r20, r12
    3a4c:	5d 2d       	mov	r21, r13
    3a4e:	6e 2d       	mov	r22, r14
    3a50:	7f 2d       	mov	r23, r15
    3a52:	80 2f       	mov	r24, r16
    3a54:	91 2f       	mov	r25, r17
    3a56:	de 01       	movw	r26, r28
    3a58:	da 96       	adiw	r26, 0x3a	; 58
    3a5a:	fe 01       	movw	r30, r28
    3a5c:	fa 96       	adiw	r30, 0x3a	; 58
    3a5e:	10 81       	ld	r17, Z
    3a60:	12 2b       	or	r17, r18
    3a62:	1c 93       	st	X, r17
    3a64:	11 81       	ldd	r17, Z+1	; 0x01
    3a66:	13 2b       	or	r17, r19
    3a68:	11 96       	adiw	r26, 0x01	; 1
    3a6a:	1c 93       	st	X, r17
    3a6c:	11 97       	sbiw	r26, 0x01	; 1
    3a6e:	12 81       	ldd	r17, Z+2	; 0x02
    3a70:	14 2b       	or	r17, r20
    3a72:	12 96       	adiw	r26, 0x02	; 2
    3a74:	1c 93       	st	X, r17
    3a76:	12 97       	sbiw	r26, 0x02	; 2
    3a78:	13 81       	ldd	r17, Z+3	; 0x03
    3a7a:	15 2b       	or	r17, r21
    3a7c:	13 96       	adiw	r26, 0x03	; 3
    3a7e:	1c 93       	st	X, r17
    3a80:	13 97       	sbiw	r26, 0x03	; 3
    3a82:	14 81       	ldd	r17, Z+4	; 0x04
    3a84:	16 2b       	or	r17, r22
    3a86:	14 96       	adiw	r26, 0x04	; 4
    3a88:	1c 93       	st	X, r17
    3a8a:	14 97       	sbiw	r26, 0x04	; 4
    3a8c:	15 81       	ldd	r17, Z+5	; 0x05
    3a8e:	17 2b       	or	r17, r23
    3a90:	15 96       	adiw	r26, 0x05	; 5
    3a92:	1c 93       	st	X, r17
    3a94:	15 97       	sbiw	r26, 0x05	; 5
    3a96:	16 81       	ldd	r17, Z+6	; 0x06
    3a98:	18 2b       	or	r17, r24
    3a9a:	16 96       	adiw	r26, 0x06	; 6
    3a9c:	1c 93       	st	X, r17
    3a9e:	16 97       	sbiw	r26, 0x06	; 6
    3aa0:	e7 81       	ldd	r30, Z+7	; 0x07
    3aa2:	8e 2f       	mov	r24, r30
    3aa4:	89 2b       	or	r24, r25
    3aa6:	17 96       	adiw	r26, 0x07	; 7
    3aa8:	8c 93       	st	X, r24
	Local_u64Check |= ((u64)LCD_inenuSendCommand(0x80) << 27); //2 lines, 5*7 ,4 bit mode
    3aaa:	80 e8       	ldi	r24, 0x80	; 128
    3aac:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <LCD_inenuSendCommand>
    3ab0:	a8 2e       	mov	r10, r24
    3ab2:	bb 24       	eor	r11, r11
    3ab4:	cc 24       	eor	r12, r12
    3ab6:	dd 24       	eor	r13, r13
    3ab8:	ee 24       	eor	r14, r14
    3aba:	ff 24       	eor	r15, r15
    3abc:	87 01       	movw	r16, r14
    3abe:	2a 2d       	mov	r18, r10
    3ac0:	3b 2d       	mov	r19, r11
    3ac2:	4c 2d       	mov	r20, r12
    3ac4:	5d 2d       	mov	r21, r13
    3ac6:	6e 2d       	mov	r22, r14
    3ac8:	7f 2d       	mov	r23, r15
    3aca:	80 2f       	mov	r24, r16
    3acc:	91 2f       	mov	r25, r17
    3ace:	0b e1       	ldi	r16, 0x1B	; 27
    3ad0:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    3ad4:	a2 2e       	mov	r10, r18
    3ad6:	b3 2e       	mov	r11, r19
    3ad8:	c4 2e       	mov	r12, r20
    3ada:	d5 2e       	mov	r13, r21
    3adc:	e6 2e       	mov	r14, r22
    3ade:	f7 2e       	mov	r15, r23
    3ae0:	08 2f       	mov	r16, r24
    3ae2:	19 2f       	mov	r17, r25
    3ae4:	2a 2d       	mov	r18, r10
    3ae6:	3b 2d       	mov	r19, r11
    3ae8:	4c 2d       	mov	r20, r12
    3aea:	5d 2d       	mov	r21, r13
    3aec:	6e 2d       	mov	r22, r14
    3aee:	7f 2d       	mov	r23, r15
    3af0:	80 2f       	mov	r24, r16
    3af2:	91 2f       	mov	r25, r17
    3af4:	de 01       	movw	r26, r28
    3af6:	da 96       	adiw	r26, 0x3a	; 58
    3af8:	fe 01       	movw	r30, r28
    3afa:	fa 96       	adiw	r30, 0x3a	; 58
    3afc:	10 81       	ld	r17, Z
    3afe:	12 2b       	or	r17, r18
    3b00:	1c 93       	st	X, r17
    3b02:	11 81       	ldd	r17, Z+1	; 0x01
    3b04:	13 2b       	or	r17, r19
    3b06:	11 96       	adiw	r26, 0x01	; 1
    3b08:	1c 93       	st	X, r17
    3b0a:	11 97       	sbiw	r26, 0x01	; 1
    3b0c:	12 81       	ldd	r17, Z+2	; 0x02
    3b0e:	14 2b       	or	r17, r20
    3b10:	12 96       	adiw	r26, 0x02	; 2
    3b12:	1c 93       	st	X, r17
    3b14:	12 97       	sbiw	r26, 0x02	; 2
    3b16:	13 81       	ldd	r17, Z+3	; 0x03
    3b18:	15 2b       	or	r17, r21
    3b1a:	13 96       	adiw	r26, 0x03	; 3
    3b1c:	1c 93       	st	X, r17
    3b1e:	13 97       	sbiw	r26, 0x03	; 3
    3b20:	14 81       	ldd	r17, Z+4	; 0x04
    3b22:	16 2b       	or	r17, r22
    3b24:	14 96       	adiw	r26, 0x04	; 4
    3b26:	1c 93       	st	X, r17
    3b28:	14 97       	sbiw	r26, 0x04	; 4
    3b2a:	15 81       	ldd	r17, Z+5	; 0x05
    3b2c:	17 2b       	or	r17, r23
    3b2e:	15 96       	adiw	r26, 0x05	; 5
    3b30:	1c 93       	st	X, r17
    3b32:	15 97       	sbiw	r26, 0x05	; 5
    3b34:	16 81       	ldd	r17, Z+6	; 0x06
    3b36:	18 2b       	or	r17, r24
    3b38:	16 96       	adiw	r26, 0x06	; 6
    3b3a:	1c 93       	st	X, r17
    3b3c:	16 97       	sbiw	r26, 0x06	; 6
    3b3e:	e7 81       	ldd	r30, Z+7	; 0x07
    3b40:	8e 2f       	mov	r24, r30
    3b42:	89 2b       	or	r24, r25
    3b44:	17 96       	adiw	r26, 0x07	; 7
    3b46:	8c 93       	st	X, r24
    3b48:	80 e0       	ldi	r24, 0x00	; 0
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	a0 e8       	ldi	r26, 0x80	; 128
    3b4e:	bf e3       	ldi	r27, 0x3F	; 63
    3b50:	8f a3       	std	Y+39, r24	; 0x27
    3b52:	98 a7       	std	Y+40, r25	; 0x28
    3b54:	a9 a7       	std	Y+41, r26	; 0x29
    3b56:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b58:	6f a1       	ldd	r22, Y+39	; 0x27
    3b5a:	78 a5       	ldd	r23, Y+40	; 0x28
    3b5c:	89 a5       	ldd	r24, Y+41	; 0x29
    3b5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b60:	20 e0       	ldi	r18, 0x00	; 0
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	4a e7       	ldi	r20, 0x7A	; 122
    3b66:	53 e4       	ldi	r21, 0x43	; 67
    3b68:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3b6c:	dc 01       	movw	r26, r24
    3b6e:	cb 01       	movw	r24, r22
    3b70:	8b a3       	std	Y+35, r24	; 0x23
    3b72:	9c a3       	std	Y+36, r25	; 0x24
    3b74:	ad a3       	std	Y+37, r26	; 0x25
    3b76:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3b78:	6b a1       	ldd	r22, Y+35	; 0x23
    3b7a:	7c a1       	ldd	r23, Y+36	; 0x24
    3b7c:	8d a1       	ldd	r24, Y+37	; 0x25
    3b7e:	9e a1       	ldd	r25, Y+38	; 0x26
    3b80:	20 e0       	ldi	r18, 0x00	; 0
    3b82:	30 e0       	ldi	r19, 0x00	; 0
    3b84:	40 e8       	ldi	r20, 0x80	; 128
    3b86:	5f e3       	ldi	r21, 0x3F	; 63
    3b88:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__ltsf2>
    3b8c:	88 23       	and	r24, r24
    3b8e:	2c f4       	brge	.+10     	; 0x3b9a <LCD_enuInit+0x76c>
		__ticks = 1;
    3b90:	81 e0       	ldi	r24, 0x01	; 1
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	9a a3       	std	Y+34, r25	; 0x22
    3b96:	89 a3       	std	Y+33, r24	; 0x21
    3b98:	3f c0       	rjmp	.+126    	; 0x3c18 <LCD_enuInit+0x7ea>
	else if (__tmp > 65535)
    3b9a:	6b a1       	ldd	r22, Y+35	; 0x23
    3b9c:	7c a1       	ldd	r23, Y+36	; 0x24
    3b9e:	8d a1       	ldd	r24, Y+37	; 0x25
    3ba0:	9e a1       	ldd	r25, Y+38	; 0x26
    3ba2:	20 e0       	ldi	r18, 0x00	; 0
    3ba4:	3f ef       	ldi	r19, 0xFF	; 255
    3ba6:	4f e7       	ldi	r20, 0x7F	; 127
    3ba8:	57 e4       	ldi	r21, 0x47	; 71
    3baa:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gtsf2>
    3bae:	18 16       	cp	r1, r24
    3bb0:	4c f5       	brge	.+82     	; 0x3c04 <LCD_enuInit+0x7d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bb2:	6f a1       	ldd	r22, Y+39	; 0x27
    3bb4:	78 a5       	ldd	r23, Y+40	; 0x28
    3bb6:	89 a5       	ldd	r24, Y+41	; 0x29
    3bb8:	9a a5       	ldd	r25, Y+42	; 0x2a
    3bba:	20 e0       	ldi	r18, 0x00	; 0
    3bbc:	30 e0       	ldi	r19, 0x00	; 0
    3bbe:	40 e2       	ldi	r20, 0x20	; 32
    3bc0:	51 e4       	ldi	r21, 0x41	; 65
    3bc2:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3bc6:	dc 01       	movw	r26, r24
    3bc8:	cb 01       	movw	r24, r22
    3bca:	bc 01       	movw	r22, r24
    3bcc:	cd 01       	movw	r24, r26
    3bce:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3bd2:	dc 01       	movw	r26, r24
    3bd4:	cb 01       	movw	r24, r22
    3bd6:	9a a3       	std	Y+34, r25	; 0x22
    3bd8:	89 a3       	std	Y+33, r24	; 0x21
    3bda:	0f c0       	rjmp	.+30     	; 0x3bfa <LCD_enuInit+0x7cc>
    3bdc:	89 e1       	ldi	r24, 0x19	; 25
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	98 a3       	std	Y+32, r25	; 0x20
    3be2:	8f 8f       	std	Y+31, r24	; 0x1f
    3be4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3be6:	98 a1       	ldd	r25, Y+32	; 0x20
    3be8:	01 97       	sbiw	r24, 0x01	; 1
    3bea:	f1 f7       	brne	.-4      	; 0x3be8 <LCD_enuInit+0x7ba>
    3bec:	98 a3       	std	Y+32, r25	; 0x20
    3bee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bf0:	89 a1       	ldd	r24, Y+33	; 0x21
    3bf2:	9a a1       	ldd	r25, Y+34	; 0x22
    3bf4:	01 97       	sbiw	r24, 0x01	; 1
    3bf6:	9a a3       	std	Y+34, r25	; 0x22
    3bf8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bfa:	89 a1       	ldd	r24, Y+33	; 0x21
    3bfc:	9a a1       	ldd	r25, Y+34	; 0x22
    3bfe:	00 97       	sbiw	r24, 0x00	; 0
    3c00:	69 f7       	brne	.-38     	; 0x3bdc <LCD_enuInit+0x7ae>
    3c02:	14 c0       	rjmp	.+40     	; 0x3c2c <LCD_enuInit+0x7fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c04:	6b a1       	ldd	r22, Y+35	; 0x23
    3c06:	7c a1       	ldd	r23, Y+36	; 0x24
    3c08:	8d a1       	ldd	r24, Y+37	; 0x25
    3c0a:	9e a1       	ldd	r25, Y+38	; 0x26
    3c0c:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3c10:	dc 01       	movw	r26, r24
    3c12:	cb 01       	movw	r24, r22
    3c14:	9a a3       	std	Y+34, r25	; 0x22
    3c16:	89 a3       	std	Y+33, r24	; 0x21
    3c18:	89 a1       	ldd	r24, Y+33	; 0x21
    3c1a:	9a a1       	ldd	r25, Y+34	; 0x22
    3c1c:	9e 8f       	std	Y+30, r25	; 0x1e
    3c1e:	8d 8f       	std	Y+29, r24	; 0x1d
    3c20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c22:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c24:	01 97       	sbiw	r24, 0x01	; 1
    3c26:	f1 f7       	brne	.-4      	; 0x3c24 <LCD_enuInit+0x7f6>
    3c28:	9e 8f       	std	Y+30, r25	; 0x1e
    3c2a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	//Display ON
	Local_u64Check |= ((u64)LCD_inenuSendCommand(0x00) << 30);
    3c2c:	80 e0       	ldi	r24, 0x00	; 0
    3c2e:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <LCD_inenuSendCommand>
    3c32:	a8 2e       	mov	r10, r24
    3c34:	bb 24       	eor	r11, r11
    3c36:	cc 24       	eor	r12, r12
    3c38:	dd 24       	eor	r13, r13
    3c3a:	ee 24       	eor	r14, r14
    3c3c:	ff 24       	eor	r15, r15
    3c3e:	87 01       	movw	r16, r14
    3c40:	2a 2d       	mov	r18, r10
    3c42:	3b 2d       	mov	r19, r11
    3c44:	4c 2d       	mov	r20, r12
    3c46:	5d 2d       	mov	r21, r13
    3c48:	6e 2d       	mov	r22, r14
    3c4a:	7f 2d       	mov	r23, r15
    3c4c:	80 2f       	mov	r24, r16
    3c4e:	91 2f       	mov	r25, r17
    3c50:	0e e1       	ldi	r16, 0x1E	; 30
    3c52:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    3c56:	a2 2e       	mov	r10, r18
    3c58:	b3 2e       	mov	r11, r19
    3c5a:	c4 2e       	mov	r12, r20
    3c5c:	d5 2e       	mov	r13, r21
    3c5e:	e6 2e       	mov	r14, r22
    3c60:	f7 2e       	mov	r15, r23
    3c62:	08 2f       	mov	r16, r24
    3c64:	19 2f       	mov	r17, r25
    3c66:	2a 2d       	mov	r18, r10
    3c68:	3b 2d       	mov	r19, r11
    3c6a:	4c 2d       	mov	r20, r12
    3c6c:	5d 2d       	mov	r21, r13
    3c6e:	6e 2d       	mov	r22, r14
    3c70:	7f 2d       	mov	r23, r15
    3c72:	80 2f       	mov	r24, r16
    3c74:	91 2f       	mov	r25, r17
    3c76:	de 01       	movw	r26, r28
    3c78:	da 96       	adiw	r26, 0x3a	; 58
    3c7a:	fe 01       	movw	r30, r28
    3c7c:	fa 96       	adiw	r30, 0x3a	; 58
    3c7e:	10 81       	ld	r17, Z
    3c80:	12 2b       	or	r17, r18
    3c82:	1c 93       	st	X, r17
    3c84:	11 81       	ldd	r17, Z+1	; 0x01
    3c86:	13 2b       	or	r17, r19
    3c88:	11 96       	adiw	r26, 0x01	; 1
    3c8a:	1c 93       	st	X, r17
    3c8c:	11 97       	sbiw	r26, 0x01	; 1
    3c8e:	12 81       	ldd	r17, Z+2	; 0x02
    3c90:	14 2b       	or	r17, r20
    3c92:	12 96       	adiw	r26, 0x02	; 2
    3c94:	1c 93       	st	X, r17
    3c96:	12 97       	sbiw	r26, 0x02	; 2
    3c98:	13 81       	ldd	r17, Z+3	; 0x03
    3c9a:	15 2b       	or	r17, r21
    3c9c:	13 96       	adiw	r26, 0x03	; 3
    3c9e:	1c 93       	st	X, r17
    3ca0:	13 97       	sbiw	r26, 0x03	; 3
    3ca2:	14 81       	ldd	r17, Z+4	; 0x04
    3ca4:	16 2b       	or	r17, r22
    3ca6:	14 96       	adiw	r26, 0x04	; 4
    3ca8:	1c 93       	st	X, r17
    3caa:	14 97       	sbiw	r26, 0x04	; 4
    3cac:	15 81       	ldd	r17, Z+5	; 0x05
    3cae:	17 2b       	or	r17, r23
    3cb0:	15 96       	adiw	r26, 0x05	; 5
    3cb2:	1c 93       	st	X, r17
    3cb4:	15 97       	sbiw	r26, 0x05	; 5
    3cb6:	16 81       	ldd	r17, Z+6	; 0x06
    3cb8:	18 2b       	or	r17, r24
    3cba:	16 96       	adiw	r26, 0x06	; 6
    3cbc:	1c 93       	st	X, r17
    3cbe:	16 97       	sbiw	r26, 0x06	; 6
    3cc0:	e7 81       	ldd	r30, Z+7	; 0x07
    3cc2:	8e 2f       	mov	r24, r30
    3cc4:	89 2b       	or	r24, r25
    3cc6:	17 96       	adiw	r26, 0x07	; 7
    3cc8:	8c 93       	st	X, r24
	Local_u64Check |= ((u64)LCD_inenuSendCommand(0xf0) << 33); //cursor appear, blink, LCD ON
    3cca:	80 ef       	ldi	r24, 0xF0	; 240
    3ccc:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <LCD_inenuSendCommand>
    3cd0:	a8 2e       	mov	r10, r24
    3cd2:	bb 24       	eor	r11, r11
    3cd4:	cc 24       	eor	r12, r12
    3cd6:	dd 24       	eor	r13, r13
    3cd8:	ee 24       	eor	r14, r14
    3cda:	ff 24       	eor	r15, r15
    3cdc:	87 01       	movw	r16, r14
    3cde:	2a 2d       	mov	r18, r10
    3ce0:	3b 2d       	mov	r19, r11
    3ce2:	4c 2d       	mov	r20, r12
    3ce4:	5d 2d       	mov	r21, r13
    3ce6:	6e 2d       	mov	r22, r14
    3ce8:	7f 2d       	mov	r23, r15
    3cea:	80 2f       	mov	r24, r16
    3cec:	91 2f       	mov	r25, r17
    3cee:	01 e2       	ldi	r16, 0x21	; 33
    3cf0:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    3cf4:	a2 2e       	mov	r10, r18
    3cf6:	b3 2e       	mov	r11, r19
    3cf8:	c4 2e       	mov	r12, r20
    3cfa:	d5 2e       	mov	r13, r21
    3cfc:	e6 2e       	mov	r14, r22
    3cfe:	f7 2e       	mov	r15, r23
    3d00:	08 2f       	mov	r16, r24
    3d02:	19 2f       	mov	r17, r25
    3d04:	2a 2d       	mov	r18, r10
    3d06:	3b 2d       	mov	r19, r11
    3d08:	4c 2d       	mov	r20, r12
    3d0a:	5d 2d       	mov	r21, r13
    3d0c:	6e 2d       	mov	r22, r14
    3d0e:	7f 2d       	mov	r23, r15
    3d10:	80 2f       	mov	r24, r16
    3d12:	91 2f       	mov	r25, r17
    3d14:	de 01       	movw	r26, r28
    3d16:	da 96       	adiw	r26, 0x3a	; 58
    3d18:	fe 01       	movw	r30, r28
    3d1a:	fa 96       	adiw	r30, 0x3a	; 58
    3d1c:	10 81       	ld	r17, Z
    3d1e:	12 2b       	or	r17, r18
    3d20:	1c 93       	st	X, r17
    3d22:	11 81       	ldd	r17, Z+1	; 0x01
    3d24:	13 2b       	or	r17, r19
    3d26:	11 96       	adiw	r26, 0x01	; 1
    3d28:	1c 93       	st	X, r17
    3d2a:	11 97       	sbiw	r26, 0x01	; 1
    3d2c:	12 81       	ldd	r17, Z+2	; 0x02
    3d2e:	14 2b       	or	r17, r20
    3d30:	12 96       	adiw	r26, 0x02	; 2
    3d32:	1c 93       	st	X, r17
    3d34:	12 97       	sbiw	r26, 0x02	; 2
    3d36:	13 81       	ldd	r17, Z+3	; 0x03
    3d38:	15 2b       	or	r17, r21
    3d3a:	13 96       	adiw	r26, 0x03	; 3
    3d3c:	1c 93       	st	X, r17
    3d3e:	13 97       	sbiw	r26, 0x03	; 3
    3d40:	14 81       	ldd	r17, Z+4	; 0x04
    3d42:	16 2b       	or	r17, r22
    3d44:	14 96       	adiw	r26, 0x04	; 4
    3d46:	1c 93       	st	X, r17
    3d48:	14 97       	sbiw	r26, 0x04	; 4
    3d4a:	15 81       	ldd	r17, Z+5	; 0x05
    3d4c:	17 2b       	or	r17, r23
    3d4e:	15 96       	adiw	r26, 0x05	; 5
    3d50:	1c 93       	st	X, r17
    3d52:	15 97       	sbiw	r26, 0x05	; 5
    3d54:	16 81       	ldd	r17, Z+6	; 0x06
    3d56:	18 2b       	or	r17, r24
    3d58:	16 96       	adiw	r26, 0x06	; 6
    3d5a:	1c 93       	st	X, r17
    3d5c:	16 97       	sbiw	r26, 0x06	; 6
    3d5e:	e7 81       	ldd	r30, Z+7	; 0x07
    3d60:	8e 2f       	mov	r24, r30
    3d62:	89 2b       	or	r24, r25
    3d64:	17 96       	adiw	r26, 0x07	; 7
    3d66:	8c 93       	st	X, r24
    3d68:	80 e0       	ldi	r24, 0x00	; 0
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	a0 e8       	ldi	r26, 0x80	; 128
    3d6e:	bf e3       	ldi	r27, 0x3F	; 63
    3d70:	89 8f       	std	Y+25, r24	; 0x19
    3d72:	9a 8f       	std	Y+26, r25	; 0x1a
    3d74:	ab 8f       	std	Y+27, r26	; 0x1b
    3d76:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d78:	69 8d       	ldd	r22, Y+25	; 0x19
    3d7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d80:	20 e0       	ldi	r18, 0x00	; 0
    3d82:	30 e0       	ldi	r19, 0x00	; 0
    3d84:	4a e7       	ldi	r20, 0x7A	; 122
    3d86:	53 e4       	ldi	r21, 0x43	; 67
    3d88:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3d8c:	dc 01       	movw	r26, r24
    3d8e:	cb 01       	movw	r24, r22
    3d90:	8d 8b       	std	Y+21, r24	; 0x15
    3d92:	9e 8b       	std	Y+22, r25	; 0x16
    3d94:	af 8b       	std	Y+23, r26	; 0x17
    3d96:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d98:	6d 89       	ldd	r22, Y+21	; 0x15
    3d9a:	7e 89       	ldd	r23, Y+22	; 0x16
    3d9c:	8f 89       	ldd	r24, Y+23	; 0x17
    3d9e:	98 8d       	ldd	r25, Y+24	; 0x18
    3da0:	20 e0       	ldi	r18, 0x00	; 0
    3da2:	30 e0       	ldi	r19, 0x00	; 0
    3da4:	40 e8       	ldi	r20, 0x80	; 128
    3da6:	5f e3       	ldi	r21, 0x3F	; 63
    3da8:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__ltsf2>
    3dac:	88 23       	and	r24, r24
    3dae:	2c f4       	brge	.+10     	; 0x3dba <LCD_enuInit+0x98c>
		__ticks = 1;
    3db0:	81 e0       	ldi	r24, 0x01	; 1
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	9c 8b       	std	Y+20, r25	; 0x14
    3db6:	8b 8b       	std	Y+19, r24	; 0x13
    3db8:	3f c0       	rjmp	.+126    	; 0x3e38 <LCD_enuInit+0xa0a>
	else if (__tmp > 65535)
    3dba:	6d 89       	ldd	r22, Y+21	; 0x15
    3dbc:	7e 89       	ldd	r23, Y+22	; 0x16
    3dbe:	8f 89       	ldd	r24, Y+23	; 0x17
    3dc0:	98 8d       	ldd	r25, Y+24	; 0x18
    3dc2:	20 e0       	ldi	r18, 0x00	; 0
    3dc4:	3f ef       	ldi	r19, 0xFF	; 255
    3dc6:	4f e7       	ldi	r20, 0x7F	; 127
    3dc8:	57 e4       	ldi	r21, 0x47	; 71
    3dca:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gtsf2>
    3dce:	18 16       	cp	r1, r24
    3dd0:	4c f5       	brge	.+82     	; 0x3e24 <LCD_enuInit+0x9f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dd2:	69 8d       	ldd	r22, Y+25	; 0x19
    3dd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3dd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3dd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3dda:	20 e0       	ldi	r18, 0x00	; 0
    3ddc:	30 e0       	ldi	r19, 0x00	; 0
    3dde:	40 e2       	ldi	r20, 0x20	; 32
    3de0:	51 e4       	ldi	r21, 0x41	; 65
    3de2:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3de6:	dc 01       	movw	r26, r24
    3de8:	cb 01       	movw	r24, r22
    3dea:	bc 01       	movw	r22, r24
    3dec:	cd 01       	movw	r24, r26
    3dee:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3df2:	dc 01       	movw	r26, r24
    3df4:	cb 01       	movw	r24, r22
    3df6:	9c 8b       	std	Y+20, r25	; 0x14
    3df8:	8b 8b       	std	Y+19, r24	; 0x13
    3dfa:	0f c0       	rjmp	.+30     	; 0x3e1a <LCD_enuInit+0x9ec>
    3dfc:	89 e1       	ldi	r24, 0x19	; 25
    3dfe:	90 e0       	ldi	r25, 0x00	; 0
    3e00:	9a 8b       	std	Y+18, r25	; 0x12
    3e02:	89 8b       	std	Y+17, r24	; 0x11
    3e04:	89 89       	ldd	r24, Y+17	; 0x11
    3e06:	9a 89       	ldd	r25, Y+18	; 0x12
    3e08:	01 97       	sbiw	r24, 0x01	; 1
    3e0a:	f1 f7       	brne	.-4      	; 0x3e08 <LCD_enuInit+0x9da>
    3e0c:	9a 8b       	std	Y+18, r25	; 0x12
    3e0e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e10:	8b 89       	ldd	r24, Y+19	; 0x13
    3e12:	9c 89       	ldd	r25, Y+20	; 0x14
    3e14:	01 97       	sbiw	r24, 0x01	; 1
    3e16:	9c 8b       	std	Y+20, r25	; 0x14
    3e18:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e1a:	8b 89       	ldd	r24, Y+19	; 0x13
    3e1c:	9c 89       	ldd	r25, Y+20	; 0x14
    3e1e:	00 97       	sbiw	r24, 0x00	; 0
    3e20:	69 f7       	brne	.-38     	; 0x3dfc <LCD_enuInit+0x9ce>
    3e22:	14 c0       	rjmp	.+40     	; 0x3e4c <LCD_enuInit+0xa1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e24:	6d 89       	ldd	r22, Y+21	; 0x15
    3e26:	7e 89       	ldd	r23, Y+22	; 0x16
    3e28:	8f 89       	ldd	r24, Y+23	; 0x17
    3e2a:	98 8d       	ldd	r25, Y+24	; 0x18
    3e2c:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3e30:	dc 01       	movw	r26, r24
    3e32:	cb 01       	movw	r24, r22
    3e34:	9c 8b       	std	Y+20, r25	; 0x14
    3e36:	8b 8b       	std	Y+19, r24	; 0x13
    3e38:	8b 89       	ldd	r24, Y+19	; 0x13
    3e3a:	9c 89       	ldd	r25, Y+20	; 0x14
    3e3c:	98 8b       	std	Y+16, r25	; 0x10
    3e3e:	8f 87       	std	Y+15, r24	; 0x0f
    3e40:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e42:	98 89       	ldd	r25, Y+16	; 0x10
    3e44:	01 97       	sbiw	r24, 0x01	; 1
    3e46:	f1 f7       	brne	.-4      	; 0x3e44 <LCD_enuInit+0xa16>
    3e48:	98 8b       	std	Y+16, r25	; 0x10
    3e4a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	//Display clear
	Local_u64Check |= ((u64)LCD_inenuSendCommand(0x00) << 36);
    3e4c:	80 e0       	ldi	r24, 0x00	; 0
    3e4e:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <LCD_inenuSendCommand>
    3e52:	a8 2e       	mov	r10, r24
    3e54:	bb 24       	eor	r11, r11
    3e56:	cc 24       	eor	r12, r12
    3e58:	dd 24       	eor	r13, r13
    3e5a:	ee 24       	eor	r14, r14
    3e5c:	ff 24       	eor	r15, r15
    3e5e:	87 01       	movw	r16, r14
    3e60:	2a 2d       	mov	r18, r10
    3e62:	3b 2d       	mov	r19, r11
    3e64:	4c 2d       	mov	r20, r12
    3e66:	5d 2d       	mov	r21, r13
    3e68:	6e 2d       	mov	r22, r14
    3e6a:	7f 2d       	mov	r23, r15
    3e6c:	80 2f       	mov	r24, r16
    3e6e:	91 2f       	mov	r25, r17
    3e70:	04 e2       	ldi	r16, 0x24	; 36
    3e72:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    3e76:	a2 2e       	mov	r10, r18
    3e78:	b3 2e       	mov	r11, r19
    3e7a:	c4 2e       	mov	r12, r20
    3e7c:	d5 2e       	mov	r13, r21
    3e7e:	e6 2e       	mov	r14, r22
    3e80:	f7 2e       	mov	r15, r23
    3e82:	08 2f       	mov	r16, r24
    3e84:	19 2f       	mov	r17, r25
    3e86:	2a 2d       	mov	r18, r10
    3e88:	3b 2d       	mov	r19, r11
    3e8a:	4c 2d       	mov	r20, r12
    3e8c:	5d 2d       	mov	r21, r13
    3e8e:	6e 2d       	mov	r22, r14
    3e90:	7f 2d       	mov	r23, r15
    3e92:	80 2f       	mov	r24, r16
    3e94:	91 2f       	mov	r25, r17
    3e96:	de 01       	movw	r26, r28
    3e98:	da 96       	adiw	r26, 0x3a	; 58
    3e9a:	fe 01       	movw	r30, r28
    3e9c:	fa 96       	adiw	r30, 0x3a	; 58
    3e9e:	10 81       	ld	r17, Z
    3ea0:	12 2b       	or	r17, r18
    3ea2:	1c 93       	st	X, r17
    3ea4:	11 81       	ldd	r17, Z+1	; 0x01
    3ea6:	13 2b       	or	r17, r19
    3ea8:	11 96       	adiw	r26, 0x01	; 1
    3eaa:	1c 93       	st	X, r17
    3eac:	11 97       	sbiw	r26, 0x01	; 1
    3eae:	12 81       	ldd	r17, Z+2	; 0x02
    3eb0:	14 2b       	or	r17, r20
    3eb2:	12 96       	adiw	r26, 0x02	; 2
    3eb4:	1c 93       	st	X, r17
    3eb6:	12 97       	sbiw	r26, 0x02	; 2
    3eb8:	13 81       	ldd	r17, Z+3	; 0x03
    3eba:	15 2b       	or	r17, r21
    3ebc:	13 96       	adiw	r26, 0x03	; 3
    3ebe:	1c 93       	st	X, r17
    3ec0:	13 97       	sbiw	r26, 0x03	; 3
    3ec2:	14 81       	ldd	r17, Z+4	; 0x04
    3ec4:	16 2b       	or	r17, r22
    3ec6:	14 96       	adiw	r26, 0x04	; 4
    3ec8:	1c 93       	st	X, r17
    3eca:	14 97       	sbiw	r26, 0x04	; 4
    3ecc:	15 81       	ldd	r17, Z+5	; 0x05
    3ece:	17 2b       	or	r17, r23
    3ed0:	15 96       	adiw	r26, 0x05	; 5
    3ed2:	1c 93       	st	X, r17
    3ed4:	15 97       	sbiw	r26, 0x05	; 5
    3ed6:	16 81       	ldd	r17, Z+6	; 0x06
    3ed8:	18 2b       	or	r17, r24
    3eda:	16 96       	adiw	r26, 0x06	; 6
    3edc:	1c 93       	st	X, r17
    3ede:	16 97       	sbiw	r26, 0x06	; 6
    3ee0:	e7 81       	ldd	r30, Z+7	; 0x07
    3ee2:	8e 2f       	mov	r24, r30
    3ee4:	89 2b       	or	r24, r25
    3ee6:	17 96       	adiw	r26, 0x07	; 7
    3ee8:	8c 93       	st	X, r24
	Local_u64Check |= ((u64)LCD_inenuSendCommand(0x10) << 39);
    3eea:	80 e1       	ldi	r24, 0x10	; 16
    3eec:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <LCD_inenuSendCommand>
    3ef0:	a8 2e       	mov	r10, r24
    3ef2:	bb 24       	eor	r11, r11
    3ef4:	cc 24       	eor	r12, r12
    3ef6:	dd 24       	eor	r13, r13
    3ef8:	ee 24       	eor	r14, r14
    3efa:	ff 24       	eor	r15, r15
    3efc:	87 01       	movw	r16, r14
    3efe:	2a 2d       	mov	r18, r10
    3f00:	3b 2d       	mov	r19, r11
    3f02:	4c 2d       	mov	r20, r12
    3f04:	5d 2d       	mov	r21, r13
    3f06:	6e 2d       	mov	r22, r14
    3f08:	7f 2d       	mov	r23, r15
    3f0a:	80 2f       	mov	r24, r16
    3f0c:	91 2f       	mov	r25, r17
    3f0e:	07 e2       	ldi	r16, 0x27	; 39
    3f10:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    3f14:	a2 2e       	mov	r10, r18
    3f16:	b3 2e       	mov	r11, r19
    3f18:	c4 2e       	mov	r12, r20
    3f1a:	d5 2e       	mov	r13, r21
    3f1c:	e6 2e       	mov	r14, r22
    3f1e:	f7 2e       	mov	r15, r23
    3f20:	08 2f       	mov	r16, r24
    3f22:	19 2f       	mov	r17, r25
    3f24:	2a 2d       	mov	r18, r10
    3f26:	3b 2d       	mov	r19, r11
    3f28:	4c 2d       	mov	r20, r12
    3f2a:	5d 2d       	mov	r21, r13
    3f2c:	6e 2d       	mov	r22, r14
    3f2e:	7f 2d       	mov	r23, r15
    3f30:	80 2f       	mov	r24, r16
    3f32:	91 2f       	mov	r25, r17
    3f34:	de 01       	movw	r26, r28
    3f36:	da 96       	adiw	r26, 0x3a	; 58
    3f38:	fe 01       	movw	r30, r28
    3f3a:	fa 96       	adiw	r30, 0x3a	; 58
    3f3c:	10 81       	ld	r17, Z
    3f3e:	12 2b       	or	r17, r18
    3f40:	1c 93       	st	X, r17
    3f42:	11 81       	ldd	r17, Z+1	; 0x01
    3f44:	13 2b       	or	r17, r19
    3f46:	11 96       	adiw	r26, 0x01	; 1
    3f48:	1c 93       	st	X, r17
    3f4a:	11 97       	sbiw	r26, 0x01	; 1
    3f4c:	12 81       	ldd	r17, Z+2	; 0x02
    3f4e:	14 2b       	or	r17, r20
    3f50:	12 96       	adiw	r26, 0x02	; 2
    3f52:	1c 93       	st	X, r17
    3f54:	12 97       	sbiw	r26, 0x02	; 2
    3f56:	13 81       	ldd	r17, Z+3	; 0x03
    3f58:	15 2b       	or	r17, r21
    3f5a:	13 96       	adiw	r26, 0x03	; 3
    3f5c:	1c 93       	st	X, r17
    3f5e:	13 97       	sbiw	r26, 0x03	; 3
    3f60:	14 81       	ldd	r17, Z+4	; 0x04
    3f62:	16 2b       	or	r17, r22
    3f64:	14 96       	adiw	r26, 0x04	; 4
    3f66:	1c 93       	st	X, r17
    3f68:	14 97       	sbiw	r26, 0x04	; 4
    3f6a:	15 81       	ldd	r17, Z+5	; 0x05
    3f6c:	17 2b       	or	r17, r23
    3f6e:	15 96       	adiw	r26, 0x05	; 5
    3f70:	1c 93       	st	X, r17
    3f72:	15 97       	sbiw	r26, 0x05	; 5
    3f74:	16 81       	ldd	r17, Z+6	; 0x06
    3f76:	18 2b       	or	r17, r24
    3f78:	16 96       	adiw	r26, 0x06	; 6
    3f7a:	1c 93       	st	X, r17
    3f7c:	16 97       	sbiw	r26, 0x06	; 6
    3f7e:	e7 81       	ldd	r30, Z+7	; 0x07
    3f80:	8e 2f       	mov	r24, r30
    3f82:	89 2b       	or	r24, r25
    3f84:	17 96       	adiw	r26, 0x07	; 7
    3f86:	8c 93       	st	X, r24
    3f88:	80 e0       	ldi	r24, 0x00	; 0
    3f8a:	90 e0       	ldi	r25, 0x00	; 0
    3f8c:	a0 e0       	ldi	r26, 0x00	; 0
    3f8e:	b0 e4       	ldi	r27, 0x40	; 64
    3f90:	8b 87       	std	Y+11, r24	; 0x0b
    3f92:	9c 87       	std	Y+12, r25	; 0x0c
    3f94:	ad 87       	std	Y+13, r26	; 0x0d
    3f96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f98:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fa0:	20 e0       	ldi	r18, 0x00	; 0
    3fa2:	30 e0       	ldi	r19, 0x00	; 0
    3fa4:	4a e7       	ldi	r20, 0x7A	; 122
    3fa6:	53 e4       	ldi	r21, 0x43	; 67
    3fa8:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3fac:	dc 01       	movw	r26, r24
    3fae:	cb 01       	movw	r24, r22
    3fb0:	8f 83       	std	Y+7, r24	; 0x07
    3fb2:	98 87       	std	Y+8, r25	; 0x08
    3fb4:	a9 87       	std	Y+9, r26	; 0x09
    3fb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3fb8:	6f 81       	ldd	r22, Y+7	; 0x07
    3fba:	78 85       	ldd	r23, Y+8	; 0x08
    3fbc:	89 85       	ldd	r24, Y+9	; 0x09
    3fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fc0:	20 e0       	ldi	r18, 0x00	; 0
    3fc2:	30 e0       	ldi	r19, 0x00	; 0
    3fc4:	40 e8       	ldi	r20, 0x80	; 128
    3fc6:	5f e3       	ldi	r21, 0x3F	; 63
    3fc8:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__ltsf2>
    3fcc:	88 23       	and	r24, r24
    3fce:	2c f4       	brge	.+10     	; 0x3fda <LCD_enuInit+0xbac>
		__ticks = 1;
    3fd0:	81 e0       	ldi	r24, 0x01	; 1
    3fd2:	90 e0       	ldi	r25, 0x00	; 0
    3fd4:	9e 83       	std	Y+6, r25	; 0x06
    3fd6:	8d 83       	std	Y+5, r24	; 0x05
    3fd8:	3f c0       	rjmp	.+126    	; 0x4058 <LCD_enuInit+0xc2a>
	else if (__tmp > 65535)
    3fda:	6f 81       	ldd	r22, Y+7	; 0x07
    3fdc:	78 85       	ldd	r23, Y+8	; 0x08
    3fde:	89 85       	ldd	r24, Y+9	; 0x09
    3fe0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fe2:	20 e0       	ldi	r18, 0x00	; 0
    3fe4:	3f ef       	ldi	r19, 0xFF	; 255
    3fe6:	4f e7       	ldi	r20, 0x7F	; 127
    3fe8:	57 e4       	ldi	r21, 0x47	; 71
    3fea:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gtsf2>
    3fee:	18 16       	cp	r1, r24
    3ff0:	4c f5       	brge	.+82     	; 0x4044 <LCD_enuInit+0xc16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ff2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ff4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ff6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ff8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ffa:	20 e0       	ldi	r18, 0x00	; 0
    3ffc:	30 e0       	ldi	r19, 0x00	; 0
    3ffe:	40 e2       	ldi	r20, 0x20	; 32
    4000:	51 e4       	ldi	r21, 0x41	; 65
    4002:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    4006:	dc 01       	movw	r26, r24
    4008:	cb 01       	movw	r24, r22
    400a:	bc 01       	movw	r22, r24
    400c:	cd 01       	movw	r24, r26
    400e:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    4012:	dc 01       	movw	r26, r24
    4014:	cb 01       	movw	r24, r22
    4016:	9e 83       	std	Y+6, r25	; 0x06
    4018:	8d 83       	std	Y+5, r24	; 0x05
    401a:	0f c0       	rjmp	.+30     	; 0x403a <LCD_enuInit+0xc0c>
    401c:	89 e1       	ldi	r24, 0x19	; 25
    401e:	90 e0       	ldi	r25, 0x00	; 0
    4020:	9c 83       	std	Y+4, r25	; 0x04
    4022:	8b 83       	std	Y+3, r24	; 0x03
    4024:	8b 81       	ldd	r24, Y+3	; 0x03
    4026:	9c 81       	ldd	r25, Y+4	; 0x04
    4028:	01 97       	sbiw	r24, 0x01	; 1
    402a:	f1 f7       	brne	.-4      	; 0x4028 <LCD_enuInit+0xbfa>
    402c:	9c 83       	std	Y+4, r25	; 0x04
    402e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4030:	8d 81       	ldd	r24, Y+5	; 0x05
    4032:	9e 81       	ldd	r25, Y+6	; 0x06
    4034:	01 97       	sbiw	r24, 0x01	; 1
    4036:	9e 83       	std	Y+6, r25	; 0x06
    4038:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    403a:	8d 81       	ldd	r24, Y+5	; 0x05
    403c:	9e 81       	ldd	r25, Y+6	; 0x06
    403e:	00 97       	sbiw	r24, 0x00	; 0
    4040:	69 f7       	brne	.-38     	; 0x401c <LCD_enuInit+0xbee>
    4042:	14 c0       	rjmp	.+40     	; 0x406c <LCD_enuInit+0xc3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4044:	6f 81       	ldd	r22, Y+7	; 0x07
    4046:	78 85       	ldd	r23, Y+8	; 0x08
    4048:	89 85       	ldd	r24, Y+9	; 0x09
    404a:	9a 85       	ldd	r25, Y+10	; 0x0a
    404c:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    4050:	dc 01       	movw	r26, r24
    4052:	cb 01       	movw	r24, r22
    4054:	9e 83       	std	Y+6, r25	; 0x06
    4056:	8d 83       	std	Y+5, r24	; 0x05
    4058:	8d 81       	ldd	r24, Y+5	; 0x05
    405a:	9e 81       	ldd	r25, Y+6	; 0x06
    405c:	9a 83       	std	Y+2, r25	; 0x02
    405e:	89 83       	std	Y+1, r24	; 0x01
    4060:	89 81       	ldd	r24, Y+1	; 0x01
    4062:	9a 81       	ldd	r25, Y+2	; 0x02
    4064:	01 97       	sbiw	r24, 0x01	; 1
    4066:	f1 f7       	brne	.-4      	; 0x4064 <LCD_enuInit+0xc36>
    4068:	9a 83       	std	Y+2, r25	; 0x02
    406a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	//Set Entry mode
	Local_u64Check |= ((u64)LCD_inenuSendCommand(0x00) << 42);
    406c:	80 e0       	ldi	r24, 0x00	; 0
    406e:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <LCD_inenuSendCommand>
    4072:	a8 2e       	mov	r10, r24
    4074:	bb 24       	eor	r11, r11
    4076:	cc 24       	eor	r12, r12
    4078:	dd 24       	eor	r13, r13
    407a:	ee 24       	eor	r14, r14
    407c:	ff 24       	eor	r15, r15
    407e:	87 01       	movw	r16, r14
    4080:	2a 2d       	mov	r18, r10
    4082:	3b 2d       	mov	r19, r11
    4084:	4c 2d       	mov	r20, r12
    4086:	5d 2d       	mov	r21, r13
    4088:	6e 2d       	mov	r22, r14
    408a:	7f 2d       	mov	r23, r15
    408c:	80 2f       	mov	r24, r16
    408e:	91 2f       	mov	r25, r17
    4090:	0a e2       	ldi	r16, 0x2A	; 42
    4092:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    4096:	a2 2e       	mov	r10, r18
    4098:	b3 2e       	mov	r11, r19
    409a:	c4 2e       	mov	r12, r20
    409c:	d5 2e       	mov	r13, r21
    409e:	e6 2e       	mov	r14, r22
    40a0:	f7 2e       	mov	r15, r23
    40a2:	08 2f       	mov	r16, r24
    40a4:	19 2f       	mov	r17, r25
    40a6:	2a 2d       	mov	r18, r10
    40a8:	3b 2d       	mov	r19, r11
    40aa:	4c 2d       	mov	r20, r12
    40ac:	5d 2d       	mov	r21, r13
    40ae:	6e 2d       	mov	r22, r14
    40b0:	7f 2d       	mov	r23, r15
    40b2:	80 2f       	mov	r24, r16
    40b4:	91 2f       	mov	r25, r17
    40b6:	de 01       	movw	r26, r28
    40b8:	da 96       	adiw	r26, 0x3a	; 58
    40ba:	fe 01       	movw	r30, r28
    40bc:	fa 96       	adiw	r30, 0x3a	; 58
    40be:	10 81       	ld	r17, Z
    40c0:	12 2b       	or	r17, r18
    40c2:	1c 93       	st	X, r17
    40c4:	11 81       	ldd	r17, Z+1	; 0x01
    40c6:	13 2b       	or	r17, r19
    40c8:	11 96       	adiw	r26, 0x01	; 1
    40ca:	1c 93       	st	X, r17
    40cc:	11 97       	sbiw	r26, 0x01	; 1
    40ce:	12 81       	ldd	r17, Z+2	; 0x02
    40d0:	14 2b       	or	r17, r20
    40d2:	12 96       	adiw	r26, 0x02	; 2
    40d4:	1c 93       	st	X, r17
    40d6:	12 97       	sbiw	r26, 0x02	; 2
    40d8:	13 81       	ldd	r17, Z+3	; 0x03
    40da:	15 2b       	or	r17, r21
    40dc:	13 96       	adiw	r26, 0x03	; 3
    40de:	1c 93       	st	X, r17
    40e0:	13 97       	sbiw	r26, 0x03	; 3
    40e2:	14 81       	ldd	r17, Z+4	; 0x04
    40e4:	16 2b       	or	r17, r22
    40e6:	14 96       	adiw	r26, 0x04	; 4
    40e8:	1c 93       	st	X, r17
    40ea:	14 97       	sbiw	r26, 0x04	; 4
    40ec:	15 81       	ldd	r17, Z+5	; 0x05
    40ee:	17 2b       	or	r17, r23
    40f0:	15 96       	adiw	r26, 0x05	; 5
    40f2:	1c 93       	st	X, r17
    40f4:	15 97       	sbiw	r26, 0x05	; 5
    40f6:	16 81       	ldd	r17, Z+6	; 0x06
    40f8:	18 2b       	or	r17, r24
    40fa:	16 96       	adiw	r26, 0x06	; 6
    40fc:	1c 93       	st	X, r17
    40fe:	16 97       	sbiw	r26, 0x06	; 6
    4100:	e7 81       	ldd	r30, Z+7	; 0x07
    4102:	8e 2f       	mov	r24, r30
    4104:	89 2b       	or	r24, r25
    4106:	17 96       	adiw	r26, 0x07	; 7
    4108:	8c 93       	st	X, r24
	Local_u64Check |= ((u64)LCD_inenuSendCommand(0x60) << 45); // shift disabled , DDRAM address increase
    410a:	80 e6       	ldi	r24, 0x60	; 96
    410c:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <LCD_inenuSendCommand>
    4110:	a8 2e       	mov	r10, r24
    4112:	bb 24       	eor	r11, r11
    4114:	cc 24       	eor	r12, r12
    4116:	dd 24       	eor	r13, r13
    4118:	ee 24       	eor	r14, r14
    411a:	ff 24       	eor	r15, r15
    411c:	87 01       	movw	r16, r14
    411e:	2a 2d       	mov	r18, r10
    4120:	3b 2d       	mov	r19, r11
    4122:	4c 2d       	mov	r20, r12
    4124:	5d 2d       	mov	r21, r13
    4126:	6e 2d       	mov	r22, r14
    4128:	7f 2d       	mov	r23, r15
    412a:	80 2f       	mov	r24, r16
    412c:	91 2f       	mov	r25, r17
    412e:	0d e2       	ldi	r16, 0x2D	; 45
    4130:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    4134:	a2 2e       	mov	r10, r18
    4136:	b3 2e       	mov	r11, r19
    4138:	c4 2e       	mov	r12, r20
    413a:	d5 2e       	mov	r13, r21
    413c:	e6 2e       	mov	r14, r22
    413e:	f7 2e       	mov	r15, r23
    4140:	08 2f       	mov	r16, r24
    4142:	19 2f       	mov	r17, r25
    4144:	2a 2d       	mov	r18, r10
    4146:	3b 2d       	mov	r19, r11
    4148:	4c 2d       	mov	r20, r12
    414a:	5d 2d       	mov	r21, r13
    414c:	6e 2d       	mov	r22, r14
    414e:	7f 2d       	mov	r23, r15
    4150:	80 2f       	mov	r24, r16
    4152:	91 2f       	mov	r25, r17
    4154:	de 01       	movw	r26, r28
    4156:	da 96       	adiw	r26, 0x3a	; 58
    4158:	fe 01       	movw	r30, r28
    415a:	fa 96       	adiw	r30, 0x3a	; 58
    415c:	10 81       	ld	r17, Z
    415e:	12 2b       	or	r17, r18
    4160:	1c 93       	st	X, r17
    4162:	11 81       	ldd	r17, Z+1	; 0x01
    4164:	13 2b       	or	r17, r19
    4166:	11 96       	adiw	r26, 0x01	; 1
    4168:	1c 93       	st	X, r17
    416a:	11 97       	sbiw	r26, 0x01	; 1
    416c:	12 81       	ldd	r17, Z+2	; 0x02
    416e:	14 2b       	or	r17, r20
    4170:	12 96       	adiw	r26, 0x02	; 2
    4172:	1c 93       	st	X, r17
    4174:	12 97       	sbiw	r26, 0x02	; 2
    4176:	13 81       	ldd	r17, Z+3	; 0x03
    4178:	15 2b       	or	r17, r21
    417a:	13 96       	adiw	r26, 0x03	; 3
    417c:	1c 93       	st	X, r17
    417e:	13 97       	sbiw	r26, 0x03	; 3
    4180:	14 81       	ldd	r17, Z+4	; 0x04
    4182:	16 2b       	or	r17, r22
    4184:	14 96       	adiw	r26, 0x04	; 4
    4186:	1c 93       	st	X, r17
    4188:	14 97       	sbiw	r26, 0x04	; 4
    418a:	15 81       	ldd	r17, Z+5	; 0x05
    418c:	17 2b       	or	r17, r23
    418e:	15 96       	adiw	r26, 0x05	; 5
    4190:	1c 93       	st	X, r17
    4192:	15 97       	sbiw	r26, 0x05	; 5
    4194:	16 81       	ldd	r17, Z+6	; 0x06
    4196:	18 2b       	or	r17, r24
    4198:	16 96       	adiw	r26, 0x06	; 6
    419a:	1c 93       	st	X, r17
    419c:	16 97       	sbiw	r26, 0x06	; 6
    419e:	e7 81       	ldd	r30, Z+7	; 0x07
    41a0:	8e 2f       	mov	r24, r30
    41a2:	89 2b       	or	r24, r25
    41a4:	17 96       	adiw	r26, 0x07	; 7
    41a6:	8c 93       	st	X, r24
    41a8:	17 97       	sbiw	r26, 0x07	; 7

	u8 Local_u8Iterator;
	for(Local_u8Iterator = 0; Local_u8Iterator <= 45; Local_u8Iterator+=3)
    41aa:	19 ae       	std	Y+57, r1	; 0x39
    41ac:	42 c0       	rjmp	.+132    	; 0x4232 <LCD_enuInit+0xe04>
	{
		if(((Local_u64Check >> Local_u8Iterator) & (0b111)) != ES_OK)
    41ae:	89 ad       	ldd	r24, Y+57	; 0x39
    41b0:	a8 2f       	mov	r26, r24
    41b2:	b0 e0       	ldi	r27, 0x00	; 0
    41b4:	fe 01       	movw	r30, r28
    41b6:	fa 96       	adiw	r30, 0x3a	; 58
    41b8:	20 81       	ld	r18, Z
    41ba:	31 81       	ldd	r19, Z+1	; 0x01
    41bc:	42 81       	ldd	r20, Z+2	; 0x02
    41be:	53 81       	ldd	r21, Z+3	; 0x03
    41c0:	64 81       	ldd	r22, Z+4	; 0x04
    41c2:	75 81       	ldd	r23, Z+5	; 0x05
    41c4:	86 81       	ldd	r24, Z+6	; 0x06
    41c6:	97 81       	ldd	r25, Z+7	; 0x07
    41c8:	0a 2f       	mov	r16, r26
    41ca:	0e 94 49 00 	call	0x92	; 0x92 <__lshrdi3>
    41ce:	a2 2e       	mov	r10, r18
    41d0:	b3 2e       	mov	r11, r19
    41d2:	c4 2e       	mov	r12, r20
    41d4:	d5 2e       	mov	r13, r21
    41d6:	e6 2e       	mov	r14, r22
    41d8:	f7 2e       	mov	r15, r23
    41da:	08 2f       	mov	r16, r24
    41dc:	19 2f       	mov	r17, r25
    41de:	2a 2c       	mov	r2, r10
    41e0:	3b 2c       	mov	r3, r11
    41e2:	4c 2c       	mov	r4, r12
    41e4:	5d 2c       	mov	r5, r13
    41e6:	6e 2c       	mov	r6, r14
    41e8:	7f 2c       	mov	r7, r15
    41ea:	80 2e       	mov	r8, r16
    41ec:	91 2e       	mov	r9, r17
    41ee:	22 2d       	mov	r18, r2
    41f0:	27 70       	andi	r18, 0x07	; 7
    41f2:	33 2d       	mov	r19, r3
    41f4:	30 70       	andi	r19, 0x00	; 0
    41f6:	44 2d       	mov	r20, r4
    41f8:	40 70       	andi	r20, 0x00	; 0
    41fa:	55 2d       	mov	r21, r5
    41fc:	50 70       	andi	r21, 0x00	; 0
    41fe:	66 2d       	mov	r22, r6
    4200:	60 70       	andi	r22, 0x00	; 0
    4202:	77 2d       	mov	r23, r7
    4204:	70 70       	andi	r23, 0x00	; 0
    4206:	88 2d       	mov	r24, r8
    4208:	80 70       	andi	r24, 0x00	; 0
    420a:	99 2d       	mov	r25, r9
    420c:	90 70       	andi	r25, 0x00	; 0
    420e:	e2 2f       	mov	r30, r18
    4210:	e3 2b       	or	r30, r19
    4212:	e4 2b       	or	r30, r20
    4214:	e5 2b       	or	r30, r21
    4216:	e6 2b       	or	r30, r22
    4218:	e7 2b       	or	r30, r23
    421a:	e8 2b       	or	r30, r24
    421c:	e9 2b       	or	r30, r25
    421e:	ee 23       	and	r30, r30
    4220:	29 f0       	breq	.+10     	; 0x422c <LCD_enuInit+0xdfe>
		{
			return ES_NOK;
    4222:	81 e0       	ldi	r24, 0x01	; 1
    4224:	24 96       	adiw	r28, 0x04	; 4
    4226:	8f af       	std	Y+63, r24	; 0x3f
    4228:	24 97       	sbiw	r28, 0x04	; 4
    422a:	15 c0       	rjmp	.+42     	; 0x4256 <LCD_enuInit+0xe28>
	//Set Entry mode
	Local_u64Check |= ((u64)LCD_inenuSendCommand(0x00) << 42);
	Local_u64Check |= ((u64)LCD_inenuSendCommand(0x60) << 45); // shift disabled , DDRAM address increase

	u8 Local_u8Iterator;
	for(Local_u8Iterator = 0; Local_u8Iterator <= 45; Local_u8Iterator+=3)
    422c:	89 ad       	ldd	r24, Y+57	; 0x39
    422e:	8d 5f       	subi	r24, 0xFD	; 253
    4230:	89 af       	std	Y+57, r24	; 0x39
    4232:	89 ad       	ldd	r24, Y+57	; 0x39
    4234:	8e 32       	cpi	r24, 0x2E	; 46
    4236:	08 f4       	brcc	.+2      	; 0x423a <LCD_enuInit+0xe0c>
    4238:	ba cf       	rjmp	.-140    	; 0x41ae <LCD_enuInit+0xd80>
		if(((Local_u64Check >> Local_u8Iterator) & (0b111)) != ES_OK)
		{
			return ES_NOK;
		}
	}
	Global_u8Flag = 1;
    423a:	81 e0       	ldi	r24, 0x01	; 1
    423c:	80 93 f0 01 	sts	0x01F0, r24

#else
#error "Your LCD_Mode has wrong selection"
#endif

	Local_ErrorState = ES_OK;
    4240:	fe 01       	movw	r30, r28
    4242:	ee 5b       	subi	r30, 0xBE	; 190
    4244:	ff 4f       	sbci	r31, 0xFF	; 255
    4246:	10 82       	st	Z, r1
	return Local_ErrorState;
    4248:	fe 01       	movw	r30, r28
    424a:	ee 5b       	subi	r30, 0xBE	; 190
    424c:	ff 4f       	sbci	r31, 0xFF	; 255
    424e:	80 81       	ld	r24, Z
    4250:	24 96       	adiw	r28, 0x04	; 4
    4252:	8f af       	std	Y+63, r24	; 0x3f
    4254:	24 97       	sbiw	r28, 0x04	; 4
    4256:	24 96       	adiw	r28, 0x04	; 4
    4258:	8f ad       	ldd	r24, Y+63	; 0x3f
    425a:	24 97       	sbiw	r28, 0x04	; 4
}
    425c:	cd 5b       	subi	r28, 0xBD	; 189
    425e:	df 4f       	sbci	r29, 0xFF	; 255
    4260:	0f b6       	in	r0, 0x3f	; 63
    4262:	f8 94       	cli
    4264:	de bf       	out	0x3e, r29	; 62
    4266:	0f be       	out	0x3f, r0	; 63
    4268:	cd bf       	out	0x3d, r28	; 61
    426a:	cf 91       	pop	r28
    426c:	df 91       	pop	r29
    426e:	1f 91       	pop	r17
    4270:	0f 91       	pop	r16
    4272:	ff 90       	pop	r15
    4274:	ef 90       	pop	r14
    4276:	df 90       	pop	r13
    4278:	cf 90       	pop	r12
    427a:	bf 90       	pop	r11
    427c:	af 90       	pop	r10
    427e:	9f 90       	pop	r9
    4280:	8f 90       	pop	r8
    4282:	7f 90       	pop	r7
    4284:	6f 90       	pop	r6
    4286:	5f 90       	pop	r5
    4288:	4f 90       	pop	r4
    428a:	3f 90       	pop	r3
    428c:	2f 90       	pop	r2
    428e:	08 95       	ret

00004290 <LCD_enuLatch>:




static ES_t LCD_enuLatch(u8 Copy_u8Data)
{
    4290:	df 93       	push	r29
    4292:	cf 93       	push	r28
    4294:	cd b7       	in	r28, 0x3d	; 61
    4296:	de b7       	in	r29, 0x3e	; 62
    4298:	e2 97       	sbiw	r28, 0x32	; 50
    429a:	0f b6       	in	r0, 0x3f	; 63
    429c:	f8 94       	cli
    429e:	de bf       	out	0x3e, r29	; 62
    42a0:	0f be       	out	0x3f, r0	; 63
    42a2:	cd bf       	out	0x3d, r28	; 61
    42a4:	89 ab       	std	Y+49, r24	; 0x31
	ES_t Local_ErrorState = ES_NOK;
    42a6:	81 e0       	ldi	r24, 0x01	; 1
    42a8:	88 ab       	std	Y+48, r24	; 0x30

	u32 Local_u32Check = 0;
    42aa:	1c a6       	std	Y+44, r1	; 0x2c
    42ac:	1d a6       	std	Y+45, r1	; 0x2d
    42ae:	1e a6       	std	Y+46, r1	; 0x2e
    42b0:	1f a6       	std	Y+47, r1	; 0x2f

	// Set RW as a write operation
	Local_u32Check |= (DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW) << 0);
    42b2:	82 e0       	ldi	r24, 0x02	; 2
    42b4:	61 e0       	ldi	r22, 0x01	; 1
    42b6:	40 e0       	ldi	r20, 0x00	; 0
    42b8:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    42bc:	28 2f       	mov	r18, r24
    42be:	30 e0       	ldi	r19, 0x00	; 0
    42c0:	40 e0       	ldi	r20, 0x00	; 0
    42c2:	50 e0       	ldi	r21, 0x00	; 0
    42c4:	8c a5       	ldd	r24, Y+44	; 0x2c
    42c6:	9d a5       	ldd	r25, Y+45	; 0x2d
    42c8:	ae a5       	ldd	r26, Y+46	; 0x2e
    42ca:	bf a5       	ldd	r27, Y+47	; 0x2f
    42cc:	82 2b       	or	r24, r18
    42ce:	93 2b       	or	r25, r19
    42d0:	a4 2b       	or	r26, r20
    42d2:	b5 2b       	or	r27, r21
    42d4:	8c a7       	std	Y+44, r24	; 0x2c
    42d6:	9d a7       	std	Y+45, r25	; 0x2d
    42d8:	ae a7       	std	Y+46, r26	; 0x2e
    42da:	bf a7       	std	Y+47, r27	; 0x2f

	//Enable is low
	Local_u32Check |= (DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW) << 3);
    42dc:	82 e0       	ldi	r24, 0x02	; 2
    42de:	62 e0       	ldi	r22, 0x02	; 2
    42e0:	40 e0       	ldi	r20, 0x00	; 0
    42e2:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    42e6:	88 2f       	mov	r24, r24
    42e8:	90 e0       	ldi	r25, 0x00	; 0
    42ea:	88 0f       	add	r24, r24
    42ec:	99 1f       	adc	r25, r25
    42ee:	88 0f       	add	r24, r24
    42f0:	99 1f       	adc	r25, r25
    42f2:	88 0f       	add	r24, r24
    42f4:	99 1f       	adc	r25, r25
    42f6:	9c 01       	movw	r18, r24
    42f8:	44 27       	eor	r20, r20
    42fa:	37 fd       	sbrc	r19, 7
    42fc:	40 95       	com	r20
    42fe:	54 2f       	mov	r21, r20
    4300:	8c a5       	ldd	r24, Y+44	; 0x2c
    4302:	9d a5       	ldd	r25, Y+45	; 0x2d
    4304:	ae a5       	ldd	r26, Y+46	; 0x2e
    4306:	bf a5       	ldd	r27, Y+47	; 0x2f
    4308:	82 2b       	or	r24, r18
    430a:	93 2b       	or	r25, r19
    430c:	a4 2b       	or	r26, r20
    430e:	b5 2b       	or	r27, r21
    4310:	8c a7       	std	Y+44, r24	; 0x2c
    4312:	9d a7       	std	Y+45, r25	; 0x2d
    4314:	ae a7       	std	Y+46, r26	; 0x2e
    4316:	bf a7       	std	Y+47, r27	; 0x2f

	// write command
	Local_u32Check |= (     DIO_enuSetPinValue(D4_PORT, D4_PIN, (Copy_u8Data >> D4) & MASK_BIT) << 6 );
    4318:	89 a9       	ldd	r24, Y+49	; 0x31
    431a:	82 95       	swap	r24
    431c:	8f 70       	andi	r24, 0x0F	; 15
    431e:	98 2f       	mov	r25, r24
    4320:	91 70       	andi	r25, 0x01	; 1
    4322:	82 e0       	ldi	r24, 0x02	; 2
    4324:	63 e0       	ldi	r22, 0x03	; 3
    4326:	49 2f       	mov	r20, r25
    4328:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    432c:	88 2f       	mov	r24, r24
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	00 24       	eor	r0, r0
    4332:	96 95       	lsr	r25
    4334:	87 95       	ror	r24
    4336:	07 94       	ror	r0
    4338:	96 95       	lsr	r25
    433a:	87 95       	ror	r24
    433c:	07 94       	ror	r0
    433e:	98 2f       	mov	r25, r24
    4340:	80 2d       	mov	r24, r0
    4342:	9c 01       	movw	r18, r24
    4344:	44 27       	eor	r20, r20
    4346:	37 fd       	sbrc	r19, 7
    4348:	40 95       	com	r20
    434a:	54 2f       	mov	r21, r20
    434c:	8c a5       	ldd	r24, Y+44	; 0x2c
    434e:	9d a5       	ldd	r25, Y+45	; 0x2d
    4350:	ae a5       	ldd	r26, Y+46	; 0x2e
    4352:	bf a5       	ldd	r27, Y+47	; 0x2f
    4354:	82 2b       	or	r24, r18
    4356:	93 2b       	or	r25, r19
    4358:	a4 2b       	or	r26, r20
    435a:	b5 2b       	or	r27, r21
    435c:	8c a7       	std	Y+44, r24	; 0x2c
    435e:	9d a7       	std	Y+45, r25	; 0x2d
    4360:	ae a7       	std	Y+46, r26	; 0x2e
    4362:	bf a7       	std	Y+47, r27	; 0x2f
	Local_u32Check |= ((u32)DIO_enuSetPinValue(D5_PORT, D5_PIN, (Copy_u8Data >> D5) & MASK_BIT) << 9 );
    4364:	89 a9       	ldd	r24, Y+49	; 0x31
    4366:	82 95       	swap	r24
    4368:	86 95       	lsr	r24
    436a:	87 70       	andi	r24, 0x07	; 7
    436c:	98 2f       	mov	r25, r24
    436e:	91 70       	andi	r25, 0x01	; 1
    4370:	82 e0       	ldi	r24, 0x02	; 2
    4372:	64 e0       	ldi	r22, 0x04	; 4
    4374:	49 2f       	mov	r20, r25
    4376:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    437a:	88 2f       	mov	r24, r24
    437c:	90 e0       	ldi	r25, 0x00	; 0
    437e:	a0 e0       	ldi	r26, 0x00	; 0
    4380:	b0 e0       	ldi	r27, 0x00	; 0
    4382:	9c 01       	movw	r18, r24
    4384:	ad 01       	movw	r20, r26
    4386:	01 2e       	mov	r0, r17
    4388:	19 e0       	ldi	r17, 0x09	; 9
    438a:	22 0f       	add	r18, r18
    438c:	33 1f       	adc	r19, r19
    438e:	44 1f       	adc	r20, r20
    4390:	55 1f       	adc	r21, r21
    4392:	1a 95       	dec	r17
    4394:	d1 f7       	brne	.-12     	; 0x438a <LCD_enuLatch+0xfa>
    4396:	10 2d       	mov	r17, r0
    4398:	8c a5       	ldd	r24, Y+44	; 0x2c
    439a:	9d a5       	ldd	r25, Y+45	; 0x2d
    439c:	ae a5       	ldd	r26, Y+46	; 0x2e
    439e:	bf a5       	ldd	r27, Y+47	; 0x2f
    43a0:	82 2b       	or	r24, r18
    43a2:	93 2b       	or	r25, r19
    43a4:	a4 2b       	or	r26, r20
    43a6:	b5 2b       	or	r27, r21
    43a8:	8c a7       	std	Y+44, r24	; 0x2c
    43aa:	9d a7       	std	Y+45, r25	; 0x2d
    43ac:	ae a7       	std	Y+46, r26	; 0x2e
    43ae:	bf a7       	std	Y+47, r27	; 0x2f
	Local_u32Check |= ((u32)DIO_enuSetPinValue(D6_PORT, D6_PIN, (Copy_u8Data >> D6) & MASK_BIT) << 12);
    43b0:	89 a9       	ldd	r24, Y+49	; 0x31
    43b2:	82 95       	swap	r24
    43b4:	86 95       	lsr	r24
    43b6:	86 95       	lsr	r24
    43b8:	83 70       	andi	r24, 0x03	; 3
    43ba:	98 2f       	mov	r25, r24
    43bc:	91 70       	andi	r25, 0x01	; 1
    43be:	82 e0       	ldi	r24, 0x02	; 2
    43c0:	65 e0       	ldi	r22, 0x05	; 5
    43c2:	49 2f       	mov	r20, r25
    43c4:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    43c8:	88 2f       	mov	r24, r24
    43ca:	90 e0       	ldi	r25, 0x00	; 0
    43cc:	a0 e0       	ldi	r26, 0x00	; 0
    43ce:	b0 e0       	ldi	r27, 0x00	; 0
    43d0:	9c 01       	movw	r18, r24
    43d2:	ad 01       	movw	r20, r26
    43d4:	01 2e       	mov	r0, r17
    43d6:	1c e0       	ldi	r17, 0x0C	; 12
    43d8:	22 0f       	add	r18, r18
    43da:	33 1f       	adc	r19, r19
    43dc:	44 1f       	adc	r20, r20
    43de:	55 1f       	adc	r21, r21
    43e0:	1a 95       	dec	r17
    43e2:	d1 f7       	brne	.-12     	; 0x43d8 <LCD_enuLatch+0x148>
    43e4:	10 2d       	mov	r17, r0
    43e6:	8c a5       	ldd	r24, Y+44	; 0x2c
    43e8:	9d a5       	ldd	r25, Y+45	; 0x2d
    43ea:	ae a5       	ldd	r26, Y+46	; 0x2e
    43ec:	bf a5       	ldd	r27, Y+47	; 0x2f
    43ee:	82 2b       	or	r24, r18
    43f0:	93 2b       	or	r25, r19
    43f2:	a4 2b       	or	r26, r20
    43f4:	b5 2b       	or	r27, r21
    43f6:	8c a7       	std	Y+44, r24	; 0x2c
    43f8:	9d a7       	std	Y+45, r25	; 0x2d
    43fa:	ae a7       	std	Y+46, r26	; 0x2e
    43fc:	bf a7       	std	Y+47, r27	; 0x2f
	Local_u32Check |= ((u32)DIO_enuSetPinValue(D7_PORT, D7_PIN, (Copy_u8Data >> D7) & MASK_BIT) << 15);
    43fe:	89 a9       	ldd	r24, Y+49	; 0x31
    4400:	98 2f       	mov	r25, r24
    4402:	99 1f       	adc	r25, r25
    4404:	99 27       	eor	r25, r25
    4406:	99 1f       	adc	r25, r25
    4408:	82 e0       	ldi	r24, 0x02	; 2
    440a:	66 e0       	ldi	r22, 0x06	; 6
    440c:	49 2f       	mov	r20, r25
    440e:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    4412:	88 2f       	mov	r24, r24
    4414:	90 e0       	ldi	r25, 0x00	; 0
    4416:	a0 e0       	ldi	r26, 0x00	; 0
    4418:	b0 e0       	ldi	r27, 0x00	; 0
    441a:	9c 01       	movw	r18, r24
    441c:	ad 01       	movw	r20, r26
    441e:	01 2e       	mov	r0, r17
    4420:	1f e0       	ldi	r17, 0x0F	; 15
    4422:	22 0f       	add	r18, r18
    4424:	33 1f       	adc	r19, r19
    4426:	44 1f       	adc	r20, r20
    4428:	55 1f       	adc	r21, r21
    442a:	1a 95       	dec	r17
    442c:	d1 f7       	brne	.-12     	; 0x4422 <LCD_enuLatch+0x192>
    442e:	10 2d       	mov	r17, r0
    4430:	8c a5       	ldd	r24, Y+44	; 0x2c
    4432:	9d a5       	ldd	r25, Y+45	; 0x2d
    4434:	ae a5       	ldd	r26, Y+46	; 0x2e
    4436:	bf a5       	ldd	r27, Y+47	; 0x2f
    4438:	82 2b       	or	r24, r18
    443a:	93 2b       	or	r25, r19
    443c:	a4 2b       	or	r26, r20
    443e:	b5 2b       	or	r27, r21
    4440:	8c a7       	std	Y+44, r24	; 0x2c
    4442:	9d a7       	std	Y+45, r25	; 0x2d
    4444:	ae a7       	std	Y+46, r26	; 0x2e
    4446:	bf a7       	std	Y+47, r27	; 0x2f
	}
	Local_ErrorState = ES_OK;

#elif LCD_MODE == FOUR_BIT

	if(Global_u8Flag)
    4448:	80 91 f0 01 	lds	r24, 0x01F0
    444c:	88 23       	and	r24, r24
    444e:	09 f4       	brne	.+2      	; 0x4452 <LCD_enuLatch+0x1c2>
    4450:	81 c1       	rjmp	.+770    	; 0x4754 <LCD_enuLatch+0x4c4>
	{
		// Enable latch
		DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8HIGH);
    4452:	82 e0       	ldi	r24, 0x02	; 2
    4454:	62 e0       	ldi	r22, 0x02	; 2
    4456:	41 e0       	ldi	r20, 0x01	; 1
    4458:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    445c:	80 e0       	ldi	r24, 0x00	; 0
    445e:	90 e0       	ldi	r25, 0x00	; 0
    4460:	a0 e8       	ldi	r26, 0x80	; 128
    4462:	bf e3       	ldi	r27, 0x3F	; 63
    4464:	8f a3       	std	Y+39, r24	; 0x27
    4466:	98 a7       	std	Y+40, r25	; 0x28
    4468:	a9 a7       	std	Y+41, r26	; 0x29
    446a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    446c:	6f a1       	ldd	r22, Y+39	; 0x27
    446e:	78 a5       	ldd	r23, Y+40	; 0x28
    4470:	89 a5       	ldd	r24, Y+41	; 0x29
    4472:	9a a5       	ldd	r25, Y+42	; 0x2a
    4474:	20 e0       	ldi	r18, 0x00	; 0
    4476:	30 e0       	ldi	r19, 0x00	; 0
    4478:	4a e7       	ldi	r20, 0x7A	; 122
    447a:	53 e4       	ldi	r21, 0x43	; 67
    447c:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    4480:	dc 01       	movw	r26, r24
    4482:	cb 01       	movw	r24, r22
    4484:	8b a3       	std	Y+35, r24	; 0x23
    4486:	9c a3       	std	Y+36, r25	; 0x24
    4488:	ad a3       	std	Y+37, r26	; 0x25
    448a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    448c:	6b a1       	ldd	r22, Y+35	; 0x23
    448e:	7c a1       	ldd	r23, Y+36	; 0x24
    4490:	8d a1       	ldd	r24, Y+37	; 0x25
    4492:	9e a1       	ldd	r25, Y+38	; 0x26
    4494:	20 e0       	ldi	r18, 0x00	; 0
    4496:	30 e0       	ldi	r19, 0x00	; 0
    4498:	40 e8       	ldi	r20, 0x80	; 128
    449a:	5f e3       	ldi	r21, 0x3F	; 63
    449c:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__ltsf2>
    44a0:	88 23       	and	r24, r24
    44a2:	2c f4       	brge	.+10     	; 0x44ae <LCD_enuLatch+0x21e>
		__ticks = 1;
    44a4:	81 e0       	ldi	r24, 0x01	; 1
    44a6:	90 e0       	ldi	r25, 0x00	; 0
    44a8:	9a a3       	std	Y+34, r25	; 0x22
    44aa:	89 a3       	std	Y+33, r24	; 0x21
    44ac:	3f c0       	rjmp	.+126    	; 0x452c <LCD_enuLatch+0x29c>
	else if (__tmp > 65535)
    44ae:	6b a1       	ldd	r22, Y+35	; 0x23
    44b0:	7c a1       	ldd	r23, Y+36	; 0x24
    44b2:	8d a1       	ldd	r24, Y+37	; 0x25
    44b4:	9e a1       	ldd	r25, Y+38	; 0x26
    44b6:	20 e0       	ldi	r18, 0x00	; 0
    44b8:	3f ef       	ldi	r19, 0xFF	; 255
    44ba:	4f e7       	ldi	r20, 0x7F	; 127
    44bc:	57 e4       	ldi	r21, 0x47	; 71
    44be:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gtsf2>
    44c2:	18 16       	cp	r1, r24
    44c4:	4c f5       	brge	.+82     	; 0x4518 <LCD_enuLatch+0x288>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44c6:	6f a1       	ldd	r22, Y+39	; 0x27
    44c8:	78 a5       	ldd	r23, Y+40	; 0x28
    44ca:	89 a5       	ldd	r24, Y+41	; 0x29
    44cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    44ce:	20 e0       	ldi	r18, 0x00	; 0
    44d0:	30 e0       	ldi	r19, 0x00	; 0
    44d2:	40 e2       	ldi	r20, 0x20	; 32
    44d4:	51 e4       	ldi	r21, 0x41	; 65
    44d6:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    44da:	dc 01       	movw	r26, r24
    44dc:	cb 01       	movw	r24, r22
    44de:	bc 01       	movw	r22, r24
    44e0:	cd 01       	movw	r24, r26
    44e2:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    44e6:	dc 01       	movw	r26, r24
    44e8:	cb 01       	movw	r24, r22
    44ea:	9a a3       	std	Y+34, r25	; 0x22
    44ec:	89 a3       	std	Y+33, r24	; 0x21
    44ee:	0f c0       	rjmp	.+30     	; 0x450e <LCD_enuLatch+0x27e>
    44f0:	89 e1       	ldi	r24, 0x19	; 25
    44f2:	90 e0       	ldi	r25, 0x00	; 0
    44f4:	98 a3       	std	Y+32, r25	; 0x20
    44f6:	8f 8f       	std	Y+31, r24	; 0x1f
    44f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    44fa:	98 a1       	ldd	r25, Y+32	; 0x20
    44fc:	01 97       	sbiw	r24, 0x01	; 1
    44fe:	f1 f7       	brne	.-4      	; 0x44fc <LCD_enuLatch+0x26c>
    4500:	98 a3       	std	Y+32, r25	; 0x20
    4502:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4504:	89 a1       	ldd	r24, Y+33	; 0x21
    4506:	9a a1       	ldd	r25, Y+34	; 0x22
    4508:	01 97       	sbiw	r24, 0x01	; 1
    450a:	9a a3       	std	Y+34, r25	; 0x22
    450c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    450e:	89 a1       	ldd	r24, Y+33	; 0x21
    4510:	9a a1       	ldd	r25, Y+34	; 0x22
    4512:	00 97       	sbiw	r24, 0x00	; 0
    4514:	69 f7       	brne	.-38     	; 0x44f0 <LCD_enuLatch+0x260>
    4516:	14 c0       	rjmp	.+40     	; 0x4540 <LCD_enuLatch+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4518:	6b a1       	ldd	r22, Y+35	; 0x23
    451a:	7c a1       	ldd	r23, Y+36	; 0x24
    451c:	8d a1       	ldd	r24, Y+37	; 0x25
    451e:	9e a1       	ldd	r25, Y+38	; 0x26
    4520:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    4524:	dc 01       	movw	r26, r24
    4526:	cb 01       	movw	r24, r22
    4528:	9a a3       	std	Y+34, r25	; 0x22
    452a:	89 a3       	std	Y+33, r24	; 0x21
    452c:	89 a1       	ldd	r24, Y+33	; 0x21
    452e:	9a a1       	ldd	r25, Y+34	; 0x22
    4530:	9e 8f       	std	Y+30, r25	; 0x1e
    4532:	8d 8f       	std	Y+29, r24	; 0x1d
    4534:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4536:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4538:	01 97       	sbiw	r24, 0x01	; 1
    453a:	f1 f7       	brne	.-4      	; 0x4538 <LCD_enuLatch+0x2a8>
    453c:	9e 8f       	std	Y+30, r25	; 0x1e
    453e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    4540:	82 e0       	ldi	r24, 0x02	; 2
    4542:	62 e0       	ldi	r22, 0x02	; 2
    4544:	40 e0       	ldi	r20, 0x00	; 0
    4546:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    454a:	80 e0       	ldi	r24, 0x00	; 0
    454c:	90 e0       	ldi	r25, 0x00	; 0
    454e:	a0 e8       	ldi	r26, 0x80	; 128
    4550:	bf e3       	ldi	r27, 0x3F	; 63
    4552:	89 8f       	std	Y+25, r24	; 0x19
    4554:	9a 8f       	std	Y+26, r25	; 0x1a
    4556:	ab 8f       	std	Y+27, r26	; 0x1b
    4558:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    455a:	69 8d       	ldd	r22, Y+25	; 0x19
    455c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    455e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4560:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4562:	20 e0       	ldi	r18, 0x00	; 0
    4564:	30 e0       	ldi	r19, 0x00	; 0
    4566:	4a e7       	ldi	r20, 0x7A	; 122
    4568:	53 e4       	ldi	r21, 0x43	; 67
    456a:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    456e:	dc 01       	movw	r26, r24
    4570:	cb 01       	movw	r24, r22
    4572:	8d 8b       	std	Y+21, r24	; 0x15
    4574:	9e 8b       	std	Y+22, r25	; 0x16
    4576:	af 8b       	std	Y+23, r26	; 0x17
    4578:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    457a:	6d 89       	ldd	r22, Y+21	; 0x15
    457c:	7e 89       	ldd	r23, Y+22	; 0x16
    457e:	8f 89       	ldd	r24, Y+23	; 0x17
    4580:	98 8d       	ldd	r25, Y+24	; 0x18
    4582:	20 e0       	ldi	r18, 0x00	; 0
    4584:	30 e0       	ldi	r19, 0x00	; 0
    4586:	40 e8       	ldi	r20, 0x80	; 128
    4588:	5f e3       	ldi	r21, 0x3F	; 63
    458a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__ltsf2>
    458e:	88 23       	and	r24, r24
    4590:	2c f4       	brge	.+10     	; 0x459c <LCD_enuLatch+0x30c>
		__ticks = 1;
    4592:	81 e0       	ldi	r24, 0x01	; 1
    4594:	90 e0       	ldi	r25, 0x00	; 0
    4596:	9c 8b       	std	Y+20, r25	; 0x14
    4598:	8b 8b       	std	Y+19, r24	; 0x13
    459a:	3f c0       	rjmp	.+126    	; 0x461a <LCD_enuLatch+0x38a>
	else if (__tmp > 65535)
    459c:	6d 89       	ldd	r22, Y+21	; 0x15
    459e:	7e 89       	ldd	r23, Y+22	; 0x16
    45a0:	8f 89       	ldd	r24, Y+23	; 0x17
    45a2:	98 8d       	ldd	r25, Y+24	; 0x18
    45a4:	20 e0       	ldi	r18, 0x00	; 0
    45a6:	3f ef       	ldi	r19, 0xFF	; 255
    45a8:	4f e7       	ldi	r20, 0x7F	; 127
    45aa:	57 e4       	ldi	r21, 0x47	; 71
    45ac:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gtsf2>
    45b0:	18 16       	cp	r1, r24
    45b2:	4c f5       	brge	.+82     	; 0x4606 <LCD_enuLatch+0x376>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45b4:	69 8d       	ldd	r22, Y+25	; 0x19
    45b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45bc:	20 e0       	ldi	r18, 0x00	; 0
    45be:	30 e0       	ldi	r19, 0x00	; 0
    45c0:	40 e2       	ldi	r20, 0x20	; 32
    45c2:	51 e4       	ldi	r21, 0x41	; 65
    45c4:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    45c8:	dc 01       	movw	r26, r24
    45ca:	cb 01       	movw	r24, r22
    45cc:	bc 01       	movw	r22, r24
    45ce:	cd 01       	movw	r24, r26
    45d0:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    45d4:	dc 01       	movw	r26, r24
    45d6:	cb 01       	movw	r24, r22
    45d8:	9c 8b       	std	Y+20, r25	; 0x14
    45da:	8b 8b       	std	Y+19, r24	; 0x13
    45dc:	0f c0       	rjmp	.+30     	; 0x45fc <LCD_enuLatch+0x36c>
    45de:	89 e1       	ldi	r24, 0x19	; 25
    45e0:	90 e0       	ldi	r25, 0x00	; 0
    45e2:	9a 8b       	std	Y+18, r25	; 0x12
    45e4:	89 8b       	std	Y+17, r24	; 0x11
    45e6:	89 89       	ldd	r24, Y+17	; 0x11
    45e8:	9a 89       	ldd	r25, Y+18	; 0x12
    45ea:	01 97       	sbiw	r24, 0x01	; 1
    45ec:	f1 f7       	brne	.-4      	; 0x45ea <LCD_enuLatch+0x35a>
    45ee:	9a 8b       	std	Y+18, r25	; 0x12
    45f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45f2:	8b 89       	ldd	r24, Y+19	; 0x13
    45f4:	9c 89       	ldd	r25, Y+20	; 0x14
    45f6:	01 97       	sbiw	r24, 0x01	; 1
    45f8:	9c 8b       	std	Y+20, r25	; 0x14
    45fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45fc:	8b 89       	ldd	r24, Y+19	; 0x13
    45fe:	9c 89       	ldd	r25, Y+20	; 0x14
    4600:	00 97       	sbiw	r24, 0x00	; 0
    4602:	69 f7       	brne	.-38     	; 0x45de <LCD_enuLatch+0x34e>
    4604:	14 c0       	rjmp	.+40     	; 0x462e <LCD_enuLatch+0x39e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4606:	6d 89       	ldd	r22, Y+21	; 0x15
    4608:	7e 89       	ldd	r23, Y+22	; 0x16
    460a:	8f 89       	ldd	r24, Y+23	; 0x17
    460c:	98 8d       	ldd	r25, Y+24	; 0x18
    460e:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    4612:	dc 01       	movw	r26, r24
    4614:	cb 01       	movw	r24, r22
    4616:	9c 8b       	std	Y+20, r25	; 0x14
    4618:	8b 8b       	std	Y+19, r24	; 0x13
    461a:	8b 89       	ldd	r24, Y+19	; 0x13
    461c:	9c 89       	ldd	r25, Y+20	; 0x14
    461e:	98 8b       	std	Y+16, r25	; 0x10
    4620:	8f 87       	std	Y+15, r24	; 0x0f
    4622:	8f 85       	ldd	r24, Y+15	; 0x0f
    4624:	98 89       	ldd	r25, Y+16	; 0x10
    4626:	01 97       	sbiw	r24, 0x01	; 1
    4628:	f1 f7       	brne	.-4      	; 0x4626 <LCD_enuLatch+0x396>
    462a:	98 8b       	std	Y+16, r25	; 0x10
    462c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);

		Local_u32Check |= (     DIO_enuSetPinValue(D4_PORT, D4_PIN, (Copy_u8Data >> D0) & MASK_BIT) << 6 );
    462e:	89 a9       	ldd	r24, Y+49	; 0x31
    4630:	98 2f       	mov	r25, r24
    4632:	91 70       	andi	r25, 0x01	; 1
    4634:	82 e0       	ldi	r24, 0x02	; 2
    4636:	63 e0       	ldi	r22, 0x03	; 3
    4638:	49 2f       	mov	r20, r25
    463a:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    463e:	88 2f       	mov	r24, r24
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	00 24       	eor	r0, r0
    4644:	96 95       	lsr	r25
    4646:	87 95       	ror	r24
    4648:	07 94       	ror	r0
    464a:	96 95       	lsr	r25
    464c:	87 95       	ror	r24
    464e:	07 94       	ror	r0
    4650:	98 2f       	mov	r25, r24
    4652:	80 2d       	mov	r24, r0
    4654:	9c 01       	movw	r18, r24
    4656:	44 27       	eor	r20, r20
    4658:	37 fd       	sbrc	r19, 7
    465a:	40 95       	com	r20
    465c:	54 2f       	mov	r21, r20
    465e:	8c a5       	ldd	r24, Y+44	; 0x2c
    4660:	9d a5       	ldd	r25, Y+45	; 0x2d
    4662:	ae a5       	ldd	r26, Y+46	; 0x2e
    4664:	bf a5       	ldd	r27, Y+47	; 0x2f
    4666:	82 2b       	or	r24, r18
    4668:	93 2b       	or	r25, r19
    466a:	a4 2b       	or	r26, r20
    466c:	b5 2b       	or	r27, r21
    466e:	8c a7       	std	Y+44, r24	; 0x2c
    4670:	9d a7       	std	Y+45, r25	; 0x2d
    4672:	ae a7       	std	Y+46, r26	; 0x2e
    4674:	bf a7       	std	Y+47, r27	; 0x2f
		Local_u32Check |= ((u32)DIO_enuSetPinValue(D5_PORT, D5_PIN, (Copy_u8Data >> D1) & MASK_BIT) << 9 );
    4676:	89 a9       	ldd	r24, Y+49	; 0x31
    4678:	86 95       	lsr	r24
    467a:	98 2f       	mov	r25, r24
    467c:	91 70       	andi	r25, 0x01	; 1
    467e:	82 e0       	ldi	r24, 0x02	; 2
    4680:	64 e0       	ldi	r22, 0x04	; 4
    4682:	49 2f       	mov	r20, r25
    4684:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    4688:	88 2f       	mov	r24, r24
    468a:	90 e0       	ldi	r25, 0x00	; 0
    468c:	a0 e0       	ldi	r26, 0x00	; 0
    468e:	b0 e0       	ldi	r27, 0x00	; 0
    4690:	9c 01       	movw	r18, r24
    4692:	ad 01       	movw	r20, r26
    4694:	01 2e       	mov	r0, r17
    4696:	19 e0       	ldi	r17, 0x09	; 9
    4698:	22 0f       	add	r18, r18
    469a:	33 1f       	adc	r19, r19
    469c:	44 1f       	adc	r20, r20
    469e:	55 1f       	adc	r21, r21
    46a0:	1a 95       	dec	r17
    46a2:	d1 f7       	brne	.-12     	; 0x4698 <LCD_enuLatch+0x408>
    46a4:	10 2d       	mov	r17, r0
    46a6:	8c a5       	ldd	r24, Y+44	; 0x2c
    46a8:	9d a5       	ldd	r25, Y+45	; 0x2d
    46aa:	ae a5       	ldd	r26, Y+46	; 0x2e
    46ac:	bf a5       	ldd	r27, Y+47	; 0x2f
    46ae:	82 2b       	or	r24, r18
    46b0:	93 2b       	or	r25, r19
    46b2:	a4 2b       	or	r26, r20
    46b4:	b5 2b       	or	r27, r21
    46b6:	8c a7       	std	Y+44, r24	; 0x2c
    46b8:	9d a7       	std	Y+45, r25	; 0x2d
    46ba:	ae a7       	std	Y+46, r26	; 0x2e
    46bc:	bf a7       	std	Y+47, r27	; 0x2f
		Local_u32Check |= ((u32)DIO_enuSetPinValue(D6_PORT, D6_PIN, (Copy_u8Data >> D2) & MASK_BIT) << 12);
    46be:	89 a9       	ldd	r24, Y+49	; 0x31
    46c0:	86 95       	lsr	r24
    46c2:	86 95       	lsr	r24
    46c4:	98 2f       	mov	r25, r24
    46c6:	91 70       	andi	r25, 0x01	; 1
    46c8:	82 e0       	ldi	r24, 0x02	; 2
    46ca:	65 e0       	ldi	r22, 0x05	; 5
    46cc:	49 2f       	mov	r20, r25
    46ce:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    46d2:	88 2f       	mov	r24, r24
    46d4:	90 e0       	ldi	r25, 0x00	; 0
    46d6:	a0 e0       	ldi	r26, 0x00	; 0
    46d8:	b0 e0       	ldi	r27, 0x00	; 0
    46da:	9c 01       	movw	r18, r24
    46dc:	ad 01       	movw	r20, r26
    46de:	01 2e       	mov	r0, r17
    46e0:	1c e0       	ldi	r17, 0x0C	; 12
    46e2:	22 0f       	add	r18, r18
    46e4:	33 1f       	adc	r19, r19
    46e6:	44 1f       	adc	r20, r20
    46e8:	55 1f       	adc	r21, r21
    46ea:	1a 95       	dec	r17
    46ec:	d1 f7       	brne	.-12     	; 0x46e2 <LCD_enuLatch+0x452>
    46ee:	10 2d       	mov	r17, r0
    46f0:	8c a5       	ldd	r24, Y+44	; 0x2c
    46f2:	9d a5       	ldd	r25, Y+45	; 0x2d
    46f4:	ae a5       	ldd	r26, Y+46	; 0x2e
    46f6:	bf a5       	ldd	r27, Y+47	; 0x2f
    46f8:	82 2b       	or	r24, r18
    46fa:	93 2b       	or	r25, r19
    46fc:	a4 2b       	or	r26, r20
    46fe:	b5 2b       	or	r27, r21
    4700:	8c a7       	std	Y+44, r24	; 0x2c
    4702:	9d a7       	std	Y+45, r25	; 0x2d
    4704:	ae a7       	std	Y+46, r26	; 0x2e
    4706:	bf a7       	std	Y+47, r27	; 0x2f
		Local_u32Check |= ((u32)DIO_enuSetPinValue(D7_PORT, D7_PIN, (Copy_u8Data >> D3) & MASK_BIT) << 15);
    4708:	89 a9       	ldd	r24, Y+49	; 0x31
    470a:	86 95       	lsr	r24
    470c:	86 95       	lsr	r24
    470e:	86 95       	lsr	r24
    4710:	98 2f       	mov	r25, r24
    4712:	91 70       	andi	r25, 0x01	; 1
    4714:	82 e0       	ldi	r24, 0x02	; 2
    4716:	66 e0       	ldi	r22, 0x06	; 6
    4718:	49 2f       	mov	r20, r25
    471a:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    471e:	88 2f       	mov	r24, r24
    4720:	90 e0       	ldi	r25, 0x00	; 0
    4722:	a0 e0       	ldi	r26, 0x00	; 0
    4724:	b0 e0       	ldi	r27, 0x00	; 0
    4726:	9c 01       	movw	r18, r24
    4728:	ad 01       	movw	r20, r26
    472a:	01 2e       	mov	r0, r17
    472c:	1f e0       	ldi	r17, 0x0F	; 15
    472e:	22 0f       	add	r18, r18
    4730:	33 1f       	adc	r19, r19
    4732:	44 1f       	adc	r20, r20
    4734:	55 1f       	adc	r21, r21
    4736:	1a 95       	dec	r17
    4738:	d1 f7       	brne	.-12     	; 0x472e <LCD_enuLatch+0x49e>
    473a:	10 2d       	mov	r17, r0
    473c:	8c a5       	ldd	r24, Y+44	; 0x2c
    473e:	9d a5       	ldd	r25, Y+45	; 0x2d
    4740:	ae a5       	ldd	r26, Y+46	; 0x2e
    4742:	bf a5       	ldd	r27, Y+47	; 0x2f
    4744:	82 2b       	or	r24, r18
    4746:	93 2b       	or	r25, r19
    4748:	a4 2b       	or	r26, r20
    474a:	b5 2b       	or	r27, r21
    474c:	8c a7       	std	Y+44, r24	; 0x2c
    474e:	9d a7       	std	Y+45, r25	; 0x2d
    4750:	ae a7       	std	Y+46, r26	; 0x2e
    4752:	bf a7       	std	Y+47, r27	; 0x2f
	}

	u8 Local_u8Iterator;
	for(Local_u8Iterator = 0; Local_u8Iterator <= 15; Local_u8Iterator+=3)
    4754:	1b a6       	std	Y+43, r1	; 0x2b
    4756:	1d c0       	rjmp	.+58     	; 0x4792 <LCD_enuLatch+0x502>
	{
		if(( (Local_u32Check >> Local_u8Iterator) & (0b111) ) != ES_OK)
    4758:	8b a5       	ldd	r24, Y+43	; 0x2b
    475a:	28 2f       	mov	r18, r24
    475c:	30 e0       	ldi	r19, 0x00	; 0
    475e:	8c a5       	ldd	r24, Y+44	; 0x2c
    4760:	9d a5       	ldd	r25, Y+45	; 0x2d
    4762:	ae a5       	ldd	r26, Y+46	; 0x2e
    4764:	bf a5       	ldd	r27, Y+47	; 0x2f
    4766:	02 2e       	mov	r0, r18
    4768:	04 c0       	rjmp	.+8      	; 0x4772 <LCD_enuLatch+0x4e2>
    476a:	b6 95       	lsr	r27
    476c:	a7 95       	ror	r26
    476e:	97 95       	ror	r25
    4770:	87 95       	ror	r24
    4772:	0a 94       	dec	r0
    4774:	d2 f7       	brpl	.-12     	; 0x476a <LCD_enuLatch+0x4da>
    4776:	87 70       	andi	r24, 0x07	; 7
    4778:	90 70       	andi	r25, 0x00	; 0
    477a:	a0 70       	andi	r26, 0x00	; 0
    477c:	b0 70       	andi	r27, 0x00	; 0
    477e:	00 97       	sbiw	r24, 0x00	; 0
    4780:	a1 05       	cpc	r26, r1
    4782:	b1 05       	cpc	r27, r1
    4784:	19 f0       	breq	.+6      	; 0x478c <LCD_enuLatch+0x4fc>
		{
			return ES_NOK;
    4786:	81 e0       	ldi	r24, 0x01	; 1
    4788:	8a ab       	std	Y+50, r24	; 0x32
    478a:	85 c0       	rjmp	.+266    	; 0x4896 <LCD_enuLatch+0x606>
		Local_u32Check |= ((u32)DIO_enuSetPinValue(D6_PORT, D6_PIN, (Copy_u8Data >> D2) & MASK_BIT) << 12);
		Local_u32Check |= ((u32)DIO_enuSetPinValue(D7_PORT, D7_PIN, (Copy_u8Data >> D3) & MASK_BIT) << 15);
	}

	u8 Local_u8Iterator;
	for(Local_u8Iterator = 0; Local_u8Iterator <= 15; Local_u8Iterator+=3)
    478c:	8b a5       	ldd	r24, Y+43	; 0x2b
    478e:	8d 5f       	subi	r24, 0xFD	; 253
    4790:	8b a7       	std	Y+43, r24	; 0x2b
    4792:	8b a5       	ldd	r24, Y+43	; 0x2b
    4794:	80 31       	cpi	r24, 0x10	; 16
    4796:	00 f3       	brcs	.-64     	; 0x4758 <LCD_enuLatch+0x4c8>
#else
#error "Your LCD_Mode has wrong selection"
#endif

	// Enable latch
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8HIGH);
    4798:	82 e0       	ldi	r24, 0x02	; 2
    479a:	62 e0       	ldi	r22, 0x02	; 2
    479c:	41 e0       	ldi	r20, 0x01	; 1
    479e:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    47a2:	80 e0       	ldi	r24, 0x00	; 0
    47a4:	90 e0       	ldi	r25, 0x00	; 0
    47a6:	a0 e2       	ldi	r26, 0x20	; 32
    47a8:	b1 e4       	ldi	r27, 0x41	; 65
    47aa:	8b 87       	std	Y+11, r24	; 0x0b
    47ac:	9c 87       	std	Y+12, r25	; 0x0c
    47ae:	ad 87       	std	Y+13, r26	; 0x0d
    47b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    47b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    47b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    47b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    47ba:	20 e0       	ldi	r18, 0x00	; 0
    47bc:	30 e0       	ldi	r19, 0x00	; 0
    47be:	4a e7       	ldi	r20, 0x7A	; 122
    47c0:	53 e4       	ldi	r21, 0x43	; 67
    47c2:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    47c6:	dc 01       	movw	r26, r24
    47c8:	cb 01       	movw	r24, r22
    47ca:	8f 83       	std	Y+7, r24	; 0x07
    47cc:	98 87       	std	Y+8, r25	; 0x08
    47ce:	a9 87       	std	Y+9, r26	; 0x09
    47d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47d2:	6f 81       	ldd	r22, Y+7	; 0x07
    47d4:	78 85       	ldd	r23, Y+8	; 0x08
    47d6:	89 85       	ldd	r24, Y+9	; 0x09
    47d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    47da:	20 e0       	ldi	r18, 0x00	; 0
    47dc:	30 e0       	ldi	r19, 0x00	; 0
    47de:	40 e8       	ldi	r20, 0x80	; 128
    47e0:	5f e3       	ldi	r21, 0x3F	; 63
    47e2:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__ltsf2>
    47e6:	88 23       	and	r24, r24
    47e8:	2c f4       	brge	.+10     	; 0x47f4 <LCD_enuLatch+0x564>
		__ticks = 1;
    47ea:	81 e0       	ldi	r24, 0x01	; 1
    47ec:	90 e0       	ldi	r25, 0x00	; 0
    47ee:	9e 83       	std	Y+6, r25	; 0x06
    47f0:	8d 83       	std	Y+5, r24	; 0x05
    47f2:	3f c0       	rjmp	.+126    	; 0x4872 <LCD_enuLatch+0x5e2>
	else if (__tmp > 65535)
    47f4:	6f 81       	ldd	r22, Y+7	; 0x07
    47f6:	78 85       	ldd	r23, Y+8	; 0x08
    47f8:	89 85       	ldd	r24, Y+9	; 0x09
    47fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    47fc:	20 e0       	ldi	r18, 0x00	; 0
    47fe:	3f ef       	ldi	r19, 0xFF	; 255
    4800:	4f e7       	ldi	r20, 0x7F	; 127
    4802:	57 e4       	ldi	r21, 0x47	; 71
    4804:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gtsf2>
    4808:	18 16       	cp	r1, r24
    480a:	4c f5       	brge	.+82     	; 0x485e <LCD_enuLatch+0x5ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    480c:	6b 85       	ldd	r22, Y+11	; 0x0b
    480e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4810:	8d 85       	ldd	r24, Y+13	; 0x0d
    4812:	9e 85       	ldd	r25, Y+14	; 0x0e
    4814:	20 e0       	ldi	r18, 0x00	; 0
    4816:	30 e0       	ldi	r19, 0x00	; 0
    4818:	40 e2       	ldi	r20, 0x20	; 32
    481a:	51 e4       	ldi	r21, 0x41	; 65
    481c:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    4820:	dc 01       	movw	r26, r24
    4822:	cb 01       	movw	r24, r22
    4824:	bc 01       	movw	r22, r24
    4826:	cd 01       	movw	r24, r26
    4828:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    482c:	dc 01       	movw	r26, r24
    482e:	cb 01       	movw	r24, r22
    4830:	9e 83       	std	Y+6, r25	; 0x06
    4832:	8d 83       	std	Y+5, r24	; 0x05
    4834:	0f c0       	rjmp	.+30     	; 0x4854 <LCD_enuLatch+0x5c4>
    4836:	89 e1       	ldi	r24, 0x19	; 25
    4838:	90 e0       	ldi	r25, 0x00	; 0
    483a:	9c 83       	std	Y+4, r25	; 0x04
    483c:	8b 83       	std	Y+3, r24	; 0x03
    483e:	8b 81       	ldd	r24, Y+3	; 0x03
    4840:	9c 81       	ldd	r25, Y+4	; 0x04
    4842:	01 97       	sbiw	r24, 0x01	; 1
    4844:	f1 f7       	brne	.-4      	; 0x4842 <LCD_enuLatch+0x5b2>
    4846:	9c 83       	std	Y+4, r25	; 0x04
    4848:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    484a:	8d 81       	ldd	r24, Y+5	; 0x05
    484c:	9e 81       	ldd	r25, Y+6	; 0x06
    484e:	01 97       	sbiw	r24, 0x01	; 1
    4850:	9e 83       	std	Y+6, r25	; 0x06
    4852:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4854:	8d 81       	ldd	r24, Y+5	; 0x05
    4856:	9e 81       	ldd	r25, Y+6	; 0x06
    4858:	00 97       	sbiw	r24, 0x00	; 0
    485a:	69 f7       	brne	.-38     	; 0x4836 <LCD_enuLatch+0x5a6>
    485c:	14 c0       	rjmp	.+40     	; 0x4886 <LCD_enuLatch+0x5f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    485e:	6f 81       	ldd	r22, Y+7	; 0x07
    4860:	78 85       	ldd	r23, Y+8	; 0x08
    4862:	89 85       	ldd	r24, Y+9	; 0x09
    4864:	9a 85       	ldd	r25, Y+10	; 0x0a
    4866:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    486a:	dc 01       	movw	r26, r24
    486c:	cb 01       	movw	r24, r22
    486e:	9e 83       	std	Y+6, r25	; 0x06
    4870:	8d 83       	std	Y+5, r24	; 0x05
    4872:	8d 81       	ldd	r24, Y+5	; 0x05
    4874:	9e 81       	ldd	r25, Y+6	; 0x06
    4876:	9a 83       	std	Y+2, r25	; 0x02
    4878:	89 83       	std	Y+1, r24	; 0x01
    487a:	89 81       	ldd	r24, Y+1	; 0x01
    487c:	9a 81       	ldd	r25, Y+2	; 0x02
    487e:	01 97       	sbiw	r24, 0x01	; 1
    4880:	f1 f7       	brne	.-4      	; 0x487e <LCD_enuLatch+0x5ee>
    4882:	9a 83       	std	Y+2, r25	; 0x02
    4884:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    4886:	82 e0       	ldi	r24, 0x02	; 2
    4888:	62 e0       	ldi	r22, 0x02	; 2
    488a:	40 e0       	ldi	r20, 0x00	; 0
    488c:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>

	Local_ErrorState = ES_OK;
    4890:	18 aa       	std	Y+48, r1	; 0x30
	return Local_ErrorState;
    4892:	88 a9       	ldd	r24, Y+48	; 0x30
    4894:	8a ab       	std	Y+50, r24	; 0x32
    4896:	8a a9       	ldd	r24, Y+50	; 0x32
}
    4898:	e2 96       	adiw	r28, 0x32	; 50
    489a:	0f b6       	in	r0, 0x3f	; 63
    489c:	f8 94       	cli
    489e:	de bf       	out	0x3e, r29	; 62
    48a0:	0f be       	out	0x3f, r0	; 63
    48a2:	cd bf       	out	0x3d, r28	; 61
    48a4:	cf 91       	pop	r28
    48a6:	df 91       	pop	r29
    48a8:	08 95       	ret

000048aa <LCD_enuDisplayString>:




ES_t LCD_enuDisplayString(u8 *Copy_Pu8Data)
{
    48aa:	0f 93       	push	r16
    48ac:	1f 93       	push	r17
    48ae:	df 93       	push	r29
    48b0:	cf 93       	push	r28
    48b2:	00 d0       	rcall	.+0      	; 0x48b4 <LCD_enuDisplayString+0xa>
    48b4:	00 d0       	rcall	.+0      	; 0x48b6 <LCD_enuDisplayString+0xc>
    48b6:	0f 92       	push	r0
    48b8:	cd b7       	in	r28, 0x3d	; 61
    48ba:	de b7       	in	r29, 0x3e	; 62
    48bc:	9c 83       	std	Y+4, r25	; 0x04
    48be:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_ErrorState = ES_NOK;
    48c0:	81 e0       	ldi	r24, 0x01	; 1
    48c2:	8a 83       	std	Y+2, r24	; 0x02

	// Set RS as a Data Selection
	if(DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH) == ES_OK)
    48c4:	82 e0       	ldi	r24, 0x02	; 2
    48c6:	60 e0       	ldi	r22, 0x00	; 0
    48c8:	41 e0       	ldi	r20, 0x01	; 1
    48ca:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    48ce:	88 23       	and	r24, r24
    48d0:	f9 f4       	brne	.+62     	; 0x4910 <LCD_enuDisplayString+0x66>
	{
		u8 Local_Iterator;
		for(Local_Iterator = 0; Local_Iterator < strlen(Copy_Pu8Data); ++Local_Iterator)
    48d2:	19 82       	std	Y+1, r1	; 0x01
    48d4:	13 c0       	rjmp	.+38     	; 0x48fc <LCD_enuDisplayString+0x52>
		{
			if(LCD_enuLatch((u8)Copy_Pu8Data[Local_Iterator]) != ES_OK)
    48d6:	89 81       	ldd	r24, Y+1	; 0x01
    48d8:	28 2f       	mov	r18, r24
    48da:	30 e0       	ldi	r19, 0x00	; 0
    48dc:	8b 81       	ldd	r24, Y+3	; 0x03
    48de:	9c 81       	ldd	r25, Y+4	; 0x04
    48e0:	fc 01       	movw	r30, r24
    48e2:	e2 0f       	add	r30, r18
    48e4:	f3 1f       	adc	r31, r19
    48e6:	80 81       	ld	r24, Z
    48e8:	0e 94 48 21 	call	0x4290	; 0x4290 <LCD_enuLatch>
    48ec:	88 23       	and	r24, r24
    48ee:	19 f0       	breq	.+6      	; 0x48f6 <LCD_enuDisplayString+0x4c>
			{
				return Local_ErrorState;
    48f0:	8a 81       	ldd	r24, Y+2	; 0x02
    48f2:	8d 83       	std	Y+5, r24	; 0x05
    48f4:	10 c0       	rjmp	.+32     	; 0x4916 <LCD_enuDisplayString+0x6c>

	// Set RS as a Data Selection
	if(DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH) == ES_OK)
	{
		u8 Local_Iterator;
		for(Local_Iterator = 0; Local_Iterator < strlen(Copy_Pu8Data); ++Local_Iterator)
    48f6:	89 81       	ldd	r24, Y+1	; 0x01
    48f8:	8f 5f       	subi	r24, 0xFF	; 255
    48fa:	89 83       	std	Y+1, r24	; 0x01
    48fc:	89 81       	ldd	r24, Y+1	; 0x01
    48fe:	08 2f       	mov	r16, r24
    4900:	10 e0       	ldi	r17, 0x00	; 0
    4902:	8b 81       	ldd	r24, Y+3	; 0x03
    4904:	9c 81       	ldd	r25, Y+4	; 0x04
    4906:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <strlen>
    490a:	08 17       	cp	r16, r24
    490c:	19 07       	cpc	r17, r25
    490e:	18 f3       	brcs	.-58     	; 0x48d6 <LCD_enuDisplayString+0x2c>
			{
				return Local_ErrorState;
			}
		}
	}
	Local_ErrorState = ES_OK;
    4910:	1a 82       	std	Y+2, r1	; 0x02
	return Local_ErrorState;
    4912:	8a 81       	ldd	r24, Y+2	; 0x02
    4914:	8d 83       	std	Y+5, r24	; 0x05
    4916:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4918:	0f 90       	pop	r0
    491a:	0f 90       	pop	r0
    491c:	0f 90       	pop	r0
    491e:	0f 90       	pop	r0
    4920:	0f 90       	pop	r0
    4922:	cf 91       	pop	r28
    4924:	df 91       	pop	r29
    4926:	1f 91       	pop	r17
    4928:	0f 91       	pop	r16
    492a:	08 95       	ret

0000492c <LCD_enuDisplayChar>:




ES_t LCD_enuDisplayChar(u8  Copy_u8Char)
{
    492c:	df 93       	push	r29
    492e:	cf 93       	push	r28
    4930:	00 d0       	rcall	.+0      	; 0x4932 <LCD_enuDisplayChar+0x6>
    4932:	cd b7       	in	r28, 0x3d	; 61
    4934:	de b7       	in	r29, 0x3e	; 62
    4936:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_ErrorState = ES_NOK;
    4938:	81 e0       	ldi	r24, 0x01	; 1
    493a:	89 83       	std	Y+1, r24	; 0x01

	// Set RS as a command
	if(DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH) == ES_OK)
    493c:	82 e0       	ldi	r24, 0x02	; 2
    493e:	60 e0       	ldi	r22, 0x00	; 0
    4940:	41 e0       	ldi	r20, 0x01	; 1
    4942:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    4946:	88 23       	and	r24, r24
    4948:	21 f4       	brne	.+8      	; 0x4952 <LCD_enuDisplayChar+0x26>
	{
		Local_ErrorState = LCD_enuLatch(Copy_u8Char);
    494a:	8a 81       	ldd	r24, Y+2	; 0x02
    494c:	0e 94 48 21 	call	0x4290	; 0x4290 <LCD_enuLatch>
    4950:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState;
    4952:	89 81       	ldd	r24, Y+1	; 0x01
}
    4954:	0f 90       	pop	r0
    4956:	0f 90       	pop	r0
    4958:	cf 91       	pop	r28
    495a:	df 91       	pop	r29
    495c:	08 95       	ret

0000495e <LCD_enuClearDisplay>:




ES_t LCD_enuClearDisplay(void)
{
    495e:	df 93       	push	r29
    4960:	cf 93       	push	r28
    4962:	0f 92       	push	r0
    4964:	cd b7       	in	r28, 0x3d	; 61
    4966:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_ErrorState = ES_NOK;
    4968:	81 e0       	ldi	r24, 0x01	; 1
    496a:	89 83       	std	Y+1, r24	; 0x01

	Local_ErrorState = LCD_inenuSendCommand(0x01);
    496c:	81 e0       	ldi	r24, 0x01	; 1
    496e:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <LCD_inenuSendCommand>
    4972:	89 83       	std	Y+1, r24	; 0x01

	return Local_ErrorState;
    4974:	89 81       	ldd	r24, Y+1	; 0x01
}
    4976:	0f 90       	pop	r0
    4978:	cf 91       	pop	r28
    497a:	df 91       	pop	r29
    497c:	08 95       	ret

0000497e <LCD_enuSendCommand>:




ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    497e:	df 93       	push	r29
    4980:	cf 93       	push	r28
    4982:	00 d0       	rcall	.+0      	; 0x4984 <LCD_enuSendCommand+0x6>
    4984:	cd b7       	in	r28, 0x3d	; 61
    4986:	de b7       	in	r29, 0x3e	; 62
    4988:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_ErrorState = ES_NOK;
    498a:	81 e0       	ldi	r24, 0x01	; 1
    498c:	89 83       	std	Y+1, r24	; 0x01

	// Set RS as a command
	if(DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW) == ES_OK)
    498e:	82 e0       	ldi	r24, 0x02	; 2
    4990:	60 e0       	ldi	r22, 0x00	; 0
    4992:	40 e0       	ldi	r20, 0x00	; 0
    4994:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    4998:	88 23       	and	r24, r24
    499a:	21 f4       	brne	.+8      	; 0x49a4 <LCD_enuSendCommand+0x26>
	{
		Local_ErrorState = LCD_enuLatch(Copy_u8Command);
    499c:	8a 81       	ldd	r24, Y+2	; 0x02
    499e:	0e 94 48 21 	call	0x4290	; 0x4290 <LCD_enuLatch>
    49a2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState;
    49a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    49a6:	0f 90       	pop	r0
    49a8:	0f 90       	pop	r0
    49aa:	cf 91       	pop	r28
    49ac:	df 91       	pop	r29
    49ae:	08 95       	ret

000049b0 <LCD_inenuSendCommand>:




static inline ES_t LCD_inenuSendCommand(u8 Copy_u8Command)
{
    49b0:	df 93       	push	r29
    49b2:	cf 93       	push	r28
    49b4:	00 d0       	rcall	.+0      	; 0x49b6 <LCD_inenuSendCommand+0x6>
    49b6:	cd b7       	in	r28, 0x3d	; 61
    49b8:	de b7       	in	r29, 0x3e	; 62
    49ba:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_ErrorState = ES_NOK;
    49bc:	81 e0       	ldi	r24, 0x01	; 1
    49be:	89 83       	std	Y+1, r24	; 0x01

	// Set RS as a command
	if(DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW) == ES_OK)
    49c0:	82 e0       	ldi	r24, 0x02	; 2
    49c2:	60 e0       	ldi	r22, 0x00	; 0
    49c4:	40 e0       	ldi	r20, 0x00	; 0
    49c6:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    49ca:	88 23       	and	r24, r24
    49cc:	21 f4       	brne	.+8      	; 0x49d6 <LCD_inenuSendCommand+0x26>
	{
		Local_ErrorState = LCD_enuLatch(Copy_u8Command);
    49ce:	8a 81       	ldd	r24, Y+2	; 0x02
    49d0:	0e 94 48 21 	call	0x4290	; 0x4290 <LCD_enuLatch>
    49d4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState;
    49d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    49d8:	0f 90       	pop	r0
    49da:	0f 90       	pop	r0
    49dc:	cf 91       	pop	r28
    49de:	df 91       	pop	r29
    49e0:	08 95       	ret

000049e2 <LCD_enuSendExtraChar>:




ES_t LCD_enuSendExtraChar(u8 * Copy_Pu8ExtraChar, u8 Copy_u8NumOfChar, u8 Copy_u8WritrMode)
{
    49e2:	df 93       	push	r29
    49e4:	cf 93       	push	r28
    49e6:	00 d0       	rcall	.+0      	; 0x49e8 <LCD_enuSendExtraChar+0x6>
    49e8:	00 d0       	rcall	.+0      	; 0x49ea <LCD_enuSendExtraChar+0x8>
    49ea:	00 d0       	rcall	.+0      	; 0x49ec <LCD_enuSendExtraChar+0xa>
    49ec:	cd b7       	in	r28, 0x3d	; 61
    49ee:	de b7       	in	r29, 0x3e	; 62
    49f0:	9c 83       	std	Y+4, r25	; 0x04
    49f2:	8b 83       	std	Y+3, r24	; 0x03
    49f4:	6d 83       	std	Y+5, r22	; 0x05
    49f6:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_ErrorState = ES_NOK;
    49f8:	81 e0       	ldi	r24, 0x01	; 1
    49fa:	8a 83       	std	Y+2, r24	; 0x02

	Local_ErrorState = LCD_enuSendCommand(CHAR_POS);
    49fc:	80 e4       	ldi	r24, 0x40	; 64
    49fe:	0e 94 bf 24 	call	0x497e	; 0x497e <LCD_enuSendCommand>
    4a02:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8Iterator;
	for(Local_u8Iterator = 0; Local_u8Iterator < 8 * Copy_u8NumOfChar; ++Local_u8Iterator)
    4a04:	19 82       	std	Y+1, r1	; 0x01
    4a06:	0e c0       	rjmp	.+28     	; 0x4a24 <LCD_enuSendExtraChar+0x42>
	{
		LCD_enuDisplayChar(Copy_Pu8ExtraChar[Local_u8Iterator]);
    4a08:	89 81       	ldd	r24, Y+1	; 0x01
    4a0a:	28 2f       	mov	r18, r24
    4a0c:	30 e0       	ldi	r19, 0x00	; 0
    4a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    4a10:	9c 81       	ldd	r25, Y+4	; 0x04
    4a12:	fc 01       	movw	r30, r24
    4a14:	e2 0f       	add	r30, r18
    4a16:	f3 1f       	adc	r31, r19
    4a18:	80 81       	ld	r24, Z
    4a1a:	0e 94 96 24 	call	0x492c	; 0x492c <LCD_enuDisplayChar>
	ES_t Local_ErrorState = ES_NOK;

	Local_ErrorState = LCD_enuSendCommand(CHAR_POS);

	u8 Local_u8Iterator;
	for(Local_u8Iterator = 0; Local_u8Iterator < 8 * Copy_u8NumOfChar; ++Local_u8Iterator)
    4a1e:	89 81       	ldd	r24, Y+1	; 0x01
    4a20:	8f 5f       	subi	r24, 0xFF	; 255
    4a22:	89 83       	std	Y+1, r24	; 0x01
    4a24:	89 81       	ldd	r24, Y+1	; 0x01
    4a26:	28 2f       	mov	r18, r24
    4a28:	30 e0       	ldi	r19, 0x00	; 0
    4a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    4a2c:	88 2f       	mov	r24, r24
    4a2e:	90 e0       	ldi	r25, 0x00	; 0
    4a30:	88 0f       	add	r24, r24
    4a32:	99 1f       	adc	r25, r25
    4a34:	88 0f       	add	r24, r24
    4a36:	99 1f       	adc	r25, r25
    4a38:	88 0f       	add	r24, r24
    4a3a:	99 1f       	adc	r25, r25
    4a3c:	28 17       	cp	r18, r24
    4a3e:	39 07       	cpc	r19, r25
    4a40:	1c f3       	brlt	.-58     	; 0x4a08 <LCD_enuSendExtraChar+0x26>
	{
		LCD_enuDisplayChar(Copy_Pu8ExtraChar[Local_u8Iterator]);
	}

	if(Copy_u8WritrMode == RIGHT_TO_LEFT)
    4a42:	8e 81       	ldd	r24, Y+6	; 0x06
    4a44:	88 35       	cpi	r24, 0x58	; 88
    4a46:	49 f4       	brne	.+18     	; 0x4a5a <LCD_enuSendExtraChar+0x78>
	{

		Local_ErrorState = LCD_enuSendCommand(0x8f);// line 1   last block
    4a48:	8f e8       	ldi	r24, 0x8F	; 143
    4a4a:	0e 94 bf 24 	call	0x497e	; 0x497e <LCD_enuSendCommand>
    4a4e:	8a 83       	std	Y+2, r24	; 0x02
		Local_ErrorState = LCD_enuSendCommand(0x04);// RIGHT_TO_LEFT
    4a50:	84 e0       	ldi	r24, 0x04	; 4
    4a52:	0e 94 bf 24 	call	0x497e	; 0x497e <LCD_enuSendCommand>
    4a56:	8a 83       	std	Y+2, r24	; 0x02
    4a58:	05 c0       	rjmp	.+10     	; 0x4a64 <LCD_enuSendExtraChar+0x82>

	}
	else if(Copy_u8WritrMode == LEFT_TO_RIGHT)
    4a5a:	8e 81       	ldd	r24, Y+6	; 0x06
    4a5c:	83 36       	cpi	r24, 0x63	; 99
    4a5e:	11 f0       	breq	.+4      	; 0x4a64 <LCD_enuSendExtraChar+0x82>
	{

	}
	else
	{
		Local_ErrorState = ES_OUT_OF_RANGE;
    4a60:	83 e0       	ldi	r24, 0x03	; 3
    4a62:	8a 83       	std	Y+2, r24	; 0x02
	}


	Local_ErrorState = ES_OK;
    4a64:	1a 82       	std	Y+2, r1	; 0x02
	return Local_ErrorState;
    4a66:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4a68:	26 96       	adiw	r28, 0x06	; 6
    4a6a:	0f b6       	in	r0, 0x3f	; 63
    4a6c:	f8 94       	cli
    4a6e:	de bf       	out	0x3e, r29	; 62
    4a70:	0f be       	out	0x3f, r0	; 63
    4a72:	cd bf       	out	0x3d, r28	; 61
    4a74:	cf 91       	pop	r28
    4a76:	df 91       	pop	r29
    4a78:	08 95       	ret

00004a7a <LCD_enuGoto>:



ES_t LCD_enuGoto(u8 Copy_u8Line,u8 Copy_u8Block)
{
    4a7a:	df 93       	push	r29
    4a7c:	cf 93       	push	r28
    4a7e:	00 d0       	rcall	.+0      	; 0x4a80 <LCD_enuGoto+0x6>
    4a80:	00 d0       	rcall	.+0      	; 0x4a82 <LCD_enuGoto+0x8>
    4a82:	cd b7       	in	r28, 0x3d	; 61
    4a84:	de b7       	in	r29, 0x3e	; 62
    4a86:	8a 83       	std	Y+2, r24	; 0x02
    4a88:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_ErrorState = ES_NOK;
    4a8a:	81 e0       	ldi	r24, 0x01	; 1
    4a8c:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8Line == 1)
    4a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a90:	81 30       	cpi	r24, 0x01	; 1
    4a92:	31 f4       	brne	.+12     	; 0x4aa0 <LCD_enuGoto+0x26>
	{
		Local_ErrorState = LCD_enuSendCommand(0x80 + Copy_u8Block);
    4a94:	8b 81       	ldd	r24, Y+3	; 0x03
    4a96:	80 58       	subi	r24, 0x80	; 128
    4a98:	0e 94 bf 24 	call	0x497e	; 0x497e <LCD_enuSendCommand>
    4a9c:	89 83       	std	Y+1, r24	; 0x01
    4a9e:	0c c0       	rjmp	.+24     	; 0x4ab8 <LCD_enuGoto+0x3e>
	}
	else if(Copy_u8Line == 2)
    4aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    4aa2:	82 30       	cpi	r24, 0x02	; 2
    4aa4:	31 f4       	brne	.+12     	; 0x4ab2 <LCD_enuGoto+0x38>
	{
		Local_ErrorState = LCD_enuSendCommand(0x80+0x40+Copy_u8Block);
    4aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    4aa8:	80 54       	subi	r24, 0x40	; 64
    4aaa:	0e 94 bf 24 	call	0x497e	; 0x497e <LCD_enuSendCommand>
    4aae:	89 83       	std	Y+1, r24	; 0x01
    4ab0:	03 c0       	rjmp	.+6      	; 0x4ab8 <LCD_enuGoto+0x3e>
	}
	else
	{
		return ES_OUT_OF_RANGE;
    4ab2:	83 e0       	ldi	r24, 0x03	; 3
    4ab4:	8c 83       	std	Y+4, r24	; 0x04
    4ab6:	02 c0       	rjmp	.+4      	; 0x4abc <LCD_enuGoto+0x42>
	}
	return Local_ErrorState;
    4ab8:	89 81       	ldd	r24, Y+1	; 0x01
    4aba:	8c 83       	std	Y+4, r24	; 0x04
    4abc:	8c 81       	ldd	r24, Y+4	; 0x04
}
    4abe:	0f 90       	pop	r0
    4ac0:	0f 90       	pop	r0
    4ac2:	0f 90       	pop	r0
    4ac4:	0f 90       	pop	r0
    4ac6:	cf 91       	pop	r28
    4ac8:	df 91       	pop	r29
    4aca:	08 95       	ret

00004acc <LCD_enuWriteNumber>:


ES_t LCD_enuWriteNumber(f32 Copy_u8Num) // 0.004
{
    4acc:	0f 93       	push	r16
    4ace:	1f 93       	push	r17
    4ad0:	df 93       	push	r29
    4ad2:	cf 93       	push	r28
    4ad4:	cd b7       	in	r28, 0x3d	; 61
    4ad6:	de b7       	in	r29, 0x3e	; 62
    4ad8:	2f 97       	sbiw	r28, 0x0f	; 15
    4ada:	0f b6       	in	r0, 0x3f	; 63
    4adc:	f8 94       	cli
    4ade:	de bf       	out	0x3e, r29	; 62
    4ae0:	0f be       	out	0x3f, r0	; 63
    4ae2:	cd bf       	out	0x3d, r28	; 61
    4ae4:	69 87       	std	Y+9, r22	; 0x09
    4ae6:	7a 87       	std	Y+10, r23	; 0x0a
    4ae8:	8b 87       	std	Y+11, r24	; 0x0b
    4aea:	9c 87       	std	Y+12, r25	; 0x0c
	ES_t Local_enuErrorState = ES_NOK;
    4aec:	81 e0       	ldi	r24, 0x01	; 1
    4aee:	88 87       	std	Y+8, r24	; 0x08
	Local_enuErrorState = DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH );
    4af0:	82 e0       	ldi	r24, 0x02	; 2
    4af2:	60 e0       	ldi	r22, 0x00	; 0
    4af4:	41 e0       	ldi	r20, 0x01	; 1
    4af6:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    4afa:	88 87       	std	Y+8, r24	; 0x08

	if(Copy_u8Num == 0.0)
    4afc:	69 85       	ldd	r22, Y+9	; 0x09
    4afe:	7a 85       	ldd	r23, Y+10	; 0x0a
    4b00:	8b 85       	ldd	r24, Y+11	; 0x0b
    4b02:	9c 85       	ldd	r25, Y+12	; 0x0c
    4b04:	20 e0       	ldi	r18, 0x00	; 0
    4b06:	30 e0       	ldi	r19, 0x00	; 0
    4b08:	40 e0       	ldi	r20, 0x00	; 0
    4b0a:	50 e0       	ldi	r21, 0x00	; 0
    4b0c:	0e 94 17 04 	call	0x82e	; 0x82e <__eqsf2>
    4b10:	88 23       	and	r24, r24
    4b12:	39 f4       	brne	.+14     	; 0x4b22 <LCD_enuWriteNumber+0x56>
	{
		Local_enuErrorState = LCD_enuLatch('0');
    4b14:	80 e3       	ldi	r24, 0x30	; 48
    4b16:	0e 94 48 21 	call	0x4290	; 0x4290 <LCD_enuLatch>
    4b1a:	88 87       	std	Y+8, r24	; 0x08
		return Local_enuErrorState;
    4b1c:	28 85       	ldd	r18, Y+8	; 0x08
    4b1e:	2f 87       	std	Y+15, r18	; 0x0f
    4b20:	65 c1       	rjmp	.+714    	; 0x4dec <LCD_enuWriteNumber+0x320>
	}

	static u8 Local_Au8Digits[16] = {'0'};
	s8 Local_u8Iterator = -1;
    4b22:	8f ef       	ldi	r24, 0xFF	; 255
    4b24:	8f 83       	std	Y+7, r24	; 0x07
	s32 Local_s32Number = Copy_u8Num;// 0
    4b26:	69 85       	ldd	r22, Y+9	; 0x09
    4b28:	7a 85       	ldd	r23, Y+10	; 0x0a
    4b2a:	8b 85       	ldd	r24, Y+11	; 0x0b
    4b2c:	9c 85       	ldd	r25, Y+12	; 0x0c
    4b2e:	0e 94 65 05 	call	0xaca	; 0xaca <__fixsfsi>
    4b32:	dc 01       	movw	r26, r24
    4b34:	cb 01       	movw	r24, r22
    4b36:	8b 83       	std	Y+3, r24	; 0x03
    4b38:	9c 83       	std	Y+4, r25	; 0x04
    4b3a:	ad 83       	std	Y+5, r26	; 0x05
    4b3c:	be 83       	std	Y+6, r27	; 0x06
	if(Copy_u8Num < 0 )
    4b3e:	69 85       	ldd	r22, Y+9	; 0x09
    4b40:	7a 85       	ldd	r23, Y+10	; 0x0a
    4b42:	8b 85       	ldd	r24, Y+11	; 0x0b
    4b44:	9c 85       	ldd	r25, Y+12	; 0x0c
    4b46:	20 e0       	ldi	r18, 0x00	; 0
    4b48:	30 e0       	ldi	r19, 0x00	; 0
    4b4a:	40 e0       	ldi	r20, 0x00	; 0
    4b4c:	50 e0       	ldi	r21, 0x00	; 0
    4b4e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__ltsf2>
    4b52:	88 23       	and	r24, r24
    4b54:	94 f4       	brge	.+36     	; 0x4b7a <LCD_enuWriteNumber+0xae>
	{
		LCD_enuDisplayChar('-');
    4b56:	8d e2       	ldi	r24, 0x2D	; 45
    4b58:	0e 94 96 24 	call	0x492c	; 0x492c <LCD_enuDisplayChar>
		Local_s32Number *= -1;
    4b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    4b60:	ad 81       	ldd	r26, Y+5	; 0x05
    4b62:	be 81       	ldd	r27, Y+6	; 0x06
    4b64:	b0 95       	com	r27
    4b66:	a0 95       	com	r26
    4b68:	90 95       	com	r25
    4b6a:	81 95       	neg	r24
    4b6c:	9f 4f       	sbci	r25, 0xFF	; 255
    4b6e:	af 4f       	sbci	r26, 0xFF	; 255
    4b70:	bf 4f       	sbci	r27, 0xFF	; 255
    4b72:	8b 83       	std	Y+3, r24	; 0x03
    4b74:	9c 83       	std	Y+4, r25	; 0x04
    4b76:	ad 83       	std	Y+5, r26	; 0x05
    4b78:	be 83       	std	Y+6, r27	; 0x06
	}
	if((Copy_u8Num < 1.0 && Copy_u8Num > 0.0) || (Copy_u8Num > -1.0 && Copy_u8Num < 0.0)) LCD_enuDisplayChar('0');
    4b7a:	1e 86       	std	Y+14, r1	; 0x0e
    4b7c:	69 85       	ldd	r22, Y+9	; 0x09
    4b7e:	7a 85       	ldd	r23, Y+10	; 0x0a
    4b80:	8b 85       	ldd	r24, Y+11	; 0x0b
    4b82:	9c 85       	ldd	r25, Y+12	; 0x0c
    4b84:	20 e0       	ldi	r18, 0x00	; 0
    4b86:	30 e0       	ldi	r19, 0x00	; 0
    4b88:	40 e8       	ldi	r20, 0x80	; 128
    4b8a:	5f e3       	ldi	r21, 0x3F	; 63
    4b8c:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__ltsf2>
    4b90:	88 23       	and	r24, r24
    4b92:	14 f4       	brge	.+4      	; 0x4b98 <LCD_enuWriteNumber+0xcc>
    4b94:	81 e0       	ldi	r24, 0x01	; 1
    4b96:	8e 87       	std	Y+14, r24	; 0x0e
    4b98:	81 e0       	ldi	r24, 0x01	; 1
    4b9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b9c:	89 27       	eor	r24, r25
    4b9e:	88 23       	and	r24, r24
    4ba0:	61 f4       	brne	.+24     	; 0x4bba <LCD_enuWriteNumber+0xee>
    4ba2:	69 85       	ldd	r22, Y+9	; 0x09
    4ba4:	7a 85       	ldd	r23, Y+10	; 0x0a
    4ba6:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ba8:	9c 85       	ldd	r25, Y+12	; 0x0c
    4baa:	20 e0       	ldi	r18, 0x00	; 0
    4bac:	30 e0       	ldi	r19, 0x00	; 0
    4bae:	40 e0       	ldi	r20, 0x00	; 0
    4bb0:	50 e0       	ldi	r21, 0x00	; 0
    4bb2:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gtsf2>
    4bb6:	18 16       	cp	r1, r24
    4bb8:	04 f1       	brlt	.+64     	; 0x4bfa <LCD_enuWriteNumber+0x12e>
    4bba:	1d 86       	std	Y+13, r1	; 0x0d
    4bbc:	69 85       	ldd	r22, Y+9	; 0x09
    4bbe:	7a 85       	ldd	r23, Y+10	; 0x0a
    4bc0:	8b 85       	ldd	r24, Y+11	; 0x0b
    4bc2:	9c 85       	ldd	r25, Y+12	; 0x0c
    4bc4:	20 e0       	ldi	r18, 0x00	; 0
    4bc6:	30 e0       	ldi	r19, 0x00	; 0
    4bc8:	40 e8       	ldi	r20, 0x80	; 128
    4bca:	5f eb       	ldi	r21, 0xBF	; 191
    4bcc:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gtsf2>
    4bd0:	18 16       	cp	r1, r24
    4bd2:	14 f4       	brge	.+4      	; 0x4bd8 <LCD_enuWriteNumber+0x10c>
    4bd4:	21 e0       	ldi	r18, 0x01	; 1
    4bd6:	2d 87       	std	Y+13, r18	; 0x0d
    4bd8:	81 e0       	ldi	r24, 0x01	; 1
    4bda:	9d 85       	ldd	r25, Y+13	; 0x0d
    4bdc:	89 27       	eor	r24, r25
    4bde:	88 23       	and	r24, r24
    4be0:	e1 f5       	brne	.+120    	; 0x4c5a <LCD_enuWriteNumber+0x18e>
    4be2:	69 85       	ldd	r22, Y+9	; 0x09
    4be4:	7a 85       	ldd	r23, Y+10	; 0x0a
    4be6:	8b 85       	ldd	r24, Y+11	; 0x0b
    4be8:	9c 85       	ldd	r25, Y+12	; 0x0c
    4bea:	20 e0       	ldi	r18, 0x00	; 0
    4bec:	30 e0       	ldi	r19, 0x00	; 0
    4bee:	40 e0       	ldi	r20, 0x00	; 0
    4bf0:	50 e0       	ldi	r21, 0x00	; 0
    4bf2:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__ltsf2>
    4bf6:	88 23       	and	r24, r24
    4bf8:	84 f5       	brge	.+96     	; 0x4c5a <LCD_enuWriteNumber+0x18e>
    4bfa:	80 e3       	ldi	r24, 0x30	; 48
    4bfc:	0e 94 96 24 	call	0x492c	; 0x492c <LCD_enuDisplayChar>
    4c00:	2c c0       	rjmp	.+88     	; 0x4c5a <LCD_enuWriteNumber+0x18e>

	while (Local_s32Number > 0 && Local_enuErrorState == ES_OK)
	{
		Local_u8Iterator++;
    4c02:	8f 81       	ldd	r24, Y+7	; 0x07
    4c04:	8f 5f       	subi	r24, 0xFF	; 255
    4c06:	8f 83       	std	Y+7, r24	; 0x07
		Local_Au8Digits[Local_u8Iterator] = Local_s32Number % 10;
    4c08:	8f 81       	ldd	r24, Y+7	; 0x07
    4c0a:	08 2f       	mov	r16, r24
    4c0c:	11 27       	eor	r17, r17
    4c0e:	07 fd       	sbrc	r16, 7
    4c10:	10 95       	com	r17
    4c12:	8b 81       	ldd	r24, Y+3	; 0x03
    4c14:	9c 81       	ldd	r25, Y+4	; 0x04
    4c16:	ad 81       	ldd	r26, Y+5	; 0x05
    4c18:	be 81       	ldd	r27, Y+6	; 0x06
    4c1a:	2a e0       	ldi	r18, 0x0A	; 10
    4c1c:	30 e0       	ldi	r19, 0x00	; 0
    4c1e:	40 e0       	ldi	r20, 0x00	; 0
    4c20:	50 e0       	ldi	r21, 0x00	; 0
    4c22:	bc 01       	movw	r22, r24
    4c24:	cd 01       	movw	r24, r26
    4c26:	0e 94 74 30 	call	0x60e8	; 0x60e8 <__divmodsi4>
    4c2a:	dc 01       	movw	r26, r24
    4c2c:	cb 01       	movw	r24, r22
    4c2e:	f8 01       	movw	r30, r16
    4c30:	e9 57       	subi	r30, 0x79	; 121
    4c32:	fe 4f       	sbci	r31, 0xFE	; 254
    4c34:	80 83       	st	Z, r24
		Local_s32Number /= 10;
    4c36:	8b 81       	ldd	r24, Y+3	; 0x03
    4c38:	9c 81       	ldd	r25, Y+4	; 0x04
    4c3a:	ad 81       	ldd	r26, Y+5	; 0x05
    4c3c:	be 81       	ldd	r27, Y+6	; 0x06
    4c3e:	2a e0       	ldi	r18, 0x0A	; 10
    4c40:	30 e0       	ldi	r19, 0x00	; 0
    4c42:	40 e0       	ldi	r20, 0x00	; 0
    4c44:	50 e0       	ldi	r21, 0x00	; 0
    4c46:	bc 01       	movw	r22, r24
    4c48:	cd 01       	movw	r24, r26
    4c4a:	0e 94 74 30 	call	0x60e8	; 0x60e8 <__divmodsi4>
    4c4e:	da 01       	movw	r26, r20
    4c50:	c9 01       	movw	r24, r18
    4c52:	8b 83       	std	Y+3, r24	; 0x03
    4c54:	9c 83       	std	Y+4, r25	; 0x04
    4c56:	ad 83       	std	Y+5, r26	; 0x05
    4c58:	be 83       	std	Y+6, r27	; 0x06
		LCD_enuDisplayChar('-');
		Local_s32Number *= -1;
	}
	if((Copy_u8Num < 1.0 && Copy_u8Num > 0.0) || (Copy_u8Num > -1.0 && Copy_u8Num < 0.0)) LCD_enuDisplayChar('0');

	while (Local_s32Number > 0 && Local_enuErrorState == ES_OK)
    4c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    4c5e:	ad 81       	ldd	r26, Y+5	; 0x05
    4c60:	be 81       	ldd	r27, Y+6	; 0x06
    4c62:	18 16       	cp	r1, r24
    4c64:	19 06       	cpc	r1, r25
    4c66:	1a 06       	cpc	r1, r26
    4c68:	1b 06       	cpc	r1, r27
    4c6a:	9c f4       	brge	.+38     	; 0x4c92 <LCD_enuWriteNumber+0x1c6>
    4c6c:	88 85       	ldd	r24, Y+8	; 0x08
    4c6e:	88 23       	and	r24, r24
    4c70:	41 f2       	breq	.-112    	; 0x4c02 <LCD_enuWriteNumber+0x136>
    4c72:	0f c0       	rjmp	.+30     	; 0x4c92 <LCD_enuWriteNumber+0x1c6>
		Local_s32Number /= 10;
	}

	while( Local_u8Iterator >= 0 && Local_enuErrorState == ES_OK)
	{
		Local_enuErrorState = LCD_enuLatch( Local_Au8Digits[Local_u8Iterator] + '0');
    4c74:	8f 81       	ldd	r24, Y+7	; 0x07
    4c76:	99 27       	eor	r25, r25
    4c78:	87 fd       	sbrc	r24, 7
    4c7a:	90 95       	com	r25
    4c7c:	fc 01       	movw	r30, r24
    4c7e:	e9 57       	subi	r30, 0x79	; 121
    4c80:	fe 4f       	sbci	r31, 0xFE	; 254
    4c82:	80 81       	ld	r24, Z
    4c84:	80 5d       	subi	r24, 0xD0	; 208
    4c86:	0e 94 48 21 	call	0x4290	; 0x4290 <LCD_enuLatch>
    4c8a:	88 87       	std	Y+8, r24	; 0x08
		Local_u8Iterator--;
    4c8c:	8f 81       	ldd	r24, Y+7	; 0x07
    4c8e:	81 50       	subi	r24, 0x01	; 1
    4c90:	8f 83       	std	Y+7, r24	; 0x07
		Local_u8Iterator++;
		Local_Au8Digits[Local_u8Iterator] = Local_s32Number % 10;
		Local_s32Number /= 10;
	}

	while( Local_u8Iterator >= 0 && Local_enuErrorState == ES_OK)
    4c92:	8f 81       	ldd	r24, Y+7	; 0x07
    4c94:	88 23       	and	r24, r24
    4c96:	1c f0       	brlt	.+6      	; 0x4c9e <LCD_enuWriteNumber+0x1d2>
    4c98:	88 85       	ldd	r24, Y+8	; 0x08
    4c9a:	88 23       	and	r24, r24
    4c9c:	59 f3       	breq	.-42     	; 0x4c74 <LCD_enuWriteNumber+0x1a8>
	{
		Local_enuErrorState = LCD_enuLatch( Local_Au8Digits[Local_u8Iterator] + '0');
		Local_u8Iterator--;
	}

	Copy_u8Num -= (s32)Copy_u8Num;
    4c9e:	69 85       	ldd	r22, Y+9	; 0x09
    4ca0:	7a 85       	ldd	r23, Y+10	; 0x0a
    4ca2:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ca4:	9c 85       	ldd	r25, Y+12	; 0x0c
    4ca6:	0e 94 65 05 	call	0xaca	; 0xaca <__fixsfsi>
    4caa:	dc 01       	movw	r26, r24
    4cac:	cb 01       	movw	r24, r22
    4cae:	bc 01       	movw	r22, r24
    4cb0:	cd 01       	movw	r24, r26
    4cb2:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatsisf>
    4cb6:	9b 01       	movw	r18, r22
    4cb8:	ac 01       	movw	r20, r24
    4cba:	69 85       	ldd	r22, Y+9	; 0x09
    4cbc:	7a 85       	ldd	r23, Y+10	; 0x0a
    4cbe:	8b 85       	ldd	r24, Y+11	; 0x0b
    4cc0:	9c 85       	ldd	r25, Y+12	; 0x0c
    4cc2:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
    4cc6:	dc 01       	movw	r26, r24
    4cc8:	cb 01       	movw	r24, r22
    4cca:	89 87       	std	Y+9, r24	; 0x09
    4ccc:	9a 87       	std	Y+10, r25	; 0x0a
    4cce:	ab 87       	std	Y+11, r26	; 0x0b
    4cd0:	bc 87       	std	Y+12, r27	; 0x0c
	if(Copy_u8Num != 0.0)
    4cd2:	69 85       	ldd	r22, Y+9	; 0x09
    4cd4:	7a 85       	ldd	r23, Y+10	; 0x0a
    4cd6:	8b 85       	ldd	r24, Y+11	; 0x0b
    4cd8:	9c 85       	ldd	r25, Y+12	; 0x0c
    4cda:	20 e0       	ldi	r18, 0x00	; 0
    4cdc:	30 e0       	ldi	r19, 0x00	; 0
    4cde:	40 e0       	ldi	r20, 0x00	; 0
    4ce0:	50 e0       	ldi	r21, 0x00	; 0
    4ce2:	0e 94 47 04 	call	0x88e	; 0x88e <__nesf2>
    4ce6:	88 23       	and	r24, r24
    4ce8:	09 f4       	brne	.+2      	; 0x4cec <LCD_enuWriteNumber+0x220>
    4cea:	7e c0       	rjmp	.+252    	; 0x4de8 <LCD_enuWriteNumber+0x31c>
	{
		LCD_enuLatch('.');
    4cec:	8e e2       	ldi	r24, 0x2E	; 46
    4cee:	0e 94 48 21 	call	0x4290	; 0x4290 <LCD_enuLatch>
		if(Copy_u8Num < 0) Copy_u8Num *= -1;
    4cf2:	69 85       	ldd	r22, Y+9	; 0x09
    4cf4:	7a 85       	ldd	r23, Y+10	; 0x0a
    4cf6:	8b 85       	ldd	r24, Y+11	; 0x0b
    4cf8:	9c 85       	ldd	r25, Y+12	; 0x0c
    4cfa:	20 e0       	ldi	r18, 0x00	; 0
    4cfc:	30 e0       	ldi	r19, 0x00	; 0
    4cfe:	40 e0       	ldi	r20, 0x00	; 0
    4d00:	50 e0       	ldi	r21, 0x00	; 0
    4d02:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__ltsf2>
    4d06:	88 23       	and	r24, r24
    4d08:	4c f4       	brge	.+18     	; 0x4d1c <LCD_enuWriteNumber+0x250>
    4d0a:	89 85       	ldd	r24, Y+9	; 0x09
    4d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d0e:	ab 85       	ldd	r26, Y+11	; 0x0b
    4d10:	bc 85       	ldd	r27, Y+12	; 0x0c
    4d12:	b0 58       	subi	r27, 0x80	; 128
    4d14:	89 87       	std	Y+9, r24	; 0x09
    4d16:	9a 87       	std	Y+10, r25	; 0x0a
    4d18:	ab 87       	std	Y+11, r26	; 0x0b
    4d1a:	bc 87       	std	Y+12, r27	; 0x0c
		u16 base = 10;
    4d1c:	8a e0       	ldi	r24, 0x0A	; 10
    4d1e:	90 e0       	ldi	r25, 0x00	; 0
    4d20:	9a 83       	std	Y+2, r25	; 0x02
    4d22:	89 83       	std	Y+1, r24	; 0x01
    4d24:	44 c0       	rjmp	.+136    	; 0x4dae <LCD_enuWriteNumber+0x2e2>
		while (base <= 10000)
		{
			Local_u8Iterator++;
    4d26:	8f 81       	ldd	r24, Y+7	; 0x07
    4d28:	8f 5f       	subi	r24, 0xFF	; 255
    4d2a:	8f 83       	std	Y+7, r24	; 0x07
			Local_Au8Digits[3 - Local_u8Iterator] = ((s32)(Copy_u8Num*base))%10;
    4d2c:	8f 81       	ldd	r24, Y+7	; 0x07
    4d2e:	28 2f       	mov	r18, r24
    4d30:	33 27       	eor	r19, r19
    4d32:	27 fd       	sbrc	r18, 7
    4d34:	30 95       	com	r19
    4d36:	83 e0       	ldi	r24, 0x03	; 3
    4d38:	90 e0       	ldi	r25, 0x00	; 0
    4d3a:	8c 01       	movw	r16, r24
    4d3c:	02 1b       	sub	r16, r18
    4d3e:	13 0b       	sbc	r17, r19
    4d40:	89 81       	ldd	r24, Y+1	; 0x01
    4d42:	9a 81       	ldd	r25, Y+2	; 0x02
    4d44:	cc 01       	movw	r24, r24
    4d46:	a0 e0       	ldi	r26, 0x00	; 0
    4d48:	b0 e0       	ldi	r27, 0x00	; 0
    4d4a:	bc 01       	movw	r22, r24
    4d4c:	cd 01       	movw	r24, r26
    4d4e:	0e 94 b9 05 	call	0xb72	; 0xb72 <__floatunsisf>
    4d52:	dc 01       	movw	r26, r24
    4d54:	cb 01       	movw	r24, r22
    4d56:	bc 01       	movw	r22, r24
    4d58:	cd 01       	movw	r24, r26
    4d5a:	29 85       	ldd	r18, Y+9	; 0x09
    4d5c:	3a 85       	ldd	r19, Y+10	; 0x0a
    4d5e:	4b 85       	ldd	r20, Y+11	; 0x0b
    4d60:	5c 85       	ldd	r21, Y+12	; 0x0c
    4d62:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    4d66:	dc 01       	movw	r26, r24
    4d68:	cb 01       	movw	r24, r22
    4d6a:	bc 01       	movw	r22, r24
    4d6c:	cd 01       	movw	r24, r26
    4d6e:	0e 94 65 05 	call	0xaca	; 0xaca <__fixsfsi>
    4d72:	dc 01       	movw	r26, r24
    4d74:	cb 01       	movw	r24, r22
    4d76:	2a e0       	ldi	r18, 0x0A	; 10
    4d78:	30 e0       	ldi	r19, 0x00	; 0
    4d7a:	40 e0       	ldi	r20, 0x00	; 0
    4d7c:	50 e0       	ldi	r21, 0x00	; 0
    4d7e:	bc 01       	movw	r22, r24
    4d80:	cd 01       	movw	r24, r26
    4d82:	0e 94 74 30 	call	0x60e8	; 0x60e8 <__divmodsi4>
    4d86:	dc 01       	movw	r26, r24
    4d88:	cb 01       	movw	r24, r22
    4d8a:	f8 01       	movw	r30, r16
    4d8c:	e9 57       	subi	r30, 0x79	; 121
    4d8e:	fe 4f       	sbci	r31, 0xFE	; 254
    4d90:	80 83       	st	Z, r24
			base *= 10;
    4d92:	89 81       	ldd	r24, Y+1	; 0x01
    4d94:	9a 81       	ldd	r25, Y+2	; 0x02
    4d96:	9c 01       	movw	r18, r24
    4d98:	22 0f       	add	r18, r18
    4d9a:	33 1f       	adc	r19, r19
    4d9c:	c9 01       	movw	r24, r18
    4d9e:	88 0f       	add	r24, r24
    4da0:	99 1f       	adc	r25, r25
    4da2:	88 0f       	add	r24, r24
    4da4:	99 1f       	adc	r25, r25
    4da6:	82 0f       	add	r24, r18
    4da8:	93 1f       	adc	r25, r19
    4daa:	9a 83       	std	Y+2, r25	; 0x02
    4dac:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Num != 0.0)
	{
		LCD_enuLatch('.');
		if(Copy_u8Num < 0) Copy_u8Num *= -1;
		u16 base = 10;
		while (base <= 10000)
    4dae:	89 81       	ldd	r24, Y+1	; 0x01
    4db0:	9a 81       	ldd	r25, Y+2	; 0x02
    4db2:	27 e2       	ldi	r18, 0x27	; 39
    4db4:	81 31       	cpi	r24, 0x11	; 17
    4db6:	92 07       	cpc	r25, r18
    4db8:	08 f4       	brcc	.+2      	; 0x4dbc <LCD_enuWriteNumber+0x2f0>
    4dba:	b5 cf       	rjmp	.-150    	; 0x4d26 <LCD_enuWriteNumber+0x25a>
    4dbc:	0f c0       	rjmp	.+30     	; 0x4ddc <LCD_enuWriteNumber+0x310>
			base *= 10;
		}

		while( Local_u8Iterator >= 0 && Local_enuErrorState == ES_OK)
		{
			Local_enuErrorState = LCD_enuLatch( Local_Au8Digits[Local_u8Iterator] + '0');
    4dbe:	8f 81       	ldd	r24, Y+7	; 0x07
    4dc0:	99 27       	eor	r25, r25
    4dc2:	87 fd       	sbrc	r24, 7
    4dc4:	90 95       	com	r25
    4dc6:	fc 01       	movw	r30, r24
    4dc8:	e9 57       	subi	r30, 0x79	; 121
    4dca:	fe 4f       	sbci	r31, 0xFE	; 254
    4dcc:	80 81       	ld	r24, Z
    4dce:	80 5d       	subi	r24, 0xD0	; 208
    4dd0:	0e 94 48 21 	call	0x4290	; 0x4290 <LCD_enuLatch>
    4dd4:	88 87       	std	Y+8, r24	; 0x08
			Local_u8Iterator--;
    4dd6:	8f 81       	ldd	r24, Y+7	; 0x07
    4dd8:	81 50       	subi	r24, 0x01	; 1
    4dda:	8f 83       	std	Y+7, r24	; 0x07
			Local_u8Iterator++;
			Local_Au8Digits[3 - Local_u8Iterator] = ((s32)(Copy_u8Num*base))%10;
			base *= 10;
		}

		while( Local_u8Iterator >= 0 && Local_enuErrorState == ES_OK)
    4ddc:	8f 81       	ldd	r24, Y+7	; 0x07
    4dde:	88 23       	and	r24, r24
    4de0:	1c f0       	brlt	.+6      	; 0x4de8 <LCD_enuWriteNumber+0x31c>
    4de2:	88 85       	ldd	r24, Y+8	; 0x08
    4de4:	88 23       	and	r24, r24
    4de6:	59 f3       	breq	.-42     	; 0x4dbe <LCD_enuWriteNumber+0x2f2>
			Local_u8Iterator--;
		}

	}

	return Local_enuErrorState;
    4de8:	88 85       	ldd	r24, Y+8	; 0x08
    4dea:	8f 87       	std	Y+15, r24	; 0x0f
    4dec:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    4dee:	2f 96       	adiw	r28, 0x0f	; 15
    4df0:	0f b6       	in	r0, 0x3f	; 63
    4df2:	f8 94       	cli
    4df4:	de bf       	out	0x3e, r29	; 62
    4df6:	0f be       	out	0x3f, r0	; 63
    4df8:	cd bf       	out	0x3d, r28	; 61
    4dfa:	cf 91       	pop	r28
    4dfc:	df 91       	pop	r29
    4dfe:	1f 91       	pop	r17
    4e00:	0f 91       	pop	r16
    4e02:	08 95       	ret

00004e04 <KPD_enuInit>:
#include "Keypad_priv.h"
#include "Keypad_config.h"


ES_t KPD_enuInit(void)
{
    4e04:	2f 92       	push	r2
    4e06:	3f 92       	push	r3
    4e08:	4f 92       	push	r4
    4e0a:	5f 92       	push	r5
    4e0c:	6f 92       	push	r6
    4e0e:	7f 92       	push	r7
    4e10:	8f 92       	push	r8
    4e12:	9f 92       	push	r9
    4e14:	af 92       	push	r10
    4e16:	bf 92       	push	r11
    4e18:	cf 92       	push	r12
    4e1a:	df 92       	push	r13
    4e1c:	ef 92       	push	r14
    4e1e:	ff 92       	push	r15
    4e20:	0f 93       	push	r16
    4e22:	1f 93       	push	r17
    4e24:	df 93       	push	r29
    4e26:	cf 93       	push	r28
    4e28:	00 d0       	rcall	.+0      	; 0x4e2a <KPD_enuInit+0x26>
    4e2a:	0f 92       	push	r0
    4e2c:	cd b7       	in	r28, 0x3d	; 61
    4e2e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    4e30:	81 e0       	ldi	r24, 0x01	; 1
    4e32:	8a 83       	std	Y+2, r24	; 0x02

	static u64 Local_u64Check = 0;

	/* Set Column Pins as Output */
	Local_u64Check |= (DIO_enuSetPinDirection(KPD_COLUMN0_PORT, KPD_COLUMN0_PIN, DIO_u8OUTPUT) << 0);
    4e34:	81 e0       	ldi	r24, 0x01	; 1
    4e36:	63 e0       	ldi	r22, 0x03	; 3
    4e38:	41 e0       	ldi	r20, 0x01	; 1
    4e3a:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    4e3e:	28 2e       	mov	r2, r24
    4e40:	33 24       	eor	r3, r3
    4e42:	44 24       	eor	r4, r4
    4e44:	55 24       	eor	r5, r5
    4e46:	66 24       	eor	r6, r6
    4e48:	77 24       	eor	r7, r7
    4e4a:	43 01       	movw	r8, r6
    4e4c:	a0 90 f1 01 	lds	r10, 0x01F1
    4e50:	b0 90 f2 01 	lds	r11, 0x01F2
    4e54:	c0 90 f3 01 	lds	r12, 0x01F3
    4e58:	d0 90 f4 01 	lds	r13, 0x01F4
    4e5c:	e0 90 f5 01 	lds	r14, 0x01F5
    4e60:	f0 90 f6 01 	lds	r15, 0x01F6
    4e64:	00 91 f7 01 	lds	r16, 0x01F7
    4e68:	10 91 f8 01 	lds	r17, 0x01F8
    4e6c:	22 2d       	mov	r18, r2
    4e6e:	2a 29       	or	r18, r10
    4e70:	33 2d       	mov	r19, r3
    4e72:	3b 29       	or	r19, r11
    4e74:	44 2d       	mov	r20, r4
    4e76:	4c 29       	or	r20, r12
    4e78:	55 2d       	mov	r21, r5
    4e7a:	5d 29       	or	r21, r13
    4e7c:	66 2d       	mov	r22, r6
    4e7e:	6e 29       	or	r22, r14
    4e80:	77 2d       	mov	r23, r7
    4e82:	7f 29       	or	r23, r15
    4e84:	88 2d       	mov	r24, r8
    4e86:	80 2b       	or	r24, r16
    4e88:	99 2d       	mov	r25, r9
    4e8a:	91 2b       	or	r25, r17
    4e8c:	20 93 f1 01 	sts	0x01F1, r18
    4e90:	30 93 f2 01 	sts	0x01F2, r19
    4e94:	40 93 f3 01 	sts	0x01F3, r20
    4e98:	50 93 f4 01 	sts	0x01F4, r21
    4e9c:	60 93 f5 01 	sts	0x01F5, r22
    4ea0:	70 93 f6 01 	sts	0x01F6, r23
    4ea4:	80 93 f7 01 	sts	0x01F7, r24
    4ea8:	90 93 f8 01 	sts	0x01F8, r25
	Local_u64Check |= (DIO_enuSetPinDirection(KPD_COLUMN1_PORT, KPD_COLUMN1_PIN, DIO_u8OUTPUT) << 3);
    4eac:	81 e0       	ldi	r24, 0x01	; 1
    4eae:	64 e0       	ldi	r22, 0x04	; 4
    4eb0:	41 e0       	ldi	r20, 0x01	; 1
    4eb2:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    4eb6:	88 2f       	mov	r24, r24
    4eb8:	90 e0       	ldi	r25, 0x00	; 0
    4eba:	9c 01       	movw	r18, r24
    4ebc:	22 0f       	add	r18, r18
    4ebe:	33 1f       	adc	r19, r19
    4ec0:	22 0f       	add	r18, r18
    4ec2:	33 1f       	adc	r19, r19
    4ec4:	22 0f       	add	r18, r18
    4ec6:	33 1f       	adc	r19, r19
    4ec8:	c9 01       	movw	r24, r18
    4eca:	99 0f       	add	r25, r25
    4ecc:	88 0b       	sbc	r24, r24
    4ece:	98 2f       	mov	r25, r24
    4ed0:	19 01       	movw	r2, r18
    4ed2:	48 2e       	mov	r4, r24
    4ed4:	58 2e       	mov	r5, r24
    4ed6:	68 2e       	mov	r6, r24
    4ed8:	78 2e       	mov	r7, r24
    4eda:	88 2e       	mov	r8, r24
    4edc:	98 2e       	mov	r9, r24
    4ede:	a0 90 f1 01 	lds	r10, 0x01F1
    4ee2:	b0 90 f2 01 	lds	r11, 0x01F2
    4ee6:	c0 90 f3 01 	lds	r12, 0x01F3
    4eea:	d0 90 f4 01 	lds	r13, 0x01F4
    4eee:	e0 90 f5 01 	lds	r14, 0x01F5
    4ef2:	f0 90 f6 01 	lds	r15, 0x01F6
    4ef6:	00 91 f7 01 	lds	r16, 0x01F7
    4efa:	10 91 f8 01 	lds	r17, 0x01F8
    4efe:	22 2d       	mov	r18, r2
    4f00:	2a 29       	or	r18, r10
    4f02:	33 2d       	mov	r19, r3
    4f04:	3b 29       	or	r19, r11
    4f06:	44 2d       	mov	r20, r4
    4f08:	4c 29       	or	r20, r12
    4f0a:	55 2d       	mov	r21, r5
    4f0c:	5d 29       	or	r21, r13
    4f0e:	66 2d       	mov	r22, r6
    4f10:	6e 29       	or	r22, r14
    4f12:	77 2d       	mov	r23, r7
    4f14:	7f 29       	or	r23, r15
    4f16:	88 2d       	mov	r24, r8
    4f18:	80 2b       	or	r24, r16
    4f1a:	99 2d       	mov	r25, r9
    4f1c:	91 2b       	or	r25, r17
    4f1e:	20 93 f1 01 	sts	0x01F1, r18
    4f22:	30 93 f2 01 	sts	0x01F2, r19
    4f26:	40 93 f3 01 	sts	0x01F3, r20
    4f2a:	50 93 f4 01 	sts	0x01F4, r21
    4f2e:	60 93 f5 01 	sts	0x01F5, r22
    4f32:	70 93 f6 01 	sts	0x01F6, r23
    4f36:	80 93 f7 01 	sts	0x01F7, r24
    4f3a:	90 93 f8 01 	sts	0x01F8, r25
	Local_u64Check |= (DIO_enuSetPinDirection(KPD_COLUMN2_PORT, KPD_COLUMN2_PIN, DIO_u8OUTPUT) << 6);
    4f3e:	81 e0       	ldi	r24, 0x01	; 1
    4f40:	65 e0       	ldi	r22, 0x05	; 5
    4f42:	41 e0       	ldi	r20, 0x01	; 1
    4f44:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    4f48:	88 2f       	mov	r24, r24
    4f4a:	90 e0       	ldi	r25, 0x00	; 0
    4f4c:	9c 01       	movw	r18, r24
    4f4e:	00 24       	eor	r0, r0
    4f50:	36 95       	lsr	r19
    4f52:	27 95       	ror	r18
    4f54:	07 94       	ror	r0
    4f56:	36 95       	lsr	r19
    4f58:	27 95       	ror	r18
    4f5a:	07 94       	ror	r0
    4f5c:	32 2f       	mov	r19, r18
    4f5e:	20 2d       	mov	r18, r0
    4f60:	c9 01       	movw	r24, r18
    4f62:	99 0f       	add	r25, r25
    4f64:	88 0b       	sbc	r24, r24
    4f66:	98 2f       	mov	r25, r24
    4f68:	19 01       	movw	r2, r18
    4f6a:	48 2e       	mov	r4, r24
    4f6c:	58 2e       	mov	r5, r24
    4f6e:	68 2e       	mov	r6, r24
    4f70:	78 2e       	mov	r7, r24
    4f72:	88 2e       	mov	r8, r24
    4f74:	98 2e       	mov	r9, r24
    4f76:	a0 90 f1 01 	lds	r10, 0x01F1
    4f7a:	b0 90 f2 01 	lds	r11, 0x01F2
    4f7e:	c0 90 f3 01 	lds	r12, 0x01F3
    4f82:	d0 90 f4 01 	lds	r13, 0x01F4
    4f86:	e0 90 f5 01 	lds	r14, 0x01F5
    4f8a:	f0 90 f6 01 	lds	r15, 0x01F6
    4f8e:	00 91 f7 01 	lds	r16, 0x01F7
    4f92:	10 91 f8 01 	lds	r17, 0x01F8
    4f96:	22 2d       	mov	r18, r2
    4f98:	2a 29       	or	r18, r10
    4f9a:	33 2d       	mov	r19, r3
    4f9c:	3b 29       	or	r19, r11
    4f9e:	44 2d       	mov	r20, r4
    4fa0:	4c 29       	or	r20, r12
    4fa2:	55 2d       	mov	r21, r5
    4fa4:	5d 29       	or	r21, r13
    4fa6:	66 2d       	mov	r22, r6
    4fa8:	6e 29       	or	r22, r14
    4faa:	77 2d       	mov	r23, r7
    4fac:	7f 29       	or	r23, r15
    4fae:	88 2d       	mov	r24, r8
    4fb0:	80 2b       	or	r24, r16
    4fb2:	99 2d       	mov	r25, r9
    4fb4:	91 2b       	or	r25, r17
    4fb6:	20 93 f1 01 	sts	0x01F1, r18
    4fba:	30 93 f2 01 	sts	0x01F2, r19
    4fbe:	40 93 f3 01 	sts	0x01F3, r20
    4fc2:	50 93 f4 01 	sts	0x01F4, r21
    4fc6:	60 93 f5 01 	sts	0x01F5, r22
    4fca:	70 93 f6 01 	sts	0x01F6, r23
    4fce:	80 93 f7 01 	sts	0x01F7, r24
    4fd2:	90 93 f8 01 	sts	0x01F8, r25
	Local_u64Check |= ((u64)DIO_enuSetPinDirection(KPD_COLUMN3_PORT, KPD_COLUMN3_PIN, DIO_u8OUTPUT) << 9);
    4fd6:	81 e0       	ldi	r24, 0x01	; 1
    4fd8:	66 e0       	ldi	r22, 0x06	; 6
    4fda:	41 e0       	ldi	r20, 0x01	; 1
    4fdc:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    4fe0:	a8 2e       	mov	r10, r24
    4fe2:	bb 24       	eor	r11, r11
    4fe4:	cc 24       	eor	r12, r12
    4fe6:	dd 24       	eor	r13, r13
    4fe8:	ee 24       	eor	r14, r14
    4fea:	ff 24       	eor	r15, r15
    4fec:	87 01       	movw	r16, r14
    4fee:	2a 2d       	mov	r18, r10
    4ff0:	3b 2d       	mov	r19, r11
    4ff2:	4c 2d       	mov	r20, r12
    4ff4:	5d 2d       	mov	r21, r13
    4ff6:	6e 2d       	mov	r22, r14
    4ff8:	7f 2d       	mov	r23, r15
    4ffa:	80 2f       	mov	r24, r16
    4ffc:	91 2f       	mov	r25, r17
    4ffe:	09 e0       	ldi	r16, 0x09	; 9
    5000:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    5004:	a2 2e       	mov	r10, r18
    5006:	b3 2e       	mov	r11, r19
    5008:	c4 2e       	mov	r12, r20
    500a:	d5 2e       	mov	r13, r21
    500c:	e6 2e       	mov	r14, r22
    500e:	f7 2e       	mov	r15, r23
    5010:	08 2f       	mov	r16, r24
    5012:	19 2f       	mov	r17, r25
    5014:	2a 2c       	mov	r2, r10
    5016:	3b 2c       	mov	r3, r11
    5018:	4c 2c       	mov	r4, r12
    501a:	5d 2c       	mov	r5, r13
    501c:	6e 2c       	mov	r6, r14
    501e:	7f 2c       	mov	r7, r15
    5020:	80 2e       	mov	r8, r16
    5022:	91 2e       	mov	r9, r17
    5024:	a0 90 f1 01 	lds	r10, 0x01F1
    5028:	b0 90 f2 01 	lds	r11, 0x01F2
    502c:	c0 90 f3 01 	lds	r12, 0x01F3
    5030:	d0 90 f4 01 	lds	r13, 0x01F4
    5034:	e0 90 f5 01 	lds	r14, 0x01F5
    5038:	f0 90 f6 01 	lds	r15, 0x01F6
    503c:	00 91 f7 01 	lds	r16, 0x01F7
    5040:	10 91 f8 01 	lds	r17, 0x01F8
    5044:	22 2d       	mov	r18, r2
    5046:	2a 29       	or	r18, r10
    5048:	33 2d       	mov	r19, r3
    504a:	3b 29       	or	r19, r11
    504c:	44 2d       	mov	r20, r4
    504e:	4c 29       	or	r20, r12
    5050:	55 2d       	mov	r21, r5
    5052:	5d 29       	or	r21, r13
    5054:	66 2d       	mov	r22, r6
    5056:	6e 29       	or	r22, r14
    5058:	77 2d       	mov	r23, r7
    505a:	7f 29       	or	r23, r15
    505c:	88 2d       	mov	r24, r8
    505e:	80 2b       	or	r24, r16
    5060:	99 2d       	mov	r25, r9
    5062:	91 2b       	or	r25, r17
    5064:	20 93 f1 01 	sts	0x01F1, r18
    5068:	30 93 f2 01 	sts	0x01F2, r19
    506c:	40 93 f3 01 	sts	0x01F3, r20
    5070:	50 93 f4 01 	sts	0x01F4, r21
    5074:	60 93 f5 01 	sts	0x01F5, r22
    5078:	70 93 f6 01 	sts	0x01F6, r23
    507c:	80 93 f7 01 	sts	0x01F7, r24
    5080:	90 93 f8 01 	sts	0x01F8, r25
	Local_u64Check |= ((u64)DIO_enuSetPinDirection(KPD_COLUMN4_PORT, KPD_COLUMN4_PIN, DIO_u8OUTPUT) << 12);
    5084:	81 e0       	ldi	r24, 0x01	; 1
    5086:	67 e0       	ldi	r22, 0x07	; 7
    5088:	41 e0       	ldi	r20, 0x01	; 1
    508a:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    508e:	a8 2e       	mov	r10, r24
    5090:	bb 24       	eor	r11, r11
    5092:	cc 24       	eor	r12, r12
    5094:	dd 24       	eor	r13, r13
    5096:	ee 24       	eor	r14, r14
    5098:	ff 24       	eor	r15, r15
    509a:	87 01       	movw	r16, r14
    509c:	2a 2d       	mov	r18, r10
    509e:	3b 2d       	mov	r19, r11
    50a0:	4c 2d       	mov	r20, r12
    50a2:	5d 2d       	mov	r21, r13
    50a4:	6e 2d       	mov	r22, r14
    50a6:	7f 2d       	mov	r23, r15
    50a8:	80 2f       	mov	r24, r16
    50aa:	91 2f       	mov	r25, r17
    50ac:	0c e0       	ldi	r16, 0x0C	; 12
    50ae:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    50b2:	a2 2e       	mov	r10, r18
    50b4:	b3 2e       	mov	r11, r19
    50b6:	c4 2e       	mov	r12, r20
    50b8:	d5 2e       	mov	r13, r21
    50ba:	e6 2e       	mov	r14, r22
    50bc:	f7 2e       	mov	r15, r23
    50be:	08 2f       	mov	r16, r24
    50c0:	19 2f       	mov	r17, r25
    50c2:	2a 2c       	mov	r2, r10
    50c4:	3b 2c       	mov	r3, r11
    50c6:	4c 2c       	mov	r4, r12
    50c8:	5d 2c       	mov	r5, r13
    50ca:	6e 2c       	mov	r6, r14
    50cc:	7f 2c       	mov	r7, r15
    50ce:	80 2e       	mov	r8, r16
    50d0:	91 2e       	mov	r9, r17
    50d2:	a0 90 f1 01 	lds	r10, 0x01F1
    50d6:	b0 90 f2 01 	lds	r11, 0x01F2
    50da:	c0 90 f3 01 	lds	r12, 0x01F3
    50de:	d0 90 f4 01 	lds	r13, 0x01F4
    50e2:	e0 90 f5 01 	lds	r14, 0x01F5
    50e6:	f0 90 f6 01 	lds	r15, 0x01F6
    50ea:	00 91 f7 01 	lds	r16, 0x01F7
    50ee:	10 91 f8 01 	lds	r17, 0x01F8
    50f2:	22 2d       	mov	r18, r2
    50f4:	2a 29       	or	r18, r10
    50f6:	33 2d       	mov	r19, r3
    50f8:	3b 29       	or	r19, r11
    50fa:	44 2d       	mov	r20, r4
    50fc:	4c 29       	or	r20, r12
    50fe:	55 2d       	mov	r21, r5
    5100:	5d 29       	or	r21, r13
    5102:	66 2d       	mov	r22, r6
    5104:	6e 29       	or	r22, r14
    5106:	77 2d       	mov	r23, r7
    5108:	7f 29       	or	r23, r15
    510a:	88 2d       	mov	r24, r8
    510c:	80 2b       	or	r24, r16
    510e:	99 2d       	mov	r25, r9
    5110:	91 2b       	or	r25, r17
    5112:	20 93 f1 01 	sts	0x01F1, r18
    5116:	30 93 f2 01 	sts	0x01F2, r19
    511a:	40 93 f3 01 	sts	0x01F3, r20
    511e:	50 93 f4 01 	sts	0x01F4, r21
    5122:	60 93 f5 01 	sts	0x01F5, r22
    5126:	70 93 f6 01 	sts	0x01F6, r23
    512a:	80 93 f7 01 	sts	0x01F7, r24
    512e:	90 93 f8 01 	sts	0x01F8, r25
	Local_u64Check |= ((u64)DIO_enuSetPinDirection(KPD_COLUMN5_PORT, KPD_COLUMN5_PIN, DIO_u8OUTPUT) << 15);
    5132:	82 e0       	ldi	r24, 0x02	; 2
    5134:	60 e0       	ldi	r22, 0x00	; 0
    5136:	41 e0       	ldi	r20, 0x01	; 1
    5138:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    513c:	a8 2e       	mov	r10, r24
    513e:	bb 24       	eor	r11, r11
    5140:	cc 24       	eor	r12, r12
    5142:	dd 24       	eor	r13, r13
    5144:	ee 24       	eor	r14, r14
    5146:	ff 24       	eor	r15, r15
    5148:	87 01       	movw	r16, r14
    514a:	2a 2d       	mov	r18, r10
    514c:	3b 2d       	mov	r19, r11
    514e:	4c 2d       	mov	r20, r12
    5150:	5d 2d       	mov	r21, r13
    5152:	6e 2d       	mov	r22, r14
    5154:	7f 2d       	mov	r23, r15
    5156:	80 2f       	mov	r24, r16
    5158:	91 2f       	mov	r25, r17
    515a:	0f e0       	ldi	r16, 0x0F	; 15
    515c:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    5160:	a2 2e       	mov	r10, r18
    5162:	b3 2e       	mov	r11, r19
    5164:	c4 2e       	mov	r12, r20
    5166:	d5 2e       	mov	r13, r21
    5168:	e6 2e       	mov	r14, r22
    516a:	f7 2e       	mov	r15, r23
    516c:	08 2f       	mov	r16, r24
    516e:	19 2f       	mov	r17, r25
    5170:	2a 2c       	mov	r2, r10
    5172:	3b 2c       	mov	r3, r11
    5174:	4c 2c       	mov	r4, r12
    5176:	5d 2c       	mov	r5, r13
    5178:	6e 2c       	mov	r6, r14
    517a:	7f 2c       	mov	r7, r15
    517c:	80 2e       	mov	r8, r16
    517e:	91 2e       	mov	r9, r17
    5180:	a0 90 f1 01 	lds	r10, 0x01F1
    5184:	b0 90 f2 01 	lds	r11, 0x01F2
    5188:	c0 90 f3 01 	lds	r12, 0x01F3
    518c:	d0 90 f4 01 	lds	r13, 0x01F4
    5190:	e0 90 f5 01 	lds	r14, 0x01F5
    5194:	f0 90 f6 01 	lds	r15, 0x01F6
    5198:	00 91 f7 01 	lds	r16, 0x01F7
    519c:	10 91 f8 01 	lds	r17, 0x01F8
    51a0:	22 2d       	mov	r18, r2
    51a2:	2a 29       	or	r18, r10
    51a4:	33 2d       	mov	r19, r3
    51a6:	3b 29       	or	r19, r11
    51a8:	44 2d       	mov	r20, r4
    51aa:	4c 29       	or	r20, r12
    51ac:	55 2d       	mov	r21, r5
    51ae:	5d 29       	or	r21, r13
    51b0:	66 2d       	mov	r22, r6
    51b2:	6e 29       	or	r22, r14
    51b4:	77 2d       	mov	r23, r7
    51b6:	7f 29       	or	r23, r15
    51b8:	88 2d       	mov	r24, r8
    51ba:	80 2b       	or	r24, r16
    51bc:	99 2d       	mov	r25, r9
    51be:	91 2b       	or	r25, r17
    51c0:	20 93 f1 01 	sts	0x01F1, r18
    51c4:	30 93 f2 01 	sts	0x01F2, r19
    51c8:	40 93 f3 01 	sts	0x01F3, r20
    51cc:	50 93 f4 01 	sts	0x01F4, r21
    51d0:	60 93 f5 01 	sts	0x01F5, r22
    51d4:	70 93 f6 01 	sts	0x01F6, r23
    51d8:	80 93 f7 01 	sts	0x01F7, r24
    51dc:	90 93 f8 01 	sts	0x01F8, r25
	Local_u64Check |= ((u64)DIO_enuSetPinDirection(KPD_COLUMN6_PORT, KPD_COLUMN6_PIN, DIO_u8OUTPUT) << 18);
    51e0:	82 e0       	ldi	r24, 0x02	; 2
    51e2:	61 e0       	ldi	r22, 0x01	; 1
    51e4:	41 e0       	ldi	r20, 0x01	; 1
    51e6:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    51ea:	a8 2e       	mov	r10, r24
    51ec:	bb 24       	eor	r11, r11
    51ee:	cc 24       	eor	r12, r12
    51f0:	dd 24       	eor	r13, r13
    51f2:	ee 24       	eor	r14, r14
    51f4:	ff 24       	eor	r15, r15
    51f6:	87 01       	movw	r16, r14
    51f8:	2a 2d       	mov	r18, r10
    51fa:	3b 2d       	mov	r19, r11
    51fc:	4c 2d       	mov	r20, r12
    51fe:	5d 2d       	mov	r21, r13
    5200:	6e 2d       	mov	r22, r14
    5202:	7f 2d       	mov	r23, r15
    5204:	80 2f       	mov	r24, r16
    5206:	91 2f       	mov	r25, r17
    5208:	02 e1       	ldi	r16, 0x12	; 18
    520a:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    520e:	a2 2e       	mov	r10, r18
    5210:	b3 2e       	mov	r11, r19
    5212:	c4 2e       	mov	r12, r20
    5214:	d5 2e       	mov	r13, r21
    5216:	e6 2e       	mov	r14, r22
    5218:	f7 2e       	mov	r15, r23
    521a:	08 2f       	mov	r16, r24
    521c:	19 2f       	mov	r17, r25
    521e:	2a 2c       	mov	r2, r10
    5220:	3b 2c       	mov	r3, r11
    5222:	4c 2c       	mov	r4, r12
    5224:	5d 2c       	mov	r5, r13
    5226:	6e 2c       	mov	r6, r14
    5228:	7f 2c       	mov	r7, r15
    522a:	80 2e       	mov	r8, r16
    522c:	91 2e       	mov	r9, r17
    522e:	a0 90 f1 01 	lds	r10, 0x01F1
    5232:	b0 90 f2 01 	lds	r11, 0x01F2
    5236:	c0 90 f3 01 	lds	r12, 0x01F3
    523a:	d0 90 f4 01 	lds	r13, 0x01F4
    523e:	e0 90 f5 01 	lds	r14, 0x01F5
    5242:	f0 90 f6 01 	lds	r15, 0x01F6
    5246:	00 91 f7 01 	lds	r16, 0x01F7
    524a:	10 91 f8 01 	lds	r17, 0x01F8
    524e:	22 2d       	mov	r18, r2
    5250:	2a 29       	or	r18, r10
    5252:	33 2d       	mov	r19, r3
    5254:	3b 29       	or	r19, r11
    5256:	44 2d       	mov	r20, r4
    5258:	4c 29       	or	r20, r12
    525a:	55 2d       	mov	r21, r5
    525c:	5d 29       	or	r21, r13
    525e:	66 2d       	mov	r22, r6
    5260:	6e 29       	or	r22, r14
    5262:	77 2d       	mov	r23, r7
    5264:	7f 29       	or	r23, r15
    5266:	88 2d       	mov	r24, r8
    5268:	80 2b       	or	r24, r16
    526a:	99 2d       	mov	r25, r9
    526c:	91 2b       	or	r25, r17
    526e:	20 93 f1 01 	sts	0x01F1, r18
    5272:	30 93 f2 01 	sts	0x01F2, r19
    5276:	40 93 f3 01 	sts	0x01F3, r20
    527a:	50 93 f4 01 	sts	0x01F4, r21
    527e:	60 93 f5 01 	sts	0x01F5, r22
    5282:	70 93 f6 01 	sts	0x01F6, r23
    5286:	80 93 f7 01 	sts	0x01F7, r24
    528a:	90 93 f8 01 	sts	0x01F8, r25
	Local_u64Check |= ((u64)DIO_enuSetPinDirection(KPD_COLUMN7_PORT, KPD_COLUMN7_PIN, DIO_u8OUTPUT) << 21);
    528e:	82 e0       	ldi	r24, 0x02	; 2
    5290:	62 e0       	ldi	r22, 0x02	; 2
    5292:	41 e0       	ldi	r20, 0x01	; 1
    5294:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    5298:	a8 2e       	mov	r10, r24
    529a:	bb 24       	eor	r11, r11
    529c:	cc 24       	eor	r12, r12
    529e:	dd 24       	eor	r13, r13
    52a0:	ee 24       	eor	r14, r14
    52a2:	ff 24       	eor	r15, r15
    52a4:	87 01       	movw	r16, r14
    52a6:	2a 2d       	mov	r18, r10
    52a8:	3b 2d       	mov	r19, r11
    52aa:	4c 2d       	mov	r20, r12
    52ac:	5d 2d       	mov	r21, r13
    52ae:	6e 2d       	mov	r22, r14
    52b0:	7f 2d       	mov	r23, r15
    52b2:	80 2f       	mov	r24, r16
    52b4:	91 2f       	mov	r25, r17
    52b6:	05 e1       	ldi	r16, 0x15	; 21
    52b8:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    52bc:	a2 2e       	mov	r10, r18
    52be:	b3 2e       	mov	r11, r19
    52c0:	c4 2e       	mov	r12, r20
    52c2:	d5 2e       	mov	r13, r21
    52c4:	e6 2e       	mov	r14, r22
    52c6:	f7 2e       	mov	r15, r23
    52c8:	08 2f       	mov	r16, r24
    52ca:	19 2f       	mov	r17, r25
    52cc:	2a 2c       	mov	r2, r10
    52ce:	3b 2c       	mov	r3, r11
    52d0:	4c 2c       	mov	r4, r12
    52d2:	5d 2c       	mov	r5, r13
    52d4:	6e 2c       	mov	r6, r14
    52d6:	7f 2c       	mov	r7, r15
    52d8:	80 2e       	mov	r8, r16
    52da:	91 2e       	mov	r9, r17
    52dc:	a0 90 f1 01 	lds	r10, 0x01F1
    52e0:	b0 90 f2 01 	lds	r11, 0x01F2
    52e4:	c0 90 f3 01 	lds	r12, 0x01F3
    52e8:	d0 90 f4 01 	lds	r13, 0x01F4
    52ec:	e0 90 f5 01 	lds	r14, 0x01F5
    52f0:	f0 90 f6 01 	lds	r15, 0x01F6
    52f4:	00 91 f7 01 	lds	r16, 0x01F7
    52f8:	10 91 f8 01 	lds	r17, 0x01F8
    52fc:	22 2d       	mov	r18, r2
    52fe:	2a 29       	or	r18, r10
    5300:	33 2d       	mov	r19, r3
    5302:	3b 29       	or	r19, r11
    5304:	44 2d       	mov	r20, r4
    5306:	4c 29       	or	r20, r12
    5308:	55 2d       	mov	r21, r5
    530a:	5d 29       	or	r21, r13
    530c:	66 2d       	mov	r22, r6
    530e:	6e 29       	or	r22, r14
    5310:	77 2d       	mov	r23, r7
    5312:	7f 29       	or	r23, r15
    5314:	88 2d       	mov	r24, r8
    5316:	80 2b       	or	r24, r16
    5318:	99 2d       	mov	r25, r9
    531a:	91 2b       	or	r25, r17
    531c:	20 93 f1 01 	sts	0x01F1, r18
    5320:	30 93 f2 01 	sts	0x01F2, r19
    5324:	40 93 f3 01 	sts	0x01F3, r20
    5328:	50 93 f4 01 	sts	0x01F4, r21
    532c:	60 93 f5 01 	sts	0x01F5, r22
    5330:	70 93 f6 01 	sts	0x01F6, r23
    5334:	80 93 f7 01 	sts	0x01F7, r24
    5338:	90 93 f8 01 	sts	0x01F8, r25
	Local_u64Check |= ((u64)DIO_enuSetPinDirection(KPD_COLUMN8_PORT, KPD_COLUMN8_PIN, DIO_u8OUTPUT) << 24);
    533c:	82 e0       	ldi	r24, 0x02	; 2
    533e:	63 e0       	ldi	r22, 0x03	; 3
    5340:	41 e0       	ldi	r20, 0x01	; 1
    5342:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    5346:	a8 2e       	mov	r10, r24
    5348:	bb 24       	eor	r11, r11
    534a:	cc 24       	eor	r12, r12
    534c:	dd 24       	eor	r13, r13
    534e:	ee 24       	eor	r14, r14
    5350:	ff 24       	eor	r15, r15
    5352:	87 01       	movw	r16, r14
    5354:	2a 2d       	mov	r18, r10
    5356:	3b 2d       	mov	r19, r11
    5358:	4c 2d       	mov	r20, r12
    535a:	5d 2d       	mov	r21, r13
    535c:	6e 2d       	mov	r22, r14
    535e:	7f 2d       	mov	r23, r15
    5360:	80 2f       	mov	r24, r16
    5362:	91 2f       	mov	r25, r17
    5364:	08 e1       	ldi	r16, 0x18	; 24
    5366:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    536a:	a2 2e       	mov	r10, r18
    536c:	b3 2e       	mov	r11, r19
    536e:	c4 2e       	mov	r12, r20
    5370:	d5 2e       	mov	r13, r21
    5372:	e6 2e       	mov	r14, r22
    5374:	f7 2e       	mov	r15, r23
    5376:	08 2f       	mov	r16, r24
    5378:	19 2f       	mov	r17, r25
    537a:	2a 2c       	mov	r2, r10
    537c:	3b 2c       	mov	r3, r11
    537e:	4c 2c       	mov	r4, r12
    5380:	5d 2c       	mov	r5, r13
    5382:	6e 2c       	mov	r6, r14
    5384:	7f 2c       	mov	r7, r15
    5386:	80 2e       	mov	r8, r16
    5388:	91 2e       	mov	r9, r17
    538a:	a0 90 f1 01 	lds	r10, 0x01F1
    538e:	b0 90 f2 01 	lds	r11, 0x01F2
    5392:	c0 90 f3 01 	lds	r12, 0x01F3
    5396:	d0 90 f4 01 	lds	r13, 0x01F4
    539a:	e0 90 f5 01 	lds	r14, 0x01F5
    539e:	f0 90 f6 01 	lds	r15, 0x01F6
    53a2:	00 91 f7 01 	lds	r16, 0x01F7
    53a6:	10 91 f8 01 	lds	r17, 0x01F8
    53aa:	22 2d       	mov	r18, r2
    53ac:	2a 29       	or	r18, r10
    53ae:	33 2d       	mov	r19, r3
    53b0:	3b 29       	or	r19, r11
    53b2:	44 2d       	mov	r20, r4
    53b4:	4c 29       	or	r20, r12
    53b6:	55 2d       	mov	r21, r5
    53b8:	5d 29       	or	r21, r13
    53ba:	66 2d       	mov	r22, r6
    53bc:	6e 29       	or	r22, r14
    53be:	77 2d       	mov	r23, r7
    53c0:	7f 29       	or	r23, r15
    53c2:	88 2d       	mov	r24, r8
    53c4:	80 2b       	or	r24, r16
    53c6:	99 2d       	mov	r25, r9
    53c8:	91 2b       	or	r25, r17
    53ca:	20 93 f1 01 	sts	0x01F1, r18
    53ce:	30 93 f2 01 	sts	0x01F2, r19
    53d2:	40 93 f3 01 	sts	0x01F3, r20
    53d6:	50 93 f4 01 	sts	0x01F4, r21
    53da:	60 93 f5 01 	sts	0x01F5, r22
    53de:	70 93 f6 01 	sts	0x01F6, r23
    53e2:	80 93 f7 01 	sts	0x01F7, r24
    53e6:	90 93 f8 01 	sts	0x01F8, r25
	Local_u64Check |= ((u64)DIO_enuSetPinDirection(KPD_COLUMN9_PORT, KPD_COLUMN9_PIN, DIO_u8OUTPUT) << 27);
    53ea:	82 e0       	ldi	r24, 0x02	; 2
    53ec:	64 e0       	ldi	r22, 0x04	; 4
    53ee:	41 e0       	ldi	r20, 0x01	; 1
    53f0:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    53f4:	a8 2e       	mov	r10, r24
    53f6:	bb 24       	eor	r11, r11
    53f8:	cc 24       	eor	r12, r12
    53fa:	dd 24       	eor	r13, r13
    53fc:	ee 24       	eor	r14, r14
    53fe:	ff 24       	eor	r15, r15
    5400:	87 01       	movw	r16, r14
    5402:	2a 2d       	mov	r18, r10
    5404:	3b 2d       	mov	r19, r11
    5406:	4c 2d       	mov	r20, r12
    5408:	5d 2d       	mov	r21, r13
    540a:	6e 2d       	mov	r22, r14
    540c:	7f 2d       	mov	r23, r15
    540e:	80 2f       	mov	r24, r16
    5410:	91 2f       	mov	r25, r17
    5412:	0b e1       	ldi	r16, 0x1B	; 27
    5414:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    5418:	a2 2e       	mov	r10, r18
    541a:	b3 2e       	mov	r11, r19
    541c:	c4 2e       	mov	r12, r20
    541e:	d5 2e       	mov	r13, r21
    5420:	e6 2e       	mov	r14, r22
    5422:	f7 2e       	mov	r15, r23
    5424:	08 2f       	mov	r16, r24
    5426:	19 2f       	mov	r17, r25
    5428:	2a 2c       	mov	r2, r10
    542a:	3b 2c       	mov	r3, r11
    542c:	4c 2c       	mov	r4, r12
    542e:	5d 2c       	mov	r5, r13
    5430:	6e 2c       	mov	r6, r14
    5432:	7f 2c       	mov	r7, r15
    5434:	80 2e       	mov	r8, r16
    5436:	91 2e       	mov	r9, r17
    5438:	a0 90 f1 01 	lds	r10, 0x01F1
    543c:	b0 90 f2 01 	lds	r11, 0x01F2
    5440:	c0 90 f3 01 	lds	r12, 0x01F3
    5444:	d0 90 f4 01 	lds	r13, 0x01F4
    5448:	e0 90 f5 01 	lds	r14, 0x01F5
    544c:	f0 90 f6 01 	lds	r15, 0x01F6
    5450:	00 91 f7 01 	lds	r16, 0x01F7
    5454:	10 91 f8 01 	lds	r17, 0x01F8
    5458:	22 2d       	mov	r18, r2
    545a:	2a 29       	or	r18, r10
    545c:	33 2d       	mov	r19, r3
    545e:	3b 29       	or	r19, r11
    5460:	44 2d       	mov	r20, r4
    5462:	4c 29       	or	r20, r12
    5464:	55 2d       	mov	r21, r5
    5466:	5d 29       	or	r21, r13
    5468:	66 2d       	mov	r22, r6
    546a:	6e 29       	or	r22, r14
    546c:	77 2d       	mov	r23, r7
    546e:	7f 29       	or	r23, r15
    5470:	88 2d       	mov	r24, r8
    5472:	80 2b       	or	r24, r16
    5474:	99 2d       	mov	r25, r9
    5476:	91 2b       	or	r25, r17
    5478:	20 93 f1 01 	sts	0x01F1, r18
    547c:	30 93 f2 01 	sts	0x01F2, r19
    5480:	40 93 f3 01 	sts	0x01F3, r20
    5484:	50 93 f4 01 	sts	0x01F4, r21
    5488:	60 93 f5 01 	sts	0x01F5, r22
    548c:	70 93 f6 01 	sts	0x01F6, r23
    5490:	80 93 f7 01 	sts	0x01F7, r24
    5494:	90 93 f8 01 	sts	0x01F8, r25

	/* Set Column Pins Value as High */
	DIO_enuSetPinValue(KPD_COLUMN0_PORT, KPD_COLUMN0_PIN, DIO_u8HIGH);
    5498:	81 e0       	ldi	r24, 0x01	; 1
    549a:	63 e0       	ldi	r22, 0x03	; 3
    549c:	41 e0       	ldi	r20, 0x01	; 1
    549e:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KPD_COLUMN1_PORT, KPD_COLUMN1_PIN, DIO_u8HIGH);
    54a2:	81 e0       	ldi	r24, 0x01	; 1
    54a4:	64 e0       	ldi	r22, 0x04	; 4
    54a6:	41 e0       	ldi	r20, 0x01	; 1
    54a8:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KPD_COLUMN2_PORT, KPD_COLUMN2_PIN, DIO_u8HIGH);
    54ac:	81 e0       	ldi	r24, 0x01	; 1
    54ae:	65 e0       	ldi	r22, 0x05	; 5
    54b0:	41 e0       	ldi	r20, 0x01	; 1
    54b2:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KPD_COLUMN3_PORT, KPD_COLUMN3_PIN, DIO_u8HIGH);
    54b6:	81 e0       	ldi	r24, 0x01	; 1
    54b8:	66 e0       	ldi	r22, 0x06	; 6
    54ba:	41 e0       	ldi	r20, 0x01	; 1
    54bc:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KPD_COLUMN4_PORT, KPD_COLUMN4_PIN, DIO_u8HIGH);
    54c0:	81 e0       	ldi	r24, 0x01	; 1
    54c2:	67 e0       	ldi	r22, 0x07	; 7
    54c4:	41 e0       	ldi	r20, 0x01	; 1
    54c6:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KPD_COLUMN5_PORT, KPD_COLUMN5_PIN, DIO_u8HIGH);
    54ca:	82 e0       	ldi	r24, 0x02	; 2
    54cc:	60 e0       	ldi	r22, 0x00	; 0
    54ce:	41 e0       	ldi	r20, 0x01	; 1
    54d0:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KPD_COLUMN6_PORT, KPD_COLUMN6_PIN, DIO_u8HIGH);
    54d4:	82 e0       	ldi	r24, 0x02	; 2
    54d6:	61 e0       	ldi	r22, 0x01	; 1
    54d8:	41 e0       	ldi	r20, 0x01	; 1
    54da:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KPD_COLUMN7_PORT, KPD_COLUMN7_PIN, DIO_u8HIGH);
    54de:	82 e0       	ldi	r24, 0x02	; 2
    54e0:	62 e0       	ldi	r22, 0x02	; 2
    54e2:	41 e0       	ldi	r20, 0x01	; 1
    54e4:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KPD_COLUMN8_PORT, KPD_COLUMN8_PIN, DIO_u8HIGH);
    54e8:	82 e0       	ldi	r24, 0x02	; 2
    54ea:	63 e0       	ldi	r22, 0x03	; 3
    54ec:	41 e0       	ldi	r20, 0x01	; 1
    54ee:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KPD_COLUMN9_PORT, KPD_COLUMN9_PIN, DIO_u8HIGH);
    54f2:	82 e0       	ldi	r24, 0x02	; 2
    54f4:	64 e0       	ldi	r22, 0x04	; 4
    54f6:	41 e0       	ldi	r20, 0x01	; 1
    54f8:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>


	/* Set Row Pins as Input */

	Local_u64Check |= ((u64)DIO_enuSetPinDirection(KPD_ROW0_PORT, KPD_ROW0_PIN, DIO_u8INPUT) << 30);
    54fc:	80 e0       	ldi	r24, 0x00	; 0
    54fe:	67 e0       	ldi	r22, 0x07	; 7
    5500:	40 e0       	ldi	r20, 0x00	; 0
    5502:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    5506:	a8 2e       	mov	r10, r24
    5508:	bb 24       	eor	r11, r11
    550a:	cc 24       	eor	r12, r12
    550c:	dd 24       	eor	r13, r13
    550e:	ee 24       	eor	r14, r14
    5510:	ff 24       	eor	r15, r15
    5512:	87 01       	movw	r16, r14
    5514:	2a 2d       	mov	r18, r10
    5516:	3b 2d       	mov	r19, r11
    5518:	4c 2d       	mov	r20, r12
    551a:	5d 2d       	mov	r21, r13
    551c:	6e 2d       	mov	r22, r14
    551e:	7f 2d       	mov	r23, r15
    5520:	80 2f       	mov	r24, r16
    5522:	91 2f       	mov	r25, r17
    5524:	0e e1       	ldi	r16, 0x1E	; 30
    5526:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    552a:	a2 2e       	mov	r10, r18
    552c:	b3 2e       	mov	r11, r19
    552e:	c4 2e       	mov	r12, r20
    5530:	d5 2e       	mov	r13, r21
    5532:	e6 2e       	mov	r14, r22
    5534:	f7 2e       	mov	r15, r23
    5536:	08 2f       	mov	r16, r24
    5538:	19 2f       	mov	r17, r25
    553a:	2a 2c       	mov	r2, r10
    553c:	3b 2c       	mov	r3, r11
    553e:	4c 2c       	mov	r4, r12
    5540:	5d 2c       	mov	r5, r13
    5542:	6e 2c       	mov	r6, r14
    5544:	7f 2c       	mov	r7, r15
    5546:	80 2e       	mov	r8, r16
    5548:	91 2e       	mov	r9, r17
    554a:	a0 90 f1 01 	lds	r10, 0x01F1
    554e:	b0 90 f2 01 	lds	r11, 0x01F2
    5552:	c0 90 f3 01 	lds	r12, 0x01F3
    5556:	d0 90 f4 01 	lds	r13, 0x01F4
    555a:	e0 90 f5 01 	lds	r14, 0x01F5
    555e:	f0 90 f6 01 	lds	r15, 0x01F6
    5562:	00 91 f7 01 	lds	r16, 0x01F7
    5566:	10 91 f8 01 	lds	r17, 0x01F8
    556a:	22 2d       	mov	r18, r2
    556c:	2a 29       	or	r18, r10
    556e:	33 2d       	mov	r19, r3
    5570:	3b 29       	or	r19, r11
    5572:	44 2d       	mov	r20, r4
    5574:	4c 29       	or	r20, r12
    5576:	55 2d       	mov	r21, r5
    5578:	5d 29       	or	r21, r13
    557a:	66 2d       	mov	r22, r6
    557c:	6e 29       	or	r22, r14
    557e:	77 2d       	mov	r23, r7
    5580:	7f 29       	or	r23, r15
    5582:	88 2d       	mov	r24, r8
    5584:	80 2b       	or	r24, r16
    5586:	99 2d       	mov	r25, r9
    5588:	91 2b       	or	r25, r17
    558a:	20 93 f1 01 	sts	0x01F1, r18
    558e:	30 93 f2 01 	sts	0x01F2, r19
    5592:	40 93 f3 01 	sts	0x01F3, r20
    5596:	50 93 f4 01 	sts	0x01F4, r21
    559a:	60 93 f5 01 	sts	0x01F5, r22
    559e:	70 93 f6 01 	sts	0x01F6, r23
    55a2:	80 93 f7 01 	sts	0x01F7, r24
    55a6:	90 93 f8 01 	sts	0x01F8, r25
	Local_u64Check |= ((u64)DIO_enuSetPinDirection(KPD_ROW1_PORT, KPD_ROW1_PIN, DIO_u8INPUT) << 33);
    55aa:	81 e0       	ldi	r24, 0x01	; 1
    55ac:	60 e0       	ldi	r22, 0x00	; 0
    55ae:	40 e0       	ldi	r20, 0x00	; 0
    55b0:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    55b4:	a8 2e       	mov	r10, r24
    55b6:	bb 24       	eor	r11, r11
    55b8:	cc 24       	eor	r12, r12
    55ba:	dd 24       	eor	r13, r13
    55bc:	ee 24       	eor	r14, r14
    55be:	ff 24       	eor	r15, r15
    55c0:	87 01       	movw	r16, r14
    55c2:	2a 2d       	mov	r18, r10
    55c4:	3b 2d       	mov	r19, r11
    55c6:	4c 2d       	mov	r20, r12
    55c8:	5d 2d       	mov	r21, r13
    55ca:	6e 2d       	mov	r22, r14
    55cc:	7f 2d       	mov	r23, r15
    55ce:	80 2f       	mov	r24, r16
    55d0:	91 2f       	mov	r25, r17
    55d2:	01 e2       	ldi	r16, 0x21	; 33
    55d4:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    55d8:	a2 2e       	mov	r10, r18
    55da:	b3 2e       	mov	r11, r19
    55dc:	c4 2e       	mov	r12, r20
    55de:	d5 2e       	mov	r13, r21
    55e0:	e6 2e       	mov	r14, r22
    55e2:	f7 2e       	mov	r15, r23
    55e4:	08 2f       	mov	r16, r24
    55e6:	19 2f       	mov	r17, r25
    55e8:	2a 2c       	mov	r2, r10
    55ea:	3b 2c       	mov	r3, r11
    55ec:	4c 2c       	mov	r4, r12
    55ee:	5d 2c       	mov	r5, r13
    55f0:	6e 2c       	mov	r6, r14
    55f2:	7f 2c       	mov	r7, r15
    55f4:	80 2e       	mov	r8, r16
    55f6:	91 2e       	mov	r9, r17
    55f8:	a0 90 f1 01 	lds	r10, 0x01F1
    55fc:	b0 90 f2 01 	lds	r11, 0x01F2
    5600:	c0 90 f3 01 	lds	r12, 0x01F3
    5604:	d0 90 f4 01 	lds	r13, 0x01F4
    5608:	e0 90 f5 01 	lds	r14, 0x01F5
    560c:	f0 90 f6 01 	lds	r15, 0x01F6
    5610:	00 91 f7 01 	lds	r16, 0x01F7
    5614:	10 91 f8 01 	lds	r17, 0x01F8
    5618:	22 2d       	mov	r18, r2
    561a:	2a 29       	or	r18, r10
    561c:	33 2d       	mov	r19, r3
    561e:	3b 29       	or	r19, r11
    5620:	44 2d       	mov	r20, r4
    5622:	4c 29       	or	r20, r12
    5624:	55 2d       	mov	r21, r5
    5626:	5d 29       	or	r21, r13
    5628:	66 2d       	mov	r22, r6
    562a:	6e 29       	or	r22, r14
    562c:	77 2d       	mov	r23, r7
    562e:	7f 29       	or	r23, r15
    5630:	88 2d       	mov	r24, r8
    5632:	80 2b       	or	r24, r16
    5634:	99 2d       	mov	r25, r9
    5636:	91 2b       	or	r25, r17
    5638:	20 93 f1 01 	sts	0x01F1, r18
    563c:	30 93 f2 01 	sts	0x01F2, r19
    5640:	40 93 f3 01 	sts	0x01F3, r20
    5644:	50 93 f4 01 	sts	0x01F4, r21
    5648:	60 93 f5 01 	sts	0x01F5, r22
    564c:	70 93 f6 01 	sts	0x01F6, r23
    5650:	80 93 f7 01 	sts	0x01F7, r24
    5654:	90 93 f8 01 	sts	0x01F8, r25
	Local_u64Check |= ((u64)DIO_enuSetPinDirection(KPD_ROW2_PORT, KPD_ROW2_PIN, DIO_u8INPUT) << 36);
    5658:	81 e0       	ldi	r24, 0x01	; 1
    565a:	61 e0       	ldi	r22, 0x01	; 1
    565c:	40 e0       	ldi	r20, 0x00	; 0
    565e:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    5662:	a8 2e       	mov	r10, r24
    5664:	bb 24       	eor	r11, r11
    5666:	cc 24       	eor	r12, r12
    5668:	dd 24       	eor	r13, r13
    566a:	ee 24       	eor	r14, r14
    566c:	ff 24       	eor	r15, r15
    566e:	87 01       	movw	r16, r14
    5670:	2a 2d       	mov	r18, r10
    5672:	3b 2d       	mov	r19, r11
    5674:	4c 2d       	mov	r20, r12
    5676:	5d 2d       	mov	r21, r13
    5678:	6e 2d       	mov	r22, r14
    567a:	7f 2d       	mov	r23, r15
    567c:	80 2f       	mov	r24, r16
    567e:	91 2f       	mov	r25, r17
    5680:	04 e2       	ldi	r16, 0x24	; 36
    5682:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    5686:	a2 2e       	mov	r10, r18
    5688:	b3 2e       	mov	r11, r19
    568a:	c4 2e       	mov	r12, r20
    568c:	d5 2e       	mov	r13, r21
    568e:	e6 2e       	mov	r14, r22
    5690:	f7 2e       	mov	r15, r23
    5692:	08 2f       	mov	r16, r24
    5694:	19 2f       	mov	r17, r25
    5696:	2a 2c       	mov	r2, r10
    5698:	3b 2c       	mov	r3, r11
    569a:	4c 2c       	mov	r4, r12
    569c:	5d 2c       	mov	r5, r13
    569e:	6e 2c       	mov	r6, r14
    56a0:	7f 2c       	mov	r7, r15
    56a2:	80 2e       	mov	r8, r16
    56a4:	91 2e       	mov	r9, r17
    56a6:	a0 90 f1 01 	lds	r10, 0x01F1
    56aa:	b0 90 f2 01 	lds	r11, 0x01F2
    56ae:	c0 90 f3 01 	lds	r12, 0x01F3
    56b2:	d0 90 f4 01 	lds	r13, 0x01F4
    56b6:	e0 90 f5 01 	lds	r14, 0x01F5
    56ba:	f0 90 f6 01 	lds	r15, 0x01F6
    56be:	00 91 f7 01 	lds	r16, 0x01F7
    56c2:	10 91 f8 01 	lds	r17, 0x01F8
    56c6:	22 2d       	mov	r18, r2
    56c8:	2a 29       	or	r18, r10
    56ca:	33 2d       	mov	r19, r3
    56cc:	3b 29       	or	r19, r11
    56ce:	44 2d       	mov	r20, r4
    56d0:	4c 29       	or	r20, r12
    56d2:	55 2d       	mov	r21, r5
    56d4:	5d 29       	or	r21, r13
    56d6:	66 2d       	mov	r22, r6
    56d8:	6e 29       	or	r22, r14
    56da:	77 2d       	mov	r23, r7
    56dc:	7f 29       	or	r23, r15
    56de:	88 2d       	mov	r24, r8
    56e0:	80 2b       	or	r24, r16
    56e2:	99 2d       	mov	r25, r9
    56e4:	91 2b       	or	r25, r17
    56e6:	20 93 f1 01 	sts	0x01F1, r18
    56ea:	30 93 f2 01 	sts	0x01F2, r19
    56ee:	40 93 f3 01 	sts	0x01F3, r20
    56f2:	50 93 f4 01 	sts	0x01F4, r21
    56f6:	60 93 f5 01 	sts	0x01F5, r22
    56fa:	70 93 f6 01 	sts	0x01F6, r23
    56fe:	80 93 f7 01 	sts	0x01F7, r24
    5702:	90 93 f8 01 	sts	0x01F8, r25
	Local_u64Check |= ((u64)DIO_enuSetPinDirection(KPD_ROW3_PORT, KPD_ROW3_PIN, DIO_u8INPUT) << 39);
    5706:	81 e0       	ldi	r24, 0x01	; 1
    5708:	62 e0       	ldi	r22, 0x02	; 2
    570a:	40 e0       	ldi	r20, 0x00	; 0
    570c:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuSetPinDirection>
    5710:	a8 2e       	mov	r10, r24
    5712:	bb 24       	eor	r11, r11
    5714:	cc 24       	eor	r12, r12
    5716:	dd 24       	eor	r13, r13
    5718:	ee 24       	eor	r14, r14
    571a:	ff 24       	eor	r15, r15
    571c:	87 01       	movw	r16, r14
    571e:	2a 2d       	mov	r18, r10
    5720:	3b 2d       	mov	r19, r11
    5722:	4c 2d       	mov	r20, r12
    5724:	5d 2d       	mov	r21, r13
    5726:	6e 2d       	mov	r22, r14
    5728:	7f 2d       	mov	r23, r15
    572a:	80 2f       	mov	r24, r16
    572c:	91 2f       	mov	r25, r17
    572e:	07 e2       	ldi	r16, 0x27	; 39
    5730:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    5734:	a2 2e       	mov	r10, r18
    5736:	b3 2e       	mov	r11, r19
    5738:	c4 2e       	mov	r12, r20
    573a:	d5 2e       	mov	r13, r21
    573c:	e6 2e       	mov	r14, r22
    573e:	f7 2e       	mov	r15, r23
    5740:	08 2f       	mov	r16, r24
    5742:	19 2f       	mov	r17, r25
    5744:	2a 2c       	mov	r2, r10
    5746:	3b 2c       	mov	r3, r11
    5748:	4c 2c       	mov	r4, r12
    574a:	5d 2c       	mov	r5, r13
    574c:	6e 2c       	mov	r6, r14
    574e:	7f 2c       	mov	r7, r15
    5750:	80 2e       	mov	r8, r16
    5752:	91 2e       	mov	r9, r17
    5754:	a0 90 f1 01 	lds	r10, 0x01F1
    5758:	b0 90 f2 01 	lds	r11, 0x01F2
    575c:	c0 90 f3 01 	lds	r12, 0x01F3
    5760:	d0 90 f4 01 	lds	r13, 0x01F4
    5764:	e0 90 f5 01 	lds	r14, 0x01F5
    5768:	f0 90 f6 01 	lds	r15, 0x01F6
    576c:	00 91 f7 01 	lds	r16, 0x01F7
    5770:	10 91 f8 01 	lds	r17, 0x01F8
    5774:	22 2d       	mov	r18, r2
    5776:	2a 29       	or	r18, r10
    5778:	33 2d       	mov	r19, r3
    577a:	3b 29       	or	r19, r11
    577c:	44 2d       	mov	r20, r4
    577e:	4c 29       	or	r20, r12
    5780:	55 2d       	mov	r21, r5
    5782:	5d 29       	or	r21, r13
    5784:	66 2d       	mov	r22, r6
    5786:	6e 29       	or	r22, r14
    5788:	77 2d       	mov	r23, r7
    578a:	7f 29       	or	r23, r15
    578c:	88 2d       	mov	r24, r8
    578e:	80 2b       	or	r24, r16
    5790:	99 2d       	mov	r25, r9
    5792:	91 2b       	or	r25, r17
    5794:	20 93 f1 01 	sts	0x01F1, r18
    5798:	30 93 f2 01 	sts	0x01F2, r19
    579c:	40 93 f3 01 	sts	0x01F3, r20
    57a0:	50 93 f4 01 	sts	0x01F4, r21
    57a4:	60 93 f5 01 	sts	0x01F5, r22
    57a8:	70 93 f6 01 	sts	0x01F6, r23
    57ac:	80 93 f7 01 	sts	0x01F7, r24
    57b0:	90 93 f8 01 	sts	0x01F8, r25

	/* Set Row Pins Value as Pulled_up */
	DIO_enuSetPinValue(KPD_ROW0_PORT, KPD_ROW0_PIN, DIO_u8PULL_UP);
    57b4:	80 e0       	ldi	r24, 0x00	; 0
    57b6:	67 e0       	ldi	r22, 0x07	; 7
    57b8:	41 e0       	ldi	r20, 0x01	; 1
    57ba:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KPD_ROW1_PORT, KPD_ROW1_PIN, DIO_u8PULL_UP);
    57be:	81 e0       	ldi	r24, 0x01	; 1
    57c0:	60 e0       	ldi	r22, 0x00	; 0
    57c2:	41 e0       	ldi	r20, 0x01	; 1
    57c4:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KPD_ROW2_PORT, KPD_ROW2_PIN, DIO_u8PULL_UP);
    57c8:	81 e0       	ldi	r24, 0x01	; 1
    57ca:	61 e0       	ldi	r22, 0x01	; 1
    57cc:	41 e0       	ldi	r20, 0x01	; 1
    57ce:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KPD_ROW3_PORT, KPD_ROW3_PIN, DIO_u8PULL_UP);
    57d2:	81 e0       	ldi	r24, 0x01	; 1
    57d4:	62 e0       	ldi	r22, 0x02	; 2
    57d6:	41 e0       	ldi	r20, 0x01	; 1
    57d8:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>

	u8 Local_u8Iterator;
	for(Local_u8Iterator = 0; Local_u8Iterator <= 39; Local_u8Iterator += 3)
    57dc:	19 82       	std	Y+1, r1	; 0x01
    57de:	4e c0       	rjmp	.+156    	; 0x587c <KPD_enuInit+0xa78>
	{
		if(( (Local_u64Check >> Local_u8Iterator) & (0b111) ) != ES_OK)
    57e0:	a0 90 f1 01 	lds	r10, 0x01F1
    57e4:	b0 90 f2 01 	lds	r11, 0x01F2
    57e8:	c0 90 f3 01 	lds	r12, 0x01F3
    57ec:	d0 90 f4 01 	lds	r13, 0x01F4
    57f0:	e0 90 f5 01 	lds	r14, 0x01F5
    57f4:	f0 90 f6 01 	lds	r15, 0x01F6
    57f8:	00 91 f7 01 	lds	r16, 0x01F7
    57fc:	10 91 f8 01 	lds	r17, 0x01F8
    5800:	89 81       	ldd	r24, Y+1	; 0x01
    5802:	e8 2f       	mov	r30, r24
    5804:	f0 e0       	ldi	r31, 0x00	; 0
    5806:	2a 2d       	mov	r18, r10
    5808:	3b 2d       	mov	r19, r11
    580a:	4c 2d       	mov	r20, r12
    580c:	5d 2d       	mov	r21, r13
    580e:	6e 2d       	mov	r22, r14
    5810:	7f 2d       	mov	r23, r15
    5812:	80 2f       	mov	r24, r16
    5814:	91 2f       	mov	r25, r17
    5816:	0e 2f       	mov	r16, r30
    5818:	0e 94 49 00 	call	0x92	; 0x92 <__lshrdi3>
    581c:	a2 2e       	mov	r10, r18
    581e:	b3 2e       	mov	r11, r19
    5820:	c4 2e       	mov	r12, r20
    5822:	d5 2e       	mov	r13, r21
    5824:	e6 2e       	mov	r14, r22
    5826:	f7 2e       	mov	r15, r23
    5828:	08 2f       	mov	r16, r24
    582a:	19 2f       	mov	r17, r25
    582c:	2a 2c       	mov	r2, r10
    582e:	3b 2c       	mov	r3, r11
    5830:	4c 2c       	mov	r4, r12
    5832:	5d 2c       	mov	r5, r13
    5834:	6e 2c       	mov	r6, r14
    5836:	7f 2c       	mov	r7, r15
    5838:	80 2e       	mov	r8, r16
    583a:	91 2e       	mov	r9, r17
    583c:	22 2d       	mov	r18, r2
    583e:	27 70       	andi	r18, 0x07	; 7
    5840:	33 2d       	mov	r19, r3
    5842:	30 70       	andi	r19, 0x00	; 0
    5844:	44 2d       	mov	r20, r4
    5846:	40 70       	andi	r20, 0x00	; 0
    5848:	55 2d       	mov	r21, r5
    584a:	50 70       	andi	r21, 0x00	; 0
    584c:	66 2d       	mov	r22, r6
    584e:	60 70       	andi	r22, 0x00	; 0
    5850:	77 2d       	mov	r23, r7
    5852:	70 70       	andi	r23, 0x00	; 0
    5854:	88 2d       	mov	r24, r8
    5856:	80 70       	andi	r24, 0x00	; 0
    5858:	99 2d       	mov	r25, r9
    585a:	90 70       	andi	r25, 0x00	; 0
    585c:	e2 2f       	mov	r30, r18
    585e:	e3 2b       	or	r30, r19
    5860:	e4 2b       	or	r30, r20
    5862:	e5 2b       	or	r30, r21
    5864:	e6 2b       	or	r30, r22
    5866:	e7 2b       	or	r30, r23
    5868:	e8 2b       	or	r30, r24
    586a:	e9 2b       	or	r30, r25
    586c:	ee 23       	and	r30, r30
    586e:	19 f0       	breq	.+6      	; 0x5876 <KPD_enuInit+0xa72>
		{
			return ES_NOK;
    5870:	81 e0       	ldi	r24, 0x01	; 1
    5872:	8b 83       	std	Y+3, r24	; 0x03
    5874:	0a c0       	rjmp	.+20     	; 0x588a <KPD_enuInit+0xa86>
	DIO_enuSetPinValue(KPD_ROW1_PORT, KPD_ROW1_PIN, DIO_u8PULL_UP);
	DIO_enuSetPinValue(KPD_ROW2_PORT, KPD_ROW2_PIN, DIO_u8PULL_UP);
	DIO_enuSetPinValue(KPD_ROW3_PORT, KPD_ROW3_PIN, DIO_u8PULL_UP);

	u8 Local_u8Iterator;
	for(Local_u8Iterator = 0; Local_u8Iterator <= 39; Local_u8Iterator += 3)
    5876:	89 81       	ldd	r24, Y+1	; 0x01
    5878:	8d 5f       	subi	r24, 0xFD	; 253
    587a:	89 83       	std	Y+1, r24	; 0x01
    587c:	89 81       	ldd	r24, Y+1	; 0x01
    587e:	88 32       	cpi	r24, 0x28	; 40
    5880:	08 f4       	brcc	.+2      	; 0x5884 <KPD_enuInit+0xa80>
    5882:	ae cf       	rjmp	.-164    	; 0x57e0 <KPD_enuInit+0x9dc>
		{
			return ES_NOK;
		}
	}

	Local_enuErrorState = ES_OK;
    5884:	1a 82       	std	Y+2, r1	; 0x02
	return Local_enuErrorState;
    5886:	8a 81       	ldd	r24, Y+2	; 0x02
    5888:	8b 83       	std	Y+3, r24	; 0x03
    588a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    588c:	0f 90       	pop	r0
    588e:	0f 90       	pop	r0
    5890:	0f 90       	pop	r0
    5892:	cf 91       	pop	r28
    5894:	df 91       	pop	r29
    5896:	1f 91       	pop	r17
    5898:	0f 91       	pop	r16
    589a:	ff 90       	pop	r15
    589c:	ef 90       	pop	r14
    589e:	df 90       	pop	r13
    58a0:	cf 90       	pop	r12
    58a2:	bf 90       	pop	r11
    58a4:	af 90       	pop	r10
    58a6:	9f 90       	pop	r9
    58a8:	8f 90       	pop	r8
    58aa:	7f 90       	pop	r7
    58ac:	6f 90       	pop	r6
    58ae:	5f 90       	pop	r5
    58b0:	4f 90       	pop	r4
    58b2:	3f 90       	pop	r3
    58b4:	2f 90       	pop	r2
    58b6:	08 95       	ret

000058b8 <KPD_enuGetPressedKey>:



ES_t KPD_enuGetPressedKey(u8 * Copy_Pu8PinState)
{
    58b8:	df 93       	push	r29
    58ba:	cf 93       	push	r28
    58bc:	00 d0       	rcall	.+0      	; 0x58be <KPD_enuGetPressedKey+0x6>
    58be:	00 d0       	rcall	.+0      	; 0x58c0 <KPD_enuGetPressedKey+0x8>
    58c0:	0f 92       	push	r0
    58c2:	cd b7       	in	r28, 0x3d	; 61
    58c4:	de b7       	in	r29, 0x3e	; 62
    58c6:	9c 83       	std	Y+4, r25	; 0x04
    58c8:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    58ca:	81 e0       	ldi	r24, 0x01	; 1
    58cc:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8PressedKey = NOT_PRESSED_KEY;
    58ce:	8f ef       	ldi	r24, 0xFF	; 255
    58d0:	89 83       	std	Y+1, r24	; 0x01
	static u8 Local_Au8Rows [KPD_ROW_NUM][2] = KPD_ROWS;

	static u8 Local_Au8Columns [KPD_COLUMN_NUM][2] = KPD_COLUMNS;

	static u8 Local_u8Iterator1, Local_u8Iterator2;
	for(Local_u8Iterator1 = 0; Local_u8Iterator1 < KPD_COLUMN_NUM ; ++Local_u8Iterator1)
    58d2:	10 92 fa 01 	sts	0x01FA, r1
    58d6:	ad c0       	rjmp	.+346    	; 0x5a32 <KPD_enuGetPressedKey+0x17a>
	{
		if(DIO_enuSetPinValue(Local_Au8Columns[Local_u8Iterator1][0], Local_Au8Columns[Local_u8Iterator1][1], DIO_u8LOW) != ES_OK)
    58d8:	80 91 fa 01 	lds	r24, 0x01FA
    58dc:	88 2f       	mov	r24, r24
    58de:	90 e0       	ldi	r25, 0x00	; 0
    58e0:	88 0f       	add	r24, r24
    58e2:	99 1f       	adc	r25, r25
    58e4:	fc 01       	movw	r30, r24
    58e6:	e9 56       	subi	r30, 0x69	; 105
    58e8:	fe 4f       	sbci	r31, 0xFE	; 254
    58ea:	20 81       	ld	r18, Z
    58ec:	80 91 fa 01 	lds	r24, 0x01FA
    58f0:	88 2f       	mov	r24, r24
    58f2:	90 e0       	ldi	r25, 0x00	; 0
    58f4:	88 0f       	add	r24, r24
    58f6:	99 1f       	adc	r25, r25
    58f8:	fc 01       	movw	r30, r24
    58fa:	e8 56       	subi	r30, 0x68	; 104
    58fc:	fe 4f       	sbci	r31, 0xFE	; 254
    58fe:	90 81       	ld	r25, Z
    5900:	82 2f       	mov	r24, r18
    5902:	69 2f       	mov	r22, r25
    5904:	40 e0       	ldi	r20, 0x00	; 0
    5906:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
    590a:	88 23       	and	r24, r24
    590c:	19 f0       	breq	.+6      	; 0x5914 <KPD_enuGetPressedKey+0x5c>
		{
			return Local_enuErrorState;
    590e:	8a 81       	ldd	r24, Y+2	; 0x02
    5910:	8d 83       	std	Y+5, r24	; 0x05
    5912:	9b c0       	rjmp	.+310    	; 0x5a4a <KPD_enuGetPressedKey+0x192>
		}
		for(Local_u8Iterator2 = 0; Local_u8Iterator2 < KPD_ROW_NUM; ++Local_u8Iterator2)
    5914:	10 92 f9 01 	sts	0x01F9, r1
    5918:	69 c0       	rjmp	.+210    	; 0x59ec <KPD_enuGetPressedKey+0x134>
		{
			if(DIO_enuGetPinValue(Local_Au8Rows[Local_u8Iterator2][0], Local_Au8Rows[Local_u8Iterator2][1], Copy_Pu8PinState) != ES_OK)
    591a:	80 91 f9 01 	lds	r24, 0x01F9
    591e:	88 2f       	mov	r24, r24
    5920:	90 e0       	ldi	r25, 0x00	; 0
    5922:	88 0f       	add	r24, r24
    5924:	99 1f       	adc	r25, r25
    5926:	fc 01       	movw	r30, r24
    5928:	e5 55       	subi	r30, 0x55	; 85
    592a:	fe 4f       	sbci	r31, 0xFE	; 254
    592c:	40 81       	ld	r20, Z
    592e:	80 91 f9 01 	lds	r24, 0x01F9
    5932:	88 2f       	mov	r24, r24
    5934:	90 e0       	ldi	r25, 0x00	; 0
    5936:	88 0f       	add	r24, r24
    5938:	99 1f       	adc	r25, r25
    593a:	fc 01       	movw	r30, r24
    593c:	e4 55       	subi	r30, 0x54	; 84
    593e:	fe 4f       	sbci	r31, 0xFE	; 254
    5940:	90 81       	ld	r25, Z
    5942:	2b 81       	ldd	r18, Y+3	; 0x03
    5944:	3c 81       	ldd	r19, Y+4	; 0x04
    5946:	84 2f       	mov	r24, r20
    5948:	69 2f       	mov	r22, r25
    594a:	a9 01       	movw	r20, r18
    594c:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <DIO_enuGetPinValue>
    5950:	88 23       	and	r24, r24
    5952:	19 f0       	breq	.+6      	; 0x595a <KPD_enuGetPressedKey+0xa2>
			{
				return Local_enuErrorState;
    5954:	8a 81       	ldd	r24, Y+2	; 0x02
    5956:	8d 83       	std	Y+5, r24	; 0x05
    5958:	78 c0       	rjmp	.+240    	; 0x5a4a <KPD_enuGetPressedKey+0x192>
			}

			if(DIO_u8LOW == *Copy_Pu8PinState)
    595a:	eb 81       	ldd	r30, Y+3	; 0x03
    595c:	fc 81       	ldd	r31, Y+4	; 0x04
    595e:	80 81       	ld	r24, Z
    5960:	88 23       	and	r24, r24
    5962:	09 f0       	breq	.+2      	; 0x5966 <KPD_enuGetPressedKey+0xae>
    5964:	3e c0       	rjmp	.+124    	; 0x59e2 <KPD_enuGetPressedKey+0x12a>
    5966:	1b c0       	rjmp	.+54     	; 0x599e <KPD_enuGetPressedKey+0xe6>
			{
				while(DIO_u8LOW == *Copy_Pu8PinState)
				{
					DIO_enuGetPinValue(Local_Au8Rows[Local_u8Iterator2][0], Local_Au8Rows[Local_u8Iterator2][1], Copy_Pu8PinState);
    5968:	80 91 f9 01 	lds	r24, 0x01F9
    596c:	88 2f       	mov	r24, r24
    596e:	90 e0       	ldi	r25, 0x00	; 0
    5970:	88 0f       	add	r24, r24
    5972:	99 1f       	adc	r25, r25
    5974:	fc 01       	movw	r30, r24
    5976:	e5 55       	subi	r30, 0x55	; 85
    5978:	fe 4f       	sbci	r31, 0xFE	; 254
    597a:	40 81       	ld	r20, Z
    597c:	80 91 f9 01 	lds	r24, 0x01F9
    5980:	88 2f       	mov	r24, r24
    5982:	90 e0       	ldi	r25, 0x00	; 0
    5984:	88 0f       	add	r24, r24
    5986:	99 1f       	adc	r25, r25
    5988:	fc 01       	movw	r30, r24
    598a:	e4 55       	subi	r30, 0x54	; 84
    598c:	fe 4f       	sbci	r31, 0xFE	; 254
    598e:	90 81       	ld	r25, Z
    5990:	2b 81       	ldd	r18, Y+3	; 0x03
    5992:	3c 81       	ldd	r19, Y+4	; 0x04
    5994:	84 2f       	mov	r24, r20
    5996:	69 2f       	mov	r22, r25
    5998:	a9 01       	movw	r20, r18
    599a:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <DIO_enuGetPinValue>
				return Local_enuErrorState;
			}

			if(DIO_u8LOW == *Copy_Pu8PinState)
			{
				while(DIO_u8LOW == *Copy_Pu8PinState)
    599e:	eb 81       	ldd	r30, Y+3	; 0x03
    59a0:	fc 81       	ldd	r31, Y+4	; 0x04
    59a2:	80 81       	ld	r24, Z
    59a4:	88 23       	and	r24, r24
    59a6:	01 f3       	breq	.-64     	; 0x5968 <KPD_enuGetPressedKey+0xb0>
				{
					DIO_enuGetPinValue(Local_Au8Rows[Local_u8Iterator2][0], Local_Au8Rows[Local_u8Iterator2][1], Copy_Pu8PinState);
				}
				*Copy_Pu8PinState = Local_Au8KPD[Local_u8Iterator2][Local_u8Iterator1];
    59a8:	80 91 f9 01 	lds	r24, 0x01F9
    59ac:	28 2f       	mov	r18, r24
    59ae:	30 e0       	ldi	r19, 0x00	; 0
    59b0:	80 91 fa 01 	lds	r24, 0x01FA
    59b4:	48 2f       	mov	r20, r24
    59b6:	50 e0       	ldi	r21, 0x00	; 0
    59b8:	c9 01       	movw	r24, r18
    59ba:	88 0f       	add	r24, r24
    59bc:	99 1f       	adc	r25, r25
    59be:	9c 01       	movw	r18, r24
    59c0:	22 0f       	add	r18, r18
    59c2:	33 1f       	adc	r19, r19
    59c4:	22 0f       	add	r18, r18
    59c6:	33 1f       	adc	r19, r19
    59c8:	82 0f       	add	r24, r18
    59ca:	93 1f       	adc	r25, r19
    59cc:	84 0f       	add	r24, r20
    59ce:	95 1f       	adc	r25, r21
    59d0:	fc 01       	movw	r30, r24
    59d2:	ed 54       	subi	r30, 0x4D	; 77
    59d4:	fe 4f       	sbci	r31, 0xFE	; 254
    59d6:	80 81       	ld	r24, Z
    59d8:	eb 81       	ldd	r30, Y+3	; 0x03
    59da:	fc 81       	ldd	r31, Y+4	; 0x04
    59dc:	80 83       	st	Z, r24
				return ES_OK;
    59de:	1d 82       	std	Y+5, r1	; 0x05
    59e0:	34 c0       	rjmp	.+104    	; 0x5a4a <KPD_enuGetPressedKey+0x192>
	{
		if(DIO_enuSetPinValue(Local_Au8Columns[Local_u8Iterator1][0], Local_Au8Columns[Local_u8Iterator1][1], DIO_u8LOW) != ES_OK)
		{
			return Local_enuErrorState;
		}
		for(Local_u8Iterator2 = 0; Local_u8Iterator2 < KPD_ROW_NUM; ++Local_u8Iterator2)
    59e2:	80 91 f9 01 	lds	r24, 0x01F9
    59e6:	8f 5f       	subi	r24, 0xFF	; 255
    59e8:	80 93 f9 01 	sts	0x01F9, r24
    59ec:	80 91 f9 01 	lds	r24, 0x01F9
    59f0:	84 30       	cpi	r24, 0x04	; 4
    59f2:	08 f4       	brcc	.+2      	; 0x59f6 <KPD_enuGetPressedKey+0x13e>
    59f4:	92 cf       	rjmp	.-220    	; 0x591a <KPD_enuGetPressedKey+0x62>
				}
				*Copy_Pu8PinState = Local_Au8KPD[Local_u8Iterator2][Local_u8Iterator1];
				return ES_OK;
			}
		}
		DIO_enuSetPinValue(Local_Au8Columns[Local_u8Iterator1][0], Local_Au8Columns[Local_u8Iterator1][1], DIO_u8HIGH);
    59f6:	80 91 fa 01 	lds	r24, 0x01FA
    59fa:	88 2f       	mov	r24, r24
    59fc:	90 e0       	ldi	r25, 0x00	; 0
    59fe:	88 0f       	add	r24, r24
    5a00:	99 1f       	adc	r25, r25
    5a02:	fc 01       	movw	r30, r24
    5a04:	e9 56       	subi	r30, 0x69	; 105
    5a06:	fe 4f       	sbci	r31, 0xFE	; 254
    5a08:	20 81       	ld	r18, Z
    5a0a:	80 91 fa 01 	lds	r24, 0x01FA
    5a0e:	88 2f       	mov	r24, r24
    5a10:	90 e0       	ldi	r25, 0x00	; 0
    5a12:	88 0f       	add	r24, r24
    5a14:	99 1f       	adc	r25, r25
    5a16:	fc 01       	movw	r30, r24
    5a18:	e8 56       	subi	r30, 0x68	; 104
    5a1a:	fe 4f       	sbci	r31, 0xFE	; 254
    5a1c:	90 81       	ld	r25, Z
    5a1e:	82 2f       	mov	r24, r18
    5a20:	69 2f       	mov	r22, r25
    5a22:	41 e0       	ldi	r20, 0x01	; 1
    5a24:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <DIO_enuSetPinValue>
	static u8 Local_Au8Rows [KPD_ROW_NUM][2] = KPD_ROWS;

	static u8 Local_Au8Columns [KPD_COLUMN_NUM][2] = KPD_COLUMNS;

	static u8 Local_u8Iterator1, Local_u8Iterator2;
	for(Local_u8Iterator1 = 0; Local_u8Iterator1 < KPD_COLUMN_NUM ; ++Local_u8Iterator1)
    5a28:	80 91 fa 01 	lds	r24, 0x01FA
    5a2c:	8f 5f       	subi	r24, 0xFF	; 255
    5a2e:	80 93 fa 01 	sts	0x01FA, r24
    5a32:	80 91 fa 01 	lds	r24, 0x01FA
    5a36:	8a 30       	cpi	r24, 0x0A	; 10
    5a38:	08 f4       	brcc	.+2      	; 0x5a3c <KPD_enuGetPressedKey+0x184>
    5a3a:	4e cf       	rjmp	.-356    	; 0x58d8 <KPD_enuGetPressedKey+0x20>
			}
		}
		DIO_enuSetPinValue(Local_Au8Columns[Local_u8Iterator1][0], Local_Au8Columns[Local_u8Iterator1][1], DIO_u8HIGH);
	}

	*Copy_Pu8PinState = Local_u8PressedKey;
    5a3c:	eb 81       	ldd	r30, Y+3	; 0x03
    5a3e:	fc 81       	ldd	r31, Y+4	; 0x04
    5a40:	89 81       	ldd	r24, Y+1	; 0x01
    5a42:	80 83       	st	Z, r24
	Local_enuErrorState = ES_OK;
    5a44:	1a 82       	std	Y+2, r1	; 0x02
	return Local_enuErrorState;
    5a46:	8a 81       	ldd	r24, Y+2	; 0x02
    5a48:	8d 83       	std	Y+5, r24	; 0x05
    5a4a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5a4c:	0f 90       	pop	r0
    5a4e:	0f 90       	pop	r0
    5a50:	0f 90       	pop	r0
    5a52:	0f 90       	pop	r0
    5a54:	0f 90       	pop	r0
    5a56:	cf 91       	pop	r28
    5a58:	df 91       	pop	r29
    5a5a:	08 95       	ret

00005a5c <APP_voidInit>:
extern SW_t Switch_AstrSwitchConfig[SW_NUM];


extern EXTI_t EXTI_AstrEXTIConfig[3];

void APP_voidInit(void) {
    5a5c:	df 93       	push	r29
    5a5e:	cf 93       	push	r28
    5a60:	cd b7       	in	r28, 0x3d	; 61
    5a62:	de b7       	in	r29, 0x3e	; 62

	DIO_enuInit();
    5a64:	0e 94 3f 0c 	call	0x187e	; 0x187e <DIO_enuInit>
	LED_enuInit(LED_AstrLedConfig);
    5a68:	8b e7       	ldi	r24, 0x7B	; 123
    5a6a:	91 e0       	ldi	r25, 0x01	; 1
    5a6c:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <LED_enuInit>
	Switch_enuInit(Switch_AstrSwitchConfig);
    5a70:	8e e6       	ldi	r24, 0x6E	; 110
    5a72:	91 e0       	ldi	r25, 0x01	; 1
    5a74:	0e 94 66 13 	call	0x26cc	; 0x26cc <Switch_enuInit>
	Seven_Segment_enuInit();
    5a78:	0e 94 13 14 	call	0x2826	; 0x2826 <Seven_Segment_enuInit>

	EXTI_enuInit(EXTI_AstrEXTIConfig);
    5a7c:	88 e6       	ldi	r24, 0x68	; 104
    5a7e:	91 e0       	ldi	r25, 0x01	; 1
    5a80:	0e 94 43 08 	call	0x1086	; 0x1086 <EXTI_enuInit>
	EXTI_enuSetCallBack(&INT0_ISR, 0);
    5a84:	81 e8       	ldi	r24, 0x81	; 129
    5a86:	9d e2       	ldi	r25, 0x2D	; 45
    5a88:	60 e0       	ldi	r22, 0x00	; 0
    5a8a:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <EXTI_enuSetCallBack>


	GIE_VoidEnable();
    5a8e:	0e 94 27 08 	call	0x104e	; 0x104e <GIE_VoidEnable>
	EXTI_enuEnableInterrupt(0);
    5a92:	80 e0       	ldi	r24, 0x00	; 0
    5a94:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <EXTI_enuEnableInterrupt>
}
    5a98:	cf 91       	pop	r28
    5a9a:	df 91       	pop	r29
    5a9c:	08 95       	ret

00005a9e <APP_voidProgram>:


void APP_voidProgram() {
    5a9e:	df 93       	push	r29
    5aa0:	cf 93       	push	r28
    5aa2:	cd b7       	in	r28, 0x3d	; 61
    5aa4:	de b7       	in	r29, 0x3e	; 62

	while(1) {

		if(Global_u8Mode == NORMAL_MODE) {
    5aa6:	80 91 db 01 	lds	r24, 0x01DB
    5aaa:	85 30       	cpi	r24, 0x05	; 5
    5aac:	19 f4       	brne	.+6      	; 0x5ab4 <APP_voidProgram+0x16>

			APP_voidNormalMode();
    5aae:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <APP_voidNormalMode>
    5ab2:	f9 cf       	rjmp	.-14     	; 0x5aa6 <APP_voidProgram+0x8>
		}
		else {

			APP_voidPedestriansMODE();
    5ab4:	0e 94 6c 2d 	call	0x5ad8	; 0x5ad8 <APP_voidPedestriansMODE>
    5ab8:	f6 cf       	rjmp	.-20     	; 0x5aa6 <APP_voidProgram+0x8>

00005aba <APP_voidNormalMode>:
		}
	}
}


void APP_voidNormalMode(){
    5aba:	df 93       	push	r29
    5abc:	cf 93       	push	r28
    5abe:	cd b7       	in	r28, 0x3d	; 61
    5ac0:	de b7       	in	r29, 0x3e	; 62


	APP_voidGreenLed();
    5ac2:	0e 94 39 2f 	call	0x5e72	; 0x5e72 <APP_voidGreenLed>

	APP_voidYallowLed();
    5ac6:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <APP_voidYallowLed>

	APP_voidRedLed();
    5aca:	0e 94 9f 2e 	call	0x5d3e	; 0x5d3e <APP_voidRedLed>

	APP_voidYallowLed();
    5ace:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <APP_voidYallowLed>

}
    5ad2:	cf 91       	pop	r28
    5ad4:	df 91       	pop	r29
    5ad6:	08 95       	ret

00005ad8 <APP_voidPedestriansMODE>:

void APP_voidPedestriansMODE() {
    5ad8:	df 93       	push	r29
    5ada:	cf 93       	push	r28
    5adc:	cd b7       	in	r28, 0x3d	; 61
    5ade:	de b7       	in	r29, 0x3e	; 62

	LED_enuTrunOff(&LED_AstrLedConfig[RED_LED]);
    5ae0:	8b e7       	ldi	r24, 0x7B	; 123
    5ae2:	91 e0       	ldi	r25, 0x01	; 1
    5ae4:	0e 94 da 19 	call	0x33b4	; 0x33b4 <LED_enuTrunOff>
	LED_enuTrunOff(&LED_AstrLedConfig[GREEN_LED]);
    5ae8:	83 e8       	ldi	r24, 0x83	; 131
    5aea:	91 e0       	ldi	r25, 0x01	; 1
    5aec:	0e 94 da 19 	call	0x33b4	; 0x33b4 <LED_enuTrunOff>


	APP_voidYallowLed();
    5af0:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <APP_voidYallowLed>

	APP_voidRedLed();
    5af4:	0e 94 9f 2e 	call	0x5d3e	; 0x5d3e <APP_voidRedLed>

	APP_voidYallowLed();
    5af8:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <APP_voidYallowLed>

}
    5afc:	cf 91       	pop	r28
    5afe:	df 91       	pop	r29
    5b00:	08 95       	ret

00005b02 <INT0_ISR>:

void INT0_ISR(void) {
    5b02:	df 93       	push	r29
    5b04:	cf 93       	push	r28
    5b06:	cd b7       	in	r28, 0x3d	; 61
    5b08:	de b7       	in	r29, 0x3e	; 62

	//Global_u8Mode = PEDESTRIANS_MODE;
	APP_voidPedestriansMODE();
    5b0a:	0e 94 6c 2d 	call	0x5ad8	; 0x5ad8 <APP_voidPedestriansMODE>
}
    5b0e:	cf 91       	pop	r28
    5b10:	df 91       	pop	r29
    5b12:	08 95       	ret

00005b14 <APP_voidYallowLed>:

void APP_voidYallowLed() {
    5b14:	df 93       	push	r29
    5b16:	cf 93       	push	r28
    5b18:	cd b7       	in	r28, 0x3d	; 61
    5b1a:	de b7       	in	r29, 0x3e	; 62
    5b1c:	6e 97       	sbiw	r28, 0x1e	; 30
    5b1e:	0f b6       	in	r0, 0x3f	; 63
    5b20:	f8 94       	cli
    5b22:	de bf       	out	0x3e, r29	; 62
    5b24:	0f be       	out	0x3f, r0	; 63
    5b26:	cd bf       	out	0x3d, r28	; 61

	for(s8 i = 3; i >= 0; --i) {
    5b28:	83 e0       	ldi	r24, 0x03	; 3
    5b2a:	8e 8f       	std	Y+30, r24	; 0x1e
    5b2c:	fb c0       	rjmp	.+502    	; 0x5d24 <APP_voidYallowLed+0x210>

		Seven_Segment_enuDisplayNum(i);
    5b2e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5b30:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <Seven_Segment_enuDisplayNum>

		for(u8 j = 0; j < 2; ++j) {
    5b34:	1d 8e       	std	Y+29, r1	; 0x1d
    5b36:	ef c0       	rjmp	.+478    	; 0x5d16 <APP_voidYallowLed+0x202>
			LED_enuTrunOn(&LED_AstrLedConfig[YALLOW_LED]);
    5b38:	8f e7       	ldi	r24, 0x7F	; 127
    5b3a:	91 e0       	ldi	r25, 0x01	; 1
    5b3c:	0e 94 9d 19 	call	0x333a	; 0x333a <LED_enuTrunOn>
    5b40:	80 e0       	ldi	r24, 0x00	; 0
    5b42:	90 e0       	ldi	r25, 0x00	; 0
    5b44:	aa e7       	ldi	r26, 0x7A	; 122
    5b46:	b3 e4       	ldi	r27, 0x43	; 67
    5b48:	89 8f       	std	Y+25, r24	; 0x19
    5b4a:	9a 8f       	std	Y+26, r25	; 0x1a
    5b4c:	ab 8f       	std	Y+27, r26	; 0x1b
    5b4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b50:	69 8d       	ldd	r22, Y+25	; 0x19
    5b52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5b54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5b58:	20 e0       	ldi	r18, 0x00	; 0
    5b5a:	30 e0       	ldi	r19, 0x00	; 0
    5b5c:	4a e7       	ldi	r20, 0x7A	; 122
    5b5e:	53 e4       	ldi	r21, 0x43	; 67
    5b60:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    5b64:	dc 01       	movw	r26, r24
    5b66:	cb 01       	movw	r24, r22
    5b68:	8d 8b       	std	Y+21, r24	; 0x15
    5b6a:	9e 8b       	std	Y+22, r25	; 0x16
    5b6c:	af 8b       	std	Y+23, r26	; 0x17
    5b6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5b70:	6d 89       	ldd	r22, Y+21	; 0x15
    5b72:	7e 89       	ldd	r23, Y+22	; 0x16
    5b74:	8f 89       	ldd	r24, Y+23	; 0x17
    5b76:	98 8d       	ldd	r25, Y+24	; 0x18
    5b78:	20 e0       	ldi	r18, 0x00	; 0
    5b7a:	30 e0       	ldi	r19, 0x00	; 0
    5b7c:	40 e8       	ldi	r20, 0x80	; 128
    5b7e:	5f e3       	ldi	r21, 0x3F	; 63
    5b80:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__ltsf2>
    5b84:	88 23       	and	r24, r24
    5b86:	2c f4       	brge	.+10     	; 0x5b92 <APP_voidYallowLed+0x7e>
		__ticks = 1;
    5b88:	81 e0       	ldi	r24, 0x01	; 1
    5b8a:	90 e0       	ldi	r25, 0x00	; 0
    5b8c:	9c 8b       	std	Y+20, r25	; 0x14
    5b8e:	8b 8b       	std	Y+19, r24	; 0x13
    5b90:	3f c0       	rjmp	.+126    	; 0x5c10 <APP_voidYallowLed+0xfc>
	else if (__tmp > 65535)
    5b92:	6d 89       	ldd	r22, Y+21	; 0x15
    5b94:	7e 89       	ldd	r23, Y+22	; 0x16
    5b96:	8f 89       	ldd	r24, Y+23	; 0x17
    5b98:	98 8d       	ldd	r25, Y+24	; 0x18
    5b9a:	20 e0       	ldi	r18, 0x00	; 0
    5b9c:	3f ef       	ldi	r19, 0xFF	; 255
    5b9e:	4f e7       	ldi	r20, 0x7F	; 127
    5ba0:	57 e4       	ldi	r21, 0x47	; 71
    5ba2:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gtsf2>
    5ba6:	18 16       	cp	r1, r24
    5ba8:	4c f5       	brge	.+82     	; 0x5bfc <APP_voidYallowLed+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5baa:	69 8d       	ldd	r22, Y+25	; 0x19
    5bac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5bae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5bb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5bb2:	20 e0       	ldi	r18, 0x00	; 0
    5bb4:	30 e0       	ldi	r19, 0x00	; 0
    5bb6:	40 e2       	ldi	r20, 0x20	; 32
    5bb8:	51 e4       	ldi	r21, 0x41	; 65
    5bba:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    5bbe:	dc 01       	movw	r26, r24
    5bc0:	cb 01       	movw	r24, r22
    5bc2:	bc 01       	movw	r22, r24
    5bc4:	cd 01       	movw	r24, r26
    5bc6:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    5bca:	dc 01       	movw	r26, r24
    5bcc:	cb 01       	movw	r24, r22
    5bce:	9c 8b       	std	Y+20, r25	; 0x14
    5bd0:	8b 8b       	std	Y+19, r24	; 0x13
    5bd2:	0f c0       	rjmp	.+30     	; 0x5bf2 <APP_voidYallowLed+0xde>
    5bd4:	89 e1       	ldi	r24, 0x19	; 25
    5bd6:	90 e0       	ldi	r25, 0x00	; 0
    5bd8:	9a 8b       	std	Y+18, r25	; 0x12
    5bda:	89 8b       	std	Y+17, r24	; 0x11
    5bdc:	89 89       	ldd	r24, Y+17	; 0x11
    5bde:	9a 89       	ldd	r25, Y+18	; 0x12
    5be0:	01 97       	sbiw	r24, 0x01	; 1
    5be2:	f1 f7       	brne	.-4      	; 0x5be0 <APP_voidYallowLed+0xcc>
    5be4:	9a 8b       	std	Y+18, r25	; 0x12
    5be6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5be8:	8b 89       	ldd	r24, Y+19	; 0x13
    5bea:	9c 89       	ldd	r25, Y+20	; 0x14
    5bec:	01 97       	sbiw	r24, 0x01	; 1
    5bee:	9c 8b       	std	Y+20, r25	; 0x14
    5bf0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bf2:	8b 89       	ldd	r24, Y+19	; 0x13
    5bf4:	9c 89       	ldd	r25, Y+20	; 0x14
    5bf6:	00 97       	sbiw	r24, 0x00	; 0
    5bf8:	69 f7       	brne	.-38     	; 0x5bd4 <APP_voidYallowLed+0xc0>
    5bfa:	14 c0       	rjmp	.+40     	; 0x5c24 <APP_voidYallowLed+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bfc:	6d 89       	ldd	r22, Y+21	; 0x15
    5bfe:	7e 89       	ldd	r23, Y+22	; 0x16
    5c00:	8f 89       	ldd	r24, Y+23	; 0x17
    5c02:	98 8d       	ldd	r25, Y+24	; 0x18
    5c04:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    5c08:	dc 01       	movw	r26, r24
    5c0a:	cb 01       	movw	r24, r22
    5c0c:	9c 8b       	std	Y+20, r25	; 0x14
    5c0e:	8b 8b       	std	Y+19, r24	; 0x13
    5c10:	8b 89       	ldd	r24, Y+19	; 0x13
    5c12:	9c 89       	ldd	r25, Y+20	; 0x14
    5c14:	98 8b       	std	Y+16, r25	; 0x10
    5c16:	8f 87       	std	Y+15, r24	; 0x0f
    5c18:	8f 85       	ldd	r24, Y+15	; 0x0f
    5c1a:	98 89       	ldd	r25, Y+16	; 0x10
    5c1c:	01 97       	sbiw	r24, 0x01	; 1
    5c1e:	f1 f7       	brne	.-4      	; 0x5c1c <APP_voidYallowLed+0x108>
    5c20:	98 8b       	std	Y+16, r25	; 0x10
    5c22:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(250);
			LED_enuTrunOff(&LED_AstrLedConfig[YALLOW_LED]);
    5c24:	8f e7       	ldi	r24, 0x7F	; 127
    5c26:	91 e0       	ldi	r25, 0x01	; 1
    5c28:	0e 94 da 19 	call	0x33b4	; 0x33b4 <LED_enuTrunOff>
    5c2c:	80 e0       	ldi	r24, 0x00	; 0
    5c2e:	90 e0       	ldi	r25, 0x00	; 0
    5c30:	aa e7       	ldi	r26, 0x7A	; 122
    5c32:	b3 e4       	ldi	r27, 0x43	; 67
    5c34:	8b 87       	std	Y+11, r24	; 0x0b
    5c36:	9c 87       	std	Y+12, r25	; 0x0c
    5c38:	ad 87       	std	Y+13, r26	; 0x0d
    5c3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c40:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c42:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c44:	20 e0       	ldi	r18, 0x00	; 0
    5c46:	30 e0       	ldi	r19, 0x00	; 0
    5c48:	4a e7       	ldi	r20, 0x7A	; 122
    5c4a:	53 e4       	ldi	r21, 0x43	; 67
    5c4c:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    5c50:	dc 01       	movw	r26, r24
    5c52:	cb 01       	movw	r24, r22
    5c54:	8f 83       	std	Y+7, r24	; 0x07
    5c56:	98 87       	std	Y+8, r25	; 0x08
    5c58:	a9 87       	std	Y+9, r26	; 0x09
    5c5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5c5c:	6f 81       	ldd	r22, Y+7	; 0x07
    5c5e:	78 85       	ldd	r23, Y+8	; 0x08
    5c60:	89 85       	ldd	r24, Y+9	; 0x09
    5c62:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c64:	20 e0       	ldi	r18, 0x00	; 0
    5c66:	30 e0       	ldi	r19, 0x00	; 0
    5c68:	40 e8       	ldi	r20, 0x80	; 128
    5c6a:	5f e3       	ldi	r21, 0x3F	; 63
    5c6c:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__ltsf2>
    5c70:	88 23       	and	r24, r24
    5c72:	2c f4       	brge	.+10     	; 0x5c7e <APP_voidYallowLed+0x16a>
		__ticks = 1;
    5c74:	81 e0       	ldi	r24, 0x01	; 1
    5c76:	90 e0       	ldi	r25, 0x00	; 0
    5c78:	9e 83       	std	Y+6, r25	; 0x06
    5c7a:	8d 83       	std	Y+5, r24	; 0x05
    5c7c:	3f c0       	rjmp	.+126    	; 0x5cfc <APP_voidYallowLed+0x1e8>
	else if (__tmp > 65535)
    5c7e:	6f 81       	ldd	r22, Y+7	; 0x07
    5c80:	78 85       	ldd	r23, Y+8	; 0x08
    5c82:	89 85       	ldd	r24, Y+9	; 0x09
    5c84:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c86:	20 e0       	ldi	r18, 0x00	; 0
    5c88:	3f ef       	ldi	r19, 0xFF	; 255
    5c8a:	4f e7       	ldi	r20, 0x7F	; 127
    5c8c:	57 e4       	ldi	r21, 0x47	; 71
    5c8e:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gtsf2>
    5c92:	18 16       	cp	r1, r24
    5c94:	4c f5       	brge	.+82     	; 0x5ce8 <APP_voidYallowLed+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c96:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c98:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c9e:	20 e0       	ldi	r18, 0x00	; 0
    5ca0:	30 e0       	ldi	r19, 0x00	; 0
    5ca2:	40 e2       	ldi	r20, 0x20	; 32
    5ca4:	51 e4       	ldi	r21, 0x41	; 65
    5ca6:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    5caa:	dc 01       	movw	r26, r24
    5cac:	cb 01       	movw	r24, r22
    5cae:	bc 01       	movw	r22, r24
    5cb0:	cd 01       	movw	r24, r26
    5cb2:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    5cb6:	dc 01       	movw	r26, r24
    5cb8:	cb 01       	movw	r24, r22
    5cba:	9e 83       	std	Y+6, r25	; 0x06
    5cbc:	8d 83       	std	Y+5, r24	; 0x05
    5cbe:	0f c0       	rjmp	.+30     	; 0x5cde <APP_voidYallowLed+0x1ca>
    5cc0:	89 e1       	ldi	r24, 0x19	; 25
    5cc2:	90 e0       	ldi	r25, 0x00	; 0
    5cc4:	9c 83       	std	Y+4, r25	; 0x04
    5cc6:	8b 83       	std	Y+3, r24	; 0x03
    5cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    5cca:	9c 81       	ldd	r25, Y+4	; 0x04
    5ccc:	01 97       	sbiw	r24, 0x01	; 1
    5cce:	f1 f7       	brne	.-4      	; 0x5ccc <APP_voidYallowLed+0x1b8>
    5cd0:	9c 83       	std	Y+4, r25	; 0x04
    5cd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    5cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    5cd8:	01 97       	sbiw	r24, 0x01	; 1
    5cda:	9e 83       	std	Y+6, r25	; 0x06
    5cdc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cde:	8d 81       	ldd	r24, Y+5	; 0x05
    5ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    5ce2:	00 97       	sbiw	r24, 0x00	; 0
    5ce4:	69 f7       	brne	.-38     	; 0x5cc0 <APP_voidYallowLed+0x1ac>
    5ce6:	14 c0       	rjmp	.+40     	; 0x5d10 <APP_voidYallowLed+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ce8:	6f 81       	ldd	r22, Y+7	; 0x07
    5cea:	78 85       	ldd	r23, Y+8	; 0x08
    5cec:	89 85       	ldd	r24, Y+9	; 0x09
    5cee:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cf0:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    5cf4:	dc 01       	movw	r26, r24
    5cf6:	cb 01       	movw	r24, r22
    5cf8:	9e 83       	std	Y+6, r25	; 0x06
    5cfa:	8d 83       	std	Y+5, r24	; 0x05
    5cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    5cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    5d00:	9a 83       	std	Y+2, r25	; 0x02
    5d02:	89 83       	std	Y+1, r24	; 0x01
    5d04:	89 81       	ldd	r24, Y+1	; 0x01
    5d06:	9a 81       	ldd	r25, Y+2	; 0x02
    5d08:	01 97       	sbiw	r24, 0x01	; 1
    5d0a:	f1 f7       	brne	.-4      	; 0x5d08 <APP_voidYallowLed+0x1f4>
    5d0c:	9a 83       	std	Y+2, r25	; 0x02
    5d0e:	89 83       	std	Y+1, r24	; 0x01

	for(s8 i = 3; i >= 0; --i) {

		Seven_Segment_enuDisplayNum(i);

		for(u8 j = 0; j < 2; ++j) {
    5d10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5d12:	8f 5f       	subi	r24, 0xFF	; 255
    5d14:	8d 8f       	std	Y+29, r24	; 0x1d
    5d16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5d18:	82 30       	cpi	r24, 0x02	; 2
    5d1a:	08 f4       	brcc	.+2      	; 0x5d1e <APP_voidYallowLed+0x20a>
    5d1c:	0d cf       	rjmp	.-486    	; 0x5b38 <APP_voidYallowLed+0x24>
	APP_voidPedestriansMODE();
}

void APP_voidYallowLed() {

	for(s8 i = 3; i >= 0; --i) {
    5d1e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5d20:	81 50       	subi	r24, 0x01	; 1
    5d22:	8e 8f       	std	Y+30, r24	; 0x1e
    5d24:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5d26:	88 23       	and	r24, r24
    5d28:	0c f0       	brlt	.+2      	; 0x5d2c <APP_voidYallowLed+0x218>
    5d2a:	01 cf       	rjmp	.-510    	; 0x5b2e <APP_voidYallowLed+0x1a>
			_delay_ms(250);
			LED_enuTrunOff(&LED_AstrLedConfig[YALLOW_LED]);
			_delay_ms(250);
		}
	}
}
    5d2c:	6e 96       	adiw	r28, 0x1e	; 30
    5d2e:	0f b6       	in	r0, 0x3f	; 63
    5d30:	f8 94       	cli
    5d32:	de bf       	out	0x3e, r29	; 62
    5d34:	0f be       	out	0x3f, r0	; 63
    5d36:	cd bf       	out	0x3d, r28	; 61
    5d38:	cf 91       	pop	r28
    5d3a:	df 91       	pop	r29
    5d3c:	08 95       	ret

00005d3e <APP_voidRedLed>:

void APP_voidRedLed() {
    5d3e:	df 93       	push	r29
    5d40:	cf 93       	push	r28
    5d42:	cd b7       	in	r28, 0x3d	; 61
    5d44:	de b7       	in	r29, 0x3e	; 62
    5d46:	2f 97       	sbiw	r28, 0x0f	; 15
    5d48:	0f b6       	in	r0, 0x3f	; 63
    5d4a:	f8 94       	cli
    5d4c:	de bf       	out	0x3e, r29	; 62
    5d4e:	0f be       	out	0x3f, r0	; 63
    5d50:	cd bf       	out	0x3d, r28	; 61

	LED_enuTrunOn(&LED_AstrLedConfig[RED_LED]);
    5d52:	8b e7       	ldi	r24, 0x7B	; 123
    5d54:	91 e0       	ldi	r25, 0x01	; 1
    5d56:	0e 94 9d 19 	call	0x333a	; 0x333a <LED_enuTrunOn>
	for(s8 i = 9; i >= 0; --i) {
    5d5a:	89 e0       	ldi	r24, 0x09	; 9
    5d5c:	8f 87       	std	Y+15, r24	; 0x0f
    5d5e:	78 c0       	rjmp	.+240    	; 0x5e50 <APP_voidRedLed+0x112>
		Seven_Segment_enuDisplayNum(i);
    5d60:	8f 85       	ldd	r24, Y+15	; 0x0f
    5d62:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <Seven_Segment_enuDisplayNum>
    5d66:	80 e0       	ldi	r24, 0x00	; 0
    5d68:	90 e0       	ldi	r25, 0x00	; 0
    5d6a:	aa e7       	ldi	r26, 0x7A	; 122
    5d6c:	b4 e4       	ldi	r27, 0x44	; 68
    5d6e:	8b 87       	std	Y+11, r24	; 0x0b
    5d70:	9c 87       	std	Y+12, r25	; 0x0c
    5d72:	ad 87       	std	Y+13, r26	; 0x0d
    5d74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d76:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d78:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d7e:	20 e0       	ldi	r18, 0x00	; 0
    5d80:	30 e0       	ldi	r19, 0x00	; 0
    5d82:	4a e7       	ldi	r20, 0x7A	; 122
    5d84:	53 e4       	ldi	r21, 0x43	; 67
    5d86:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    5d8a:	dc 01       	movw	r26, r24
    5d8c:	cb 01       	movw	r24, r22
    5d8e:	8f 83       	std	Y+7, r24	; 0x07
    5d90:	98 87       	std	Y+8, r25	; 0x08
    5d92:	a9 87       	std	Y+9, r26	; 0x09
    5d94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5d96:	6f 81       	ldd	r22, Y+7	; 0x07
    5d98:	78 85       	ldd	r23, Y+8	; 0x08
    5d9a:	89 85       	ldd	r24, Y+9	; 0x09
    5d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d9e:	20 e0       	ldi	r18, 0x00	; 0
    5da0:	30 e0       	ldi	r19, 0x00	; 0
    5da2:	40 e8       	ldi	r20, 0x80	; 128
    5da4:	5f e3       	ldi	r21, 0x3F	; 63
    5da6:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__ltsf2>
    5daa:	88 23       	and	r24, r24
    5dac:	2c f4       	brge	.+10     	; 0x5db8 <APP_voidRedLed+0x7a>
		__ticks = 1;
    5dae:	81 e0       	ldi	r24, 0x01	; 1
    5db0:	90 e0       	ldi	r25, 0x00	; 0
    5db2:	9e 83       	std	Y+6, r25	; 0x06
    5db4:	8d 83       	std	Y+5, r24	; 0x05
    5db6:	3f c0       	rjmp	.+126    	; 0x5e36 <APP_voidRedLed+0xf8>
	else if (__tmp > 65535)
    5db8:	6f 81       	ldd	r22, Y+7	; 0x07
    5dba:	78 85       	ldd	r23, Y+8	; 0x08
    5dbc:	89 85       	ldd	r24, Y+9	; 0x09
    5dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    5dc0:	20 e0       	ldi	r18, 0x00	; 0
    5dc2:	3f ef       	ldi	r19, 0xFF	; 255
    5dc4:	4f e7       	ldi	r20, 0x7F	; 127
    5dc6:	57 e4       	ldi	r21, 0x47	; 71
    5dc8:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gtsf2>
    5dcc:	18 16       	cp	r1, r24
    5dce:	4c f5       	brge	.+82     	; 0x5e22 <APP_voidRedLed+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5dd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    5dd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    5dd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    5dd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    5dd8:	20 e0       	ldi	r18, 0x00	; 0
    5dda:	30 e0       	ldi	r19, 0x00	; 0
    5ddc:	40 e2       	ldi	r20, 0x20	; 32
    5dde:	51 e4       	ldi	r21, 0x41	; 65
    5de0:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    5de4:	dc 01       	movw	r26, r24
    5de6:	cb 01       	movw	r24, r22
    5de8:	bc 01       	movw	r22, r24
    5dea:	cd 01       	movw	r24, r26
    5dec:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    5df0:	dc 01       	movw	r26, r24
    5df2:	cb 01       	movw	r24, r22
    5df4:	9e 83       	std	Y+6, r25	; 0x06
    5df6:	8d 83       	std	Y+5, r24	; 0x05
    5df8:	0f c0       	rjmp	.+30     	; 0x5e18 <APP_voidRedLed+0xda>
    5dfa:	89 e1       	ldi	r24, 0x19	; 25
    5dfc:	90 e0       	ldi	r25, 0x00	; 0
    5dfe:	9c 83       	std	Y+4, r25	; 0x04
    5e00:	8b 83       	std	Y+3, r24	; 0x03
    5e02:	8b 81       	ldd	r24, Y+3	; 0x03
    5e04:	9c 81       	ldd	r25, Y+4	; 0x04
    5e06:	01 97       	sbiw	r24, 0x01	; 1
    5e08:	f1 f7       	brne	.-4      	; 0x5e06 <APP_voidRedLed+0xc8>
    5e0a:	9c 83       	std	Y+4, r25	; 0x04
    5e0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    5e10:	9e 81       	ldd	r25, Y+6	; 0x06
    5e12:	01 97       	sbiw	r24, 0x01	; 1
    5e14:	9e 83       	std	Y+6, r25	; 0x06
    5e16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e18:	8d 81       	ldd	r24, Y+5	; 0x05
    5e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    5e1c:	00 97       	sbiw	r24, 0x00	; 0
    5e1e:	69 f7       	brne	.-38     	; 0x5dfa <APP_voidRedLed+0xbc>
    5e20:	14 c0       	rjmp	.+40     	; 0x5e4a <APP_voidRedLed+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e22:	6f 81       	ldd	r22, Y+7	; 0x07
    5e24:	78 85       	ldd	r23, Y+8	; 0x08
    5e26:	89 85       	ldd	r24, Y+9	; 0x09
    5e28:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e2a:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    5e2e:	dc 01       	movw	r26, r24
    5e30:	cb 01       	movw	r24, r22
    5e32:	9e 83       	std	Y+6, r25	; 0x06
    5e34:	8d 83       	std	Y+5, r24	; 0x05
    5e36:	8d 81       	ldd	r24, Y+5	; 0x05
    5e38:	9e 81       	ldd	r25, Y+6	; 0x06
    5e3a:	9a 83       	std	Y+2, r25	; 0x02
    5e3c:	89 83       	std	Y+1, r24	; 0x01
    5e3e:	89 81       	ldd	r24, Y+1	; 0x01
    5e40:	9a 81       	ldd	r25, Y+2	; 0x02
    5e42:	01 97       	sbiw	r24, 0x01	; 1
    5e44:	f1 f7       	brne	.-4      	; 0x5e42 <APP_voidRedLed+0x104>
    5e46:	9a 83       	std	Y+2, r25	; 0x02
    5e48:	89 83       	std	Y+1, r24	; 0x01
}

void APP_voidRedLed() {

	LED_enuTrunOn(&LED_AstrLedConfig[RED_LED]);
	for(s8 i = 9; i >= 0; --i) {
    5e4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e4c:	81 50       	subi	r24, 0x01	; 1
    5e4e:	8f 87       	std	Y+15, r24	; 0x0f
    5e50:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e52:	88 23       	and	r24, r24
    5e54:	0c f0       	brlt	.+2      	; 0x5e58 <APP_voidRedLed+0x11a>
    5e56:	84 cf       	rjmp	.-248    	; 0x5d60 <APP_voidRedLed+0x22>
		Seven_Segment_enuDisplayNum(i);
		_delay_ms(1000);
	}
	LED_enuTrunOff(&LED_AstrLedConfig[RED_LED]);
    5e58:	8b e7       	ldi	r24, 0x7B	; 123
    5e5a:	91 e0       	ldi	r25, 0x01	; 1
    5e5c:	0e 94 da 19 	call	0x33b4	; 0x33b4 <LED_enuTrunOff>
}
    5e60:	2f 96       	adiw	r28, 0x0f	; 15
    5e62:	0f b6       	in	r0, 0x3f	; 63
    5e64:	f8 94       	cli
    5e66:	de bf       	out	0x3e, r29	; 62
    5e68:	0f be       	out	0x3f, r0	; 63
    5e6a:	cd bf       	out	0x3d, r28	; 61
    5e6c:	cf 91       	pop	r28
    5e6e:	df 91       	pop	r29
    5e70:	08 95       	ret

00005e72 <APP_voidGreenLed>:

void APP_voidGreenLed() {
    5e72:	df 93       	push	r29
    5e74:	cf 93       	push	r28
    5e76:	cd b7       	in	r28, 0x3d	; 61
    5e78:	de b7       	in	r29, 0x3e	; 62
    5e7a:	2f 97       	sbiw	r28, 0x0f	; 15
    5e7c:	0f b6       	in	r0, 0x3f	; 63
    5e7e:	f8 94       	cli
    5e80:	de bf       	out	0x3e, r29	; 62
    5e82:	0f be       	out	0x3f, r0	; 63
    5e84:	cd bf       	out	0x3d, r28	; 61

	LED_enuTrunOn(&LED_AstrLedConfig[GREEN_LED]);
    5e86:	83 e8       	ldi	r24, 0x83	; 131
    5e88:	91 e0       	ldi	r25, 0x01	; 1
    5e8a:	0e 94 9d 19 	call	0x333a	; 0x333a <LED_enuTrunOn>
	for(s8 i = 9; i >= 0; --i) {
    5e8e:	89 e0       	ldi	r24, 0x09	; 9
    5e90:	8f 87       	std	Y+15, r24	; 0x0f
    5e92:	78 c0       	rjmp	.+240    	; 0x5f84 <APP_voidGreenLed+0x112>
		Seven_Segment_enuDisplayNum(i);
    5e94:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e96:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <Seven_Segment_enuDisplayNum>
    5e9a:	80 e0       	ldi	r24, 0x00	; 0
    5e9c:	90 e0       	ldi	r25, 0x00	; 0
    5e9e:	aa e7       	ldi	r26, 0x7A	; 122
    5ea0:	b4 e4       	ldi	r27, 0x44	; 68
    5ea2:	8b 87       	std	Y+11, r24	; 0x0b
    5ea4:	9c 87       	std	Y+12, r25	; 0x0c
    5ea6:	ad 87       	std	Y+13, r26	; 0x0d
    5ea8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5eaa:	6b 85       	ldd	r22, Y+11	; 0x0b
    5eac:	7c 85       	ldd	r23, Y+12	; 0x0c
    5eae:	8d 85       	ldd	r24, Y+13	; 0x0d
    5eb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    5eb2:	20 e0       	ldi	r18, 0x00	; 0
    5eb4:	30 e0       	ldi	r19, 0x00	; 0
    5eb6:	4a e7       	ldi	r20, 0x7A	; 122
    5eb8:	53 e4       	ldi	r21, 0x43	; 67
    5eba:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    5ebe:	dc 01       	movw	r26, r24
    5ec0:	cb 01       	movw	r24, r22
    5ec2:	8f 83       	std	Y+7, r24	; 0x07
    5ec4:	98 87       	std	Y+8, r25	; 0x08
    5ec6:	a9 87       	std	Y+9, r26	; 0x09
    5ec8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5eca:	6f 81       	ldd	r22, Y+7	; 0x07
    5ecc:	78 85       	ldd	r23, Y+8	; 0x08
    5ece:	89 85       	ldd	r24, Y+9	; 0x09
    5ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ed2:	20 e0       	ldi	r18, 0x00	; 0
    5ed4:	30 e0       	ldi	r19, 0x00	; 0
    5ed6:	40 e8       	ldi	r20, 0x80	; 128
    5ed8:	5f e3       	ldi	r21, 0x3F	; 63
    5eda:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__ltsf2>
    5ede:	88 23       	and	r24, r24
    5ee0:	2c f4       	brge	.+10     	; 0x5eec <APP_voidGreenLed+0x7a>
		__ticks = 1;
    5ee2:	81 e0       	ldi	r24, 0x01	; 1
    5ee4:	90 e0       	ldi	r25, 0x00	; 0
    5ee6:	9e 83       	std	Y+6, r25	; 0x06
    5ee8:	8d 83       	std	Y+5, r24	; 0x05
    5eea:	3f c0       	rjmp	.+126    	; 0x5f6a <APP_voidGreenLed+0xf8>
	else if (__tmp > 65535)
    5eec:	6f 81       	ldd	r22, Y+7	; 0x07
    5eee:	78 85       	ldd	r23, Y+8	; 0x08
    5ef0:	89 85       	ldd	r24, Y+9	; 0x09
    5ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ef4:	20 e0       	ldi	r18, 0x00	; 0
    5ef6:	3f ef       	ldi	r19, 0xFF	; 255
    5ef8:	4f e7       	ldi	r20, 0x7F	; 127
    5efa:	57 e4       	ldi	r21, 0x47	; 71
    5efc:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gtsf2>
    5f00:	18 16       	cp	r1, r24
    5f02:	4c f5       	brge	.+82     	; 0x5f56 <APP_voidGreenLed+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f04:	6b 85       	ldd	r22, Y+11	; 0x0b
    5f06:	7c 85       	ldd	r23, Y+12	; 0x0c
    5f08:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f0c:	20 e0       	ldi	r18, 0x00	; 0
    5f0e:	30 e0       	ldi	r19, 0x00	; 0
    5f10:	40 e2       	ldi	r20, 0x20	; 32
    5f12:	51 e4       	ldi	r21, 0x41	; 65
    5f14:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    5f18:	dc 01       	movw	r26, r24
    5f1a:	cb 01       	movw	r24, r22
    5f1c:	bc 01       	movw	r22, r24
    5f1e:	cd 01       	movw	r24, r26
    5f20:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    5f24:	dc 01       	movw	r26, r24
    5f26:	cb 01       	movw	r24, r22
    5f28:	9e 83       	std	Y+6, r25	; 0x06
    5f2a:	8d 83       	std	Y+5, r24	; 0x05
    5f2c:	0f c0       	rjmp	.+30     	; 0x5f4c <APP_voidGreenLed+0xda>
    5f2e:	89 e1       	ldi	r24, 0x19	; 25
    5f30:	90 e0       	ldi	r25, 0x00	; 0
    5f32:	9c 83       	std	Y+4, r25	; 0x04
    5f34:	8b 83       	std	Y+3, r24	; 0x03
    5f36:	8b 81       	ldd	r24, Y+3	; 0x03
    5f38:	9c 81       	ldd	r25, Y+4	; 0x04
    5f3a:	01 97       	sbiw	r24, 0x01	; 1
    5f3c:	f1 f7       	brne	.-4      	; 0x5f3a <APP_voidGreenLed+0xc8>
    5f3e:	9c 83       	std	Y+4, r25	; 0x04
    5f40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f42:	8d 81       	ldd	r24, Y+5	; 0x05
    5f44:	9e 81       	ldd	r25, Y+6	; 0x06
    5f46:	01 97       	sbiw	r24, 0x01	; 1
    5f48:	9e 83       	std	Y+6, r25	; 0x06
    5f4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    5f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    5f50:	00 97       	sbiw	r24, 0x00	; 0
    5f52:	69 f7       	brne	.-38     	; 0x5f2e <APP_voidGreenLed+0xbc>
    5f54:	14 c0       	rjmp	.+40     	; 0x5f7e <APP_voidGreenLed+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f56:	6f 81       	ldd	r22, Y+7	; 0x07
    5f58:	78 85       	ldd	r23, Y+8	; 0x08
    5f5a:	89 85       	ldd	r24, Y+9	; 0x09
    5f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f5e:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    5f62:	dc 01       	movw	r26, r24
    5f64:	cb 01       	movw	r24, r22
    5f66:	9e 83       	std	Y+6, r25	; 0x06
    5f68:	8d 83       	std	Y+5, r24	; 0x05
    5f6a:	8d 81       	ldd	r24, Y+5	; 0x05
    5f6c:	9e 81       	ldd	r25, Y+6	; 0x06
    5f6e:	9a 83       	std	Y+2, r25	; 0x02
    5f70:	89 83       	std	Y+1, r24	; 0x01
    5f72:	89 81       	ldd	r24, Y+1	; 0x01
    5f74:	9a 81       	ldd	r25, Y+2	; 0x02
    5f76:	01 97       	sbiw	r24, 0x01	; 1
    5f78:	f1 f7       	brne	.-4      	; 0x5f76 <APP_voidGreenLed+0x104>
    5f7a:	9a 83       	std	Y+2, r25	; 0x02
    5f7c:	89 83       	std	Y+1, r24	; 0x01
}

void APP_voidGreenLed() {

	LED_enuTrunOn(&LED_AstrLedConfig[GREEN_LED]);
	for(s8 i = 9; i >= 0; --i) {
    5f7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5f80:	81 50       	subi	r24, 0x01	; 1
    5f82:	8f 87       	std	Y+15, r24	; 0x0f
    5f84:	8f 85       	ldd	r24, Y+15	; 0x0f
    5f86:	88 23       	and	r24, r24
    5f88:	0c f0       	brlt	.+2      	; 0x5f8c <APP_voidGreenLed+0x11a>
    5f8a:	84 cf       	rjmp	.-248    	; 0x5e94 <APP_voidGreenLed+0x22>
		Seven_Segment_enuDisplayNum(i);
		_delay_ms(1000);
	}
	LED_enuTrunOff(&LED_AstrLedConfig[GREEN_LED]);
    5f8c:	83 e8       	ldi	r24, 0x83	; 131
    5f8e:	91 e0       	ldi	r25, 0x01	; 1
    5f90:	0e 94 da 19 	call	0x33b4	; 0x33b4 <LED_enuTrunOff>
}
    5f94:	2f 96       	adiw	r28, 0x0f	; 15
    5f96:	0f b6       	in	r0, 0x3f	; 63
    5f98:	f8 94       	cli
    5f9a:	de bf       	out	0x3e, r29	; 62
    5f9c:	0f be       	out	0x3f, r0	; 63
    5f9e:	cd bf       	out	0x3d, r28	; 61
    5fa0:	cf 91       	pop	r28
    5fa2:	df 91       	pop	r29
    5fa4:	08 95       	ret

00005fa6 <ISR_ADC>:

//extern EXTI_t EXTI_AstrEXTIConfig[3];

u8 flag = 0, Temp; u16 ADC16 = 0;

void ISR_ADC(void) {
    5fa6:	df 93       	push	r29
    5fa8:	cf 93       	push	r28
    5faa:	cd b7       	in	r28, 0x3d	; 61
    5fac:	de b7       	in	r29, 0x3e	; 62

	LCD_enuWriteNumber(ADC16);
    5fae:	80 91 fc 01 	lds	r24, 0x01FC
    5fb2:	90 91 fd 01 	lds	r25, 0x01FD
    5fb6:	cc 01       	movw	r24, r24
    5fb8:	a0 e0       	ldi	r26, 0x00	; 0
    5fba:	b0 e0       	ldi	r27, 0x00	; 0
    5fbc:	bc 01       	movw	r22, r24
    5fbe:	cd 01       	movw	r24, r26
    5fc0:	0e 94 b9 05 	call	0xb72	; 0xb72 <__floatunsisf>
    5fc4:	dc 01       	movw	r26, r24
    5fc6:	cb 01       	movw	r24, r22
    5fc8:	bc 01       	movw	r22, r24
    5fca:	cd 01       	movw	r24, r26
    5fcc:	0e 94 66 25 	call	0x4acc	; 0x4acc <LCD_enuWriteNumber>
	flag = 1;
    5fd0:	81 e0       	ldi	r24, 0x01	; 1
    5fd2:	80 93 fb 01 	sts	0x01FB, r24
}
    5fd6:	cf 91       	pop	r28
    5fd8:	df 91       	pop	r29
    5fda:	08 95       	ret

00005fdc <ADC_Test>:

void ADC_Test(void) {
    5fdc:	df 93       	push	r29
    5fde:	cf 93       	push	r28
    5fe0:	cd b7       	in	r28, 0x3d	; 61
    5fe2:	de b7       	in	r29, 0x3e	; 62
    5fe4:	28 97       	sbiw	r28, 0x08	; 8
    5fe6:	0f b6       	in	r0, 0x3f	; 63
    5fe8:	f8 94       	cli
    5fea:	de bf       	out	0x3e, r29	; 62
    5fec:	0f be       	out	0x3f, r0	; 63
    5fee:	cd bf       	out	0x3d, r28	; 61

	LCD_enuInit();
    5ff0:	0e 94 17 1a 	call	0x342e	; 0x342e <LCD_enuInit>

	ADC_enuInit();
    5ff4:	0e 94 b9 10 	call	0x2172	; 0x2172 <ADC_enuInit>

	//GIE_VoidEnable();

	LM35_CONFIG lm_35_1 = {ADC_CHANNEL_0, 5, ADC_RESOLUTION_10_BIT};
    5ff8:	ce 01       	movw	r24, r28
    5ffa:	01 96       	adiw	r24, 0x01	; 1
    5ffc:	9d 83       	std	Y+5, r25	; 0x05
    5ffe:	8c 83       	std	Y+4, r24	; 0x04
    6000:	ec ed       	ldi	r30, 0xDC	; 220
    6002:	f1 e0       	ldi	r31, 0x01	; 1
    6004:	ff 83       	std	Y+7, r31	; 0x07
    6006:	ee 83       	std	Y+6, r30	; 0x06
    6008:	f3 e0       	ldi	r31, 0x03	; 3
    600a:	f8 87       	std	Y+8, r31	; 0x08
    600c:	ee 81       	ldd	r30, Y+6	; 0x06
    600e:	ff 81       	ldd	r31, Y+7	; 0x07
    6010:	00 80       	ld	r0, Z
    6012:	8e 81       	ldd	r24, Y+6	; 0x06
    6014:	9f 81       	ldd	r25, Y+7	; 0x07
    6016:	01 96       	adiw	r24, 0x01	; 1
    6018:	9f 83       	std	Y+7, r25	; 0x07
    601a:	8e 83       	std	Y+6, r24	; 0x06
    601c:	ec 81       	ldd	r30, Y+4	; 0x04
    601e:	fd 81       	ldd	r31, Y+5	; 0x05
    6020:	00 82       	st	Z, r0
    6022:	8c 81       	ldd	r24, Y+4	; 0x04
    6024:	9d 81       	ldd	r25, Y+5	; 0x05
    6026:	01 96       	adiw	r24, 0x01	; 1
    6028:	9d 83       	std	Y+5, r25	; 0x05
    602a:	8c 83       	std	Y+4, r24	; 0x04
    602c:	98 85       	ldd	r25, Y+8	; 0x08
    602e:	91 50       	subi	r25, 0x01	; 1
    6030:	98 87       	std	Y+8, r25	; 0x08
    6032:	e8 85       	ldd	r30, Y+8	; 0x08
    6034:	ee 23       	and	r30, r30
    6036:	51 f7       	brne	.-44     	; 0x600c <ADC_Test+0x30>

	//LCD_enuWriteNumber(ADC_enuStartConversionAsynch(0, &ADC16, ISR_ADC));

	while(1) {

		LM35_u8GetTemp(&lm_35_1, &Temp);
    6038:	2e ef       	ldi	r18, 0xFE	; 254
    603a:	31 e0       	ldi	r19, 0x01	; 1
    603c:	ce 01       	movw	r24, r28
    603e:	01 96       	adiw	r24, 0x01	; 1
    6040:	b9 01       	movw	r22, r18
    6042:	0e 94 d6 17 	call	0x2fac	; 0x2fac <LM35_u8GetTemp>
		LCD_enuWriteNumber(Temp);
    6046:	80 91 fe 01 	lds	r24, 0x01FE
    604a:	88 2f       	mov	r24, r24
    604c:	90 e0       	ldi	r25, 0x00	; 0
    604e:	a0 e0       	ldi	r26, 0x00	; 0
    6050:	b0 e0       	ldi	r27, 0x00	; 0
    6052:	bc 01       	movw	r22, r24
    6054:	cd 01       	movw	r24, r26
    6056:	0e 94 b9 05 	call	0xb72	; 0xb72 <__floatunsisf>
    605a:	dc 01       	movw	r26, r24
    605c:	cb 01       	movw	r24, r22
    605e:	bc 01       	movw	r22, r24
    6060:	cd 01       	movw	r24, r26
    6062:	0e 94 66 25 	call	0x4acc	; 0x4acc <LCD_enuWriteNumber>
		LCD_enuClearDisplay();
    6066:	0e 94 af 24 	call	0x495e	; 0x495e <LCD_enuClearDisplay>
    606a:	e6 cf       	rjmp	.-52     	; 0x6038 <ADC_Test+0x5c>

0000606c <main>:
 */

#include "EXIT_Test/EXIT_Test.h"
#include "ADC_Test/ADC_Test.h"

int main() {
    606c:	df 93       	push	r29
    606e:	cf 93       	push	r28
    6070:	cd b7       	in	r28, 0x3d	; 61
    6072:	de b7       	in	r29, 0x3e	; 62

	//APP_voidInit();

	//APP_voidProgram();

	ADC_Test();
    6074:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <ADC_Test>

	return 0;
    6078:	80 e0       	ldi	r24, 0x00	; 0
    607a:	90 e0       	ldi	r25, 0x00	; 0
}
    607c:	cf 91       	pop	r28
    607e:	df 91       	pop	r29
    6080:	08 95       	ret

00006082 <__mulsi3>:
    6082:	62 9f       	mul	r22, r18
    6084:	d0 01       	movw	r26, r0
    6086:	73 9f       	mul	r23, r19
    6088:	f0 01       	movw	r30, r0
    608a:	82 9f       	mul	r24, r18
    608c:	e0 0d       	add	r30, r0
    608e:	f1 1d       	adc	r31, r1
    6090:	64 9f       	mul	r22, r20
    6092:	e0 0d       	add	r30, r0
    6094:	f1 1d       	adc	r31, r1
    6096:	92 9f       	mul	r25, r18
    6098:	f0 0d       	add	r31, r0
    609a:	83 9f       	mul	r24, r19
    609c:	f0 0d       	add	r31, r0
    609e:	74 9f       	mul	r23, r20
    60a0:	f0 0d       	add	r31, r0
    60a2:	65 9f       	mul	r22, r21
    60a4:	f0 0d       	add	r31, r0
    60a6:	99 27       	eor	r25, r25
    60a8:	72 9f       	mul	r23, r18
    60aa:	b0 0d       	add	r27, r0
    60ac:	e1 1d       	adc	r30, r1
    60ae:	f9 1f       	adc	r31, r25
    60b0:	63 9f       	mul	r22, r19
    60b2:	b0 0d       	add	r27, r0
    60b4:	e1 1d       	adc	r30, r1
    60b6:	f9 1f       	adc	r31, r25
    60b8:	bd 01       	movw	r22, r26
    60ba:	cf 01       	movw	r24, r30
    60bc:	11 24       	eor	r1, r1
    60be:	08 95       	ret

000060c0 <__udivmodhi4>:
    60c0:	aa 1b       	sub	r26, r26
    60c2:	bb 1b       	sub	r27, r27
    60c4:	51 e1       	ldi	r21, 0x11	; 17
    60c6:	07 c0       	rjmp	.+14     	; 0x60d6 <__udivmodhi4_ep>

000060c8 <__udivmodhi4_loop>:
    60c8:	aa 1f       	adc	r26, r26
    60ca:	bb 1f       	adc	r27, r27
    60cc:	a6 17       	cp	r26, r22
    60ce:	b7 07       	cpc	r27, r23
    60d0:	10 f0       	brcs	.+4      	; 0x60d6 <__udivmodhi4_ep>
    60d2:	a6 1b       	sub	r26, r22
    60d4:	b7 0b       	sbc	r27, r23

000060d6 <__udivmodhi4_ep>:
    60d6:	88 1f       	adc	r24, r24
    60d8:	99 1f       	adc	r25, r25
    60da:	5a 95       	dec	r21
    60dc:	a9 f7       	brne	.-22     	; 0x60c8 <__udivmodhi4_loop>
    60de:	80 95       	com	r24
    60e0:	90 95       	com	r25
    60e2:	bc 01       	movw	r22, r24
    60e4:	cd 01       	movw	r24, r26
    60e6:	08 95       	ret

000060e8 <__divmodsi4>:
    60e8:	97 fb       	bst	r25, 7
    60ea:	09 2e       	mov	r0, r25
    60ec:	05 26       	eor	r0, r21
    60ee:	0e d0       	rcall	.+28     	; 0x610c <__divmodsi4_neg1>
    60f0:	57 fd       	sbrc	r21, 7
    60f2:	04 d0       	rcall	.+8      	; 0x60fc <__divmodsi4_neg2>
    60f4:	14 d0       	rcall	.+40     	; 0x611e <__udivmodsi4>
    60f6:	0a d0       	rcall	.+20     	; 0x610c <__divmodsi4_neg1>
    60f8:	00 1c       	adc	r0, r0
    60fa:	38 f4       	brcc	.+14     	; 0x610a <__divmodsi4_exit>

000060fc <__divmodsi4_neg2>:
    60fc:	50 95       	com	r21
    60fe:	40 95       	com	r20
    6100:	30 95       	com	r19
    6102:	21 95       	neg	r18
    6104:	3f 4f       	sbci	r19, 0xFF	; 255
    6106:	4f 4f       	sbci	r20, 0xFF	; 255
    6108:	5f 4f       	sbci	r21, 0xFF	; 255

0000610a <__divmodsi4_exit>:
    610a:	08 95       	ret

0000610c <__divmodsi4_neg1>:
    610c:	f6 f7       	brtc	.-4      	; 0x610a <__divmodsi4_exit>
    610e:	90 95       	com	r25
    6110:	80 95       	com	r24
    6112:	70 95       	com	r23
    6114:	61 95       	neg	r22
    6116:	7f 4f       	sbci	r23, 0xFF	; 255
    6118:	8f 4f       	sbci	r24, 0xFF	; 255
    611a:	9f 4f       	sbci	r25, 0xFF	; 255
    611c:	08 95       	ret

0000611e <__udivmodsi4>:
    611e:	a1 e2       	ldi	r26, 0x21	; 33
    6120:	1a 2e       	mov	r1, r26
    6122:	aa 1b       	sub	r26, r26
    6124:	bb 1b       	sub	r27, r27
    6126:	fd 01       	movw	r30, r26
    6128:	0d c0       	rjmp	.+26     	; 0x6144 <__udivmodsi4_ep>

0000612a <__udivmodsi4_loop>:
    612a:	aa 1f       	adc	r26, r26
    612c:	bb 1f       	adc	r27, r27
    612e:	ee 1f       	adc	r30, r30
    6130:	ff 1f       	adc	r31, r31
    6132:	a2 17       	cp	r26, r18
    6134:	b3 07       	cpc	r27, r19
    6136:	e4 07       	cpc	r30, r20
    6138:	f5 07       	cpc	r31, r21
    613a:	20 f0       	brcs	.+8      	; 0x6144 <__udivmodsi4_ep>
    613c:	a2 1b       	sub	r26, r18
    613e:	b3 0b       	sbc	r27, r19
    6140:	e4 0b       	sbc	r30, r20
    6142:	f5 0b       	sbc	r31, r21

00006144 <__udivmodsi4_ep>:
    6144:	66 1f       	adc	r22, r22
    6146:	77 1f       	adc	r23, r23
    6148:	88 1f       	adc	r24, r24
    614a:	99 1f       	adc	r25, r25
    614c:	1a 94       	dec	r1
    614e:	69 f7       	brne	.-38     	; 0x612a <__udivmodsi4_loop>
    6150:	60 95       	com	r22
    6152:	70 95       	com	r23
    6154:	80 95       	com	r24
    6156:	90 95       	com	r25
    6158:	9b 01       	movw	r18, r22
    615a:	ac 01       	movw	r20, r24
    615c:	bd 01       	movw	r22, r26
    615e:	cf 01       	movw	r24, r30
    6160:	08 95       	ret

00006162 <__prologue_saves__>:
    6162:	2f 92       	push	r2
    6164:	3f 92       	push	r3
    6166:	4f 92       	push	r4
    6168:	5f 92       	push	r5
    616a:	6f 92       	push	r6
    616c:	7f 92       	push	r7
    616e:	8f 92       	push	r8
    6170:	9f 92       	push	r9
    6172:	af 92       	push	r10
    6174:	bf 92       	push	r11
    6176:	cf 92       	push	r12
    6178:	df 92       	push	r13
    617a:	ef 92       	push	r14
    617c:	ff 92       	push	r15
    617e:	0f 93       	push	r16
    6180:	1f 93       	push	r17
    6182:	cf 93       	push	r28
    6184:	df 93       	push	r29
    6186:	cd b7       	in	r28, 0x3d	; 61
    6188:	de b7       	in	r29, 0x3e	; 62
    618a:	ca 1b       	sub	r28, r26
    618c:	db 0b       	sbc	r29, r27
    618e:	0f b6       	in	r0, 0x3f	; 63
    6190:	f8 94       	cli
    6192:	de bf       	out	0x3e, r29	; 62
    6194:	0f be       	out	0x3f, r0	; 63
    6196:	cd bf       	out	0x3d, r28	; 61
    6198:	09 94       	ijmp

0000619a <__epilogue_restores__>:
    619a:	2a 88       	ldd	r2, Y+18	; 0x12
    619c:	39 88       	ldd	r3, Y+17	; 0x11
    619e:	48 88       	ldd	r4, Y+16	; 0x10
    61a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    61a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    61a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    61a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    61a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    61aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    61ac:	b9 84       	ldd	r11, Y+9	; 0x09
    61ae:	c8 84       	ldd	r12, Y+8	; 0x08
    61b0:	df 80       	ldd	r13, Y+7	; 0x07
    61b2:	ee 80       	ldd	r14, Y+6	; 0x06
    61b4:	fd 80       	ldd	r15, Y+5	; 0x05
    61b6:	0c 81       	ldd	r16, Y+4	; 0x04
    61b8:	1b 81       	ldd	r17, Y+3	; 0x03
    61ba:	aa 81       	ldd	r26, Y+2	; 0x02
    61bc:	b9 81       	ldd	r27, Y+1	; 0x01
    61be:	ce 0f       	add	r28, r30
    61c0:	d1 1d       	adc	r29, r1
    61c2:	0f b6       	in	r0, 0x3f	; 63
    61c4:	f8 94       	cli
    61c6:	de bf       	out	0x3e, r29	; 62
    61c8:	0f be       	out	0x3f, r0	; 63
    61ca:	cd bf       	out	0x3d, r28	; 61
    61cc:	ed 01       	movw	r28, r26
    61ce:	08 95       	ret

000061d0 <strlen>:
    61d0:	fc 01       	movw	r30, r24
    61d2:	01 90       	ld	r0, Z+
    61d4:	00 20       	and	r0, r0
    61d6:	e9 f7       	brne	.-6      	; 0x61d2 <strlen+0x2>
    61d8:	80 95       	com	r24
    61da:	90 95       	com	r25
    61dc:	8e 0f       	add	r24, r30
    61de:	9f 1f       	adc	r25, r31
    61e0:	08 95       	ret

000061e2 <_exit>:
    61e2:	f8 94       	cli

000061e4 <__stop_program>:
    61e4:	ff cf       	rjmp	.-2      	; 0x61e4 <__stop_program>
